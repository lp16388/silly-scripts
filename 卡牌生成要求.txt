# 战斗相关内容生成要求

## 核心规则
 中文内容 卡牌的 `name` 和 `description` 字段必须是中文。
 EMOJI 每张卡牌都必须有一个与其主题或效果相关的 `emoji`。
 全自定义buff 当卡牌涉及到新的，之前没有的buff时，必须在变量中定义该buff的详细信息和效果。
 遵循效果关键词 `effect` 字段的内容必须严格使用下方"效果（effect）字段详解"中列出的关键词和格式。禁止创造新的效果关键词。
 仅允许使用已列出的各种方法效果字段，禁止自创或修改。当无法生产出满足要求的卡牌时，就不要生成。而不是强行生成。
 我们游戏的内容是只有敌我双方的战斗，且敌方没有牌堆，能量，卡牌等概念，敌人只有意图

### 字段说明
-   `name` (string): 卡牌的中文名称。
 -   `cost` (number | "energy"): 打出卡牌需要消耗的能量值。通常在 0-3（玩家初始能量上限） 之间，或使用 "energy" 表示消耗所有当前能量（允许为0，即X=0时也可打出）。不要使用 `energy=0` 这样的效果表达式。
-   `quantity` (number): 该卡牌在牌库中的初始数量，主要用于牌库初始化。
 -   `type` (string): 卡牌类型，必须是以下之一：
    -   `Attack`: 攻击牌，主要用于造成伤害。
    -   `Skill`: 技能牌，用于获得格挡、抽卡、增益等。
    -   `Power`: 能力牌，提供持续整场战斗的能力，设计时需要区分能力和buff。
    -   `Event`: 事件牌，用于触发特殊的叙事或非战斗效果。
    -   `Curse`: 诅咒牌，无法被打出（无 `cost` 字段），且在“回合结束且仍在手牌中”时会自动触发其 `effect`，随后进入弃牌堆，可被正常抽取。
-   `rarity` (string): 卡牌稀有度，必须是以下之一：
    -   `Common`
    -   `Uncommon`
    -   `Rare`
    -   `Epic`
    -   `Legendary`
    -   `Corrupt`（腐化）
-   `emoji` (string): 一个与卡牌匹配的表情符号。
-   `effect` (string): 定义卡牌游戏机制的核心字符串。详见下文。
-   `description` (string): 对卡牌效果的中文描述，应与 `effect` 字段内容保持一致。
-   `discard_effect` (string, 可选): 当此卡牌被弃掉时触发的效果。使用与effect相同的语法。
-   `retain` (boolean, 可选): 如果为 `true`，此卡在回合结束时不会被丢弃。默认为 `false`。
-   `exhaust` (boolean, 可选): 如果为 `true`，此卡使用后将从战斗中移除。默认为 `false`。
-   `ethereal` (boolean, 可选，中文：空灵): 如果在回合结束时未打出，则从战斗中移除（不进入弃牌堆）。

## 效果（effect）字段详解

### 核心原则
- **唯一分隔符**：使用 `,` 作为效果条目的唯一分隔符
- **明确目标**：所有效果都必须明确指定目标（ME 或 OP））

### 语法格式

#### 1. 直接效果格式
```
目标.属性 操作符 值
```

**示例**：
- `ME.hp + 5` - 我方生命值+5
- `OP.lust - 3` - 对方欲望值-3
- `ME.energy = 0` - 我方能量清零
- `OP.status apply charm 2` - 对方获得魅惑2层

#### 2. 能力格式（带触发条件）
```
目标.触发条件(效果1, 效果2, ...)
```

**特点**：
- 支持一个触发条件下执行多个效果
- 括号内的效果用逗号分隔
- 能力持续到战斗结束

**示例**：
- `ME.turn_start(ME.energy + 1)` - 我方获得能力：回合开始时能量+1
- `OP.card_played(OP.lust + 2, ME.hp - 1)` - 对方获得能力：打牌时欲望+2且我方生命-1

#### 3. 特殊操作（无目标，因为是玩家独有属性）
```
操作.选择器 [值]
```

**示例**：
- `discard.random` - 随机弃掉1张牌
- `discard.choose 2` - 选择弃掉2张牌
- `reduce_cost.all 1` - 所有手牌费用减1
- `copy_card.leftmost` - 复制最左侧的卡牌
- `exile.hand.choose` - 消耗（放逐）一张选择的手牌（从战斗中移除）

### 语法组成部分

#### 目标（必需）
- `ME` - 我方（使用者自己）
- `OP` - 对方（使用者的敌对目标）
需根据使用者灵活区分，当触发效果（能力，欲望效果，意图，buff）者为敌人时,ME代表敌人，OP代表玩家
当触发效果者（卡牌，遗物，能力，欲望效果，buff...）为玩家时,ME代表玩家，OP代表敌人

#### 属性分类

##### 双方共有属性（必须指定目标 ME 或 OP）
- `hp` - 生命值
- `lust` - 欲望值
- `block` - 格挡
- `max_hp` - 最大生命值
- `max_lust` - 最大欲望值
- `status` - 状态效果
- `narrate` - 叙事（Event类型卡牌，敌我双方都可触发）

##### 玩家独有属性（无需前缀，无论敌我使用，都自动作用于玩家）
- `energy` - 能量
- `max_energy` - 最大能量
- `draw` - 抽牌
- `relics` - 遗物
- `discard` - 弃牌操作
- `reduce_cost` - 减少卡牌费用
- `copy_card` - 复制卡牌
- `trigger_effect` - 触发卡牌效果


#### 操作符
- `+` - 增加
- `-` - 减少
- `*` - 乘以
- `/` - 除以
- `=` - 设置为
- `apply` - 施加（用于状态效果）
- `remove` - 移除（用于状态效果）

#### 条件判断语法
支持if-else条件判断，格式为：`if[条件][真效果]else[假效果]` 或 `if[条件][效果]`

**重要：**使用中括号`[]`来区分条件判断和触发条件，触发条件使用圆括号`()`

**条件运算符：**
- `>` - 大于
- `<` - 小于
- `>=` - 大于等于
- `<=` - 小于等于
- `==` - 等于
- `!=` - 不等于

**示例：**
- `if[ME.energy > 2][OP.hp - 15]else[OP.hp - 8]` - 如果能量大于2造成15伤害，否则造成8伤害
- `if[ME.hp < ME.max_hp / 2][ME.block + 10, draw + 1]` - 血量低于一半时获得格挡和抽牌

#### 值
操作的数值或状态ID

#### 动态变量计算

支持在效果公式中使用数学表达式和动态变量：

##### 基础变量

**双方共有变量：**
- `ME.hp` / `OP.hp` - 当前生命值
- `ME.max_hp` / `OP.max_hp` - 最大生命值
- `ME.lust` / `OP.lust` - 当前欲望值
- `ME.max_lust` / `OP.max_lust` - 最大欲望值
- `ME.block` / `OP.block` - 当前格挡值

**玩家独有变量：**
- `ME.energy` / `energy` - 当前能量（敌人没有能量概念）
- `ME.max_energy` / `max_energy` - 最大能量
- `hand_size` - 当前手牌数量（始终指玩家）
- `deck_size` - 抽牌堆数量（始终指玩家）
- `discard_pile_size` - 弃牌堆数量（始终指玩家）
- `cards_played_this_turn` - 本回合已出牌数（始终指玩家）

#### 状态持续与衰减
- 没有“持续回合”设定，状态仅有“层数（stacks）”。持续的时间根据衰减机制决定。
- 支持“衰减/变化”机制：在状态定义里通过 `stacks_change` 指定每回合层数变化：
  - 纯数值：如 `-1` 每回合-1层，`+2` 每回合+2层
  - 百分比：如 `x0.5` 每回合层数减半（向下取整）
  - 特殊：`reset` 每回合清零；`keep` 不变

### 效果示例

#### 直接效果示例
```
ME.hp + 10                        # 我方恢复10点生命值
OP.hp - 15                        # 对方受到15点伤害
ME.lust + 5                       # 我方增加5点欲望值
ME.block + 8                      # 我方获得8点格挡
ME.energy + 1                     # 我方获得1点能量
ME.draw + 2                       # 我方抽2张牌
```

#### 状态效果示例
```
ME.status apply strength 2         # 我方获得2层力量
OP.status apply poison 3           # 对方获得3层中毒
ME.status remove weak             # 我方移除虚弱状态
```

#### 能力效果示例
```
ME.turn_start(ME.energy + 1)                    # 我方获得能力：回合开始时能量+1
OP.card_played(OP.lust + 2)                     # 对方获得能力：打牌时欲望+2
ME.take_damage(ME.block + 3, OP.lust + 1)      # 我方获得能力：受到伤害时获得3点格挡且对方欲望+1
```

#### 特殊操作示例
```
discard.random                    # 随机弃掉1张牌
discard.choose 2                  # 选择弃掉2张牌
reduce_cost.all 1                 # 所有手牌费用减1
copy_card.leftmost                # 复制最左侧的卡牌
```

### 诅咒牌（Curse）

- 诅咒牌不可被打出（不要为其设置 `cost` 字段）。
- 诅咒牌在回合结束、且仍然留在玩家手牌中时，自动执行其 `effect`（使用与普通卡牌一致的效果公式，支持条件判断与变量）。
- 示例：

```json
{
  "id": "sticky_shadow",
  "name": "粘滞暗影",
  "emoji": "🕳️",
  "type": "Curse",
  "effect": "ME.lust + 2",
  "description": "回合结束时：欲望+2。无法打出。"
}
```

#### 复合效果示例
```
ME.hp + 5, OP.lust - 3, discard.random                           # 我方回血5点，对方欲望-3，随机弃1张牌
ME.turn_start(ME.energy + 1), OP.status apply charm 2            # 我方获得回合开始能量+1的能力，对方获得魅惑2层
```

#### 动态变量计算
```
ME.hp = ME.max_hp / 2             # 我方生命值设为最大生命值的一半
OP.hp - ME.lust * 2               # 对方受到我方欲望值2倍的伤害
```
- `OP.lust + ME.max_lust * 0.3` - 对方欲望值增加我方最大欲望值的30%
- `ME.energy + (ME.max_energy - ME.energy) / 2` - 能量恢复一半

#### 条件判断完整示例
```
if[ME.energy >= 3][OP.hp - 20]else[OP.hp - 10]    # 能量充足时造成更多伤害
if[OP.hp <= 15][OP.hp - 999]                      # 斩杀效果
if[ME.hp < ME.max_hp / 3][ME.block + 15, draw + 2]else[OP.hp - 8]  # 低血量防御，否则攻击
```

#### 叙事效果
```
narrate "我集中精神，试图回忆起古代文献中记载的净化祷文..."
```

#### 弃牌效果示例

**卡牌discard_effect字段示例：**
```json
{
  "name": "不稳定的魔法",
  "effect": "OP.hp - 8",
  "discard_effect": "energy + 1, draw + 1",
  "description": "造成8点伤害。被弃掉时：获得1点能量并抽1张牌。"
}
```

**on_discard能力效果示例：**
```
ME.on_discard(energy + 1)                    # 我方获得能力：每当弃牌时获得1点能量
OP.on_discard(OP.lust + 2)                   # 对方获得能力：每当弃牌时欲望+2
ME.on_discard(draw + 1, ME.hp + 2)           # 我方获得能力：每当弃牌时抽1张牌并回复2点生命
```

### 状态效果系统
状态效果完全动态创建。当你在效果中使用新的状态ID时，必须在变量中定义该状态的详细信息。

#### 动态状态创建（更新）
你可以创建新的状态效果，需要在变量的`battle.statuses`数组中添加状态定义。
状态的目标是根据持有者判断的，ME代表持有状态的人。
重要：状态的triggers中必须使用统一效果表达式语法！状态无“持续回合”，仅有“层数（stacks）”，并可通过 `stacks_change` 定义每回合层数变化。

```json
{
  "id": "burning",
  "name": "燃烧",
  "emoji": "🔥",
  "description": "每回合受到火焰伤害",
  "type": "debuff",
  "triggers": {
    "tick": ["ME.hp - stacks"]
  }
}
```

#### 状态触发效果语法
状态的triggers中的效果必须使用统一效果表达式语法。
状态效果的触发包括
tick：每回合触发
apply：施加时触发
remove：移除时触发
hold：持有时触发（一般用于伤害修饰符，注意区分能力和buff的区别）

**重要：状态效果默认作用于持有该状态的实体，无需指定ME或OP前缀！**

正确示例：
```json
{
  "triggers": {
    "tick": ["ME.lust + stacks"],           // 每回合增加欲望值（作用于状态持有者）
    "apply": ["draw + 1"],                  // 施加时抽1张牌（玩家独有属性）
    "hold": ["ME.damage_modifier + stacks * 2"],   // 持有时每层+2使造成的伤害+2
    "remove": ["OP.hp - 10"]               // 移除时对对方生命值减少（明确指定目标）
  }
}
```

**语法规则：**
- 对于双方共有属性（hp、lust、block等），如果不指定目标，默认作用于状态持有者
- 对于玩家独有属性（energy、draw等）及手牌/牌堆相关衍生变量（hand_size、deck_size、discard_pile_size、cards_played_this_turn），总是作用于玩家
- 如果需要作用于其他目标，使用ME.或OP.前缀明确指定

如果你想创建影响伤害或其他数值的状态，应该使用修饰符属性，支持上分的操作符（加减乘除等）：

## 修饰符系统

修饰符系统支持加法(+)、减法(-)、乘法(*)、除法(/)和设置(=)操作。修饰符通过状态效果的tick触发器动态计算，支持stacks占位符。
一般通过buff或常驻能力，非常驻能力无法使用
buff的修饰符支持stacks（层数）变量,能力不支持
### 修饰符列表
- damage_modifier - 伤害修饰符（影响造成的伤害）
- damage_taken_modifier - 受到伤害修饰符（影响受到的伤害）
- lust_damage_modifier - 欲望伤害修饰符（影响造成的欲望伤害）
- lust_damage_taken_modifier - 受到欲望伤害修饰符（影响受到的欲望伤害）
- block_modifier - 格挡修饰符（影响获得的格挡值）

### 伤害修饰符
增加或减少造成的伤害：

```json
{
  "effect": "ME.damage_modifier + stacks * 2"  // 每层增加2点伤害
}
```

### 受到伤害修饰符
影响受到的伤害：
```json
{
  "effect": "ME.damage_taken_modifier - 3"  // 受到伤害减少3点
}
```


### 欲望伤害修饰符
影响造成的欲望伤害：
```json
{
  "effect": "ME.lust_damage_modifier / 2"  // 造成的欲望伤害减半
}
```


### 受到欲望伤害修饰符
影响受到的欲望伤害：
```json
{
  "effect": "ME.lust_damage_taken_modifier = 1"  // 受到的欲望伤害固定为1点
}
```


### 格挡修饰符
影响获得的格挡值：
```json
{
  "effect": "ME.block_modifier * 2"  // 获得的格挡值翻倍
}
```


### 修饰符计算顺序
1. 所有状态效果的修饰符按照状态效果的顺序依次应用
2. 加法和减法修饰符直接累加
3. 乘法和除法修饰符按顺序应用到当前值
4. 设置修饰符会覆盖当前值
5. 最后应用直接存储的修饰符（向后兼容）

## 卡牌插入效果（只会插入给玩家）

### 语法格式
```
add_to_hand {cardData}
add_to_deck {cardData}
```

### 插入到手牌
```json
{
  "effect": "add_to_hand {\"id\":\"flame_strike\",\"name\":\"烈焰打击\",\"emoji\":\"🔥\",\"type\":\"Attack\",\"cost\":2,\"effect\":\"OP.hp - 15\",\"description\":\"造成15点火焰伤害\"}"
}
```

### 插入到抽牌堆
```json
{
  "effect": "add_to_deck {\"id\":\"healing_potion\",\"name\":\"治疗药水\",\"emoji\":\"🧪\",\"type\":\"Skill\",\"cost\":1,\"effect\":\"ME.hp + 10\",\"description\":\"恢复10点生命值\"}"
}
```

### 多级嵌套卡牌
```json
{
  "effect": "add_to_hand {\"id\":\"card_a\",\"name\":\"卡牌A\",\"emoji\":\"🎴\",\"type\":\"Skill\",\"cost\":1,\"effect\":\"add_to_hand {\\\"id\\\":\\\"card_b\\\",\\\"name\\\":\\\"卡牌B\\\",\\\"emoji\\\":\\\"🃏\\\",\\\"type\\\":\\\"Attack\\\",\\\"cost\\\":2,\\\"effect\\\":\\\"OP.hp - 20\\\"}\",\"description\":\"生成卡牌B\"}"
}
```

## 道具（Items）系统

道具是可消耗的物品，使用后会减少数量，数量为0时消失。

### 道具字段说明
-   `id` (string): 道具的唯一标识符。
-   `name` (string): 道具的中文名称。
-   `emoji` (string): 一个与道具匹配的表情符号。
-   `description` (string): 道具的详细效果描述（中文）。
-   `count` (number): 道具的数量。
-   `effect` (string): 定义道具使用效果的核心字符串。

### 道具效果
道具直接执行其效果，无需前缀：

#### 道具示例
```json
{
  "id": "healing_potion",
  "name": "治疗药水",
  "emoji": "🧪",
  "description": "一瓶散发着绿光的药水，能够快速恢复生命值。",
  "count": 3,
  "effect": "ME.hp + 20"
}
```

```json
{
  "id": "purification_scroll",
  "name": "净化卷轴",
  "emoji": "📜",
  "description": "移除所有负面状态效果的魔法卷轴。",
  "count": 1,
  "effect": "ME.status remove all_debuffs"
}
```

## 能力操作

### 统一效果系统的一部分
能力字段是统一效果系统的核心组成部分，可以应用到所有战斗场景，一但指定触发时机，则视为能力牌，会在本次战斗中持续生效，直到战斗结束
在生成能力卡牌是需要注意，能力不能重复触发叠加，所以基本上所有的能力牌都应该是打出后会消耗的，即exhaust

## 跨目标能力添加

默认添加能力目标位己方,支持为对方添加能力，使用新的语法格式：
- `OP.turn_start: OP.lust + 1` - 为对方添加回合开始时欲望+1的能力
- `ME.card_played: ME.energy + 1` - 为自己添加打牌时能量+1的能力
- `OP.take_damage: ME.hp + 2` - 为对方添加受到伤害时我方回复2点生命的能力

### 能力语法格式
- `目标.触发条件(效果1, 效果2, ...)` - 标准格式
- 目标：`ME`（我方）或 `OP`（对方）
- 触发条件：`turn_start`、`card_played`、`take_damage` 等
- 效果：标准的效果表达式，多个效果用逗号分隔

### 语法格式

#### 直接触发条件格式
```
trigger(effect1, effect2, ...)
```

### 直接触发条件示例
```json
{
  "effect": "battle_start(OP.status apply charm 1)"
}
```

### 能力与状态的区别
- **能力**：永久效果，战斗期间持续存在，直接包含触发条件和效果。
- **状态**：附着在目标身上的效果，有“层数（stacks）”，无持续回合。通过 `triggers` 定义何时触发效果；可配合 `stacks_change` 定义每回合层数变化。

### 完整触发条件列表

#### 基础触发条件
- `battle_start` - 战斗开始时（仅在遗物和初始化时可用，仅触发一次，不能运用在卡牌，欲望效果之上，因为进入战斗就没有战斗开始环节了）
- `ability_gain` - 获得能力时（仅触发一次）
- `turn_start` - 回合开始时
- `turn_end` - 回合结束时
- `card_played` - 打出卡牌时
- `on_discard` - 被弃掉时（能力效果，无论什么情况弃牌都触发）
- `passive` - 被动效果（如伤害增加等，战斗开始时应用）

#### 弃牌效果机制说明

**两种弃牌效果类型：**

1. **`on_discard` 能力效果**
   - 性质：能力（Ability）
   - 触发条件：无论什么情况，只要弃掉牌就触发
   - 语法：`ME.on_discard(energy + 1, draw + 1)` 或 `OP.on_discard(OP.lust + 2)`
   - 持续性：战斗期间持续有效
   - 示例：玩家获得能力"每当弃牌时，获得1点能量"

2. **`discard_effect` 卡牌效果**
   - 性质：卡牌字段（与effect同级）
   - 触发条件：仅当拥有该字段的特定卡牌被弃掉时触发
   - 语法：使用与effect相同的解析方法，但应为单个效果
   - 持续性：一次性效果
   - 示例：某张卡牌的discard_effect为"energy + 1, draw + 1"，只有这张卡被弃掉时才触发


#### 伤害相关触发条件
- `take_damage` - 受到伤害时
- `take_heal` - 受到治疗时
- `deal_damage` - 造成伤害时
- `deal_heal` - 造成治疗时

#### 欲望相关触发条件
- `lust_increase` - 欲望增加时
- `lust_decrease` - 欲望减少时
- `deal_lust_increase` - 造成欲望增加时
- `deal_lust_decrease` - 造成欲望减少时

#### 状态效果相关触发条件
- `gain_buff` - 获得增益时
- `gain_debuff` - 获得减益时
- `lose_buff` - 失去增益时
- `lose_debuff` - 失去减益时
- `enemy_gain_buff` - 敌人获得增益时
- `enemy_gain_debuff` - 敌人获得减益时
- `enemy_lose_buff` - 敌人失去增益时
- `enemy_lose_debuff` - 敌人失去减益时

注：受到伤害时伤害变化，造成伤害时伤害变化，这些是对触发条件本身做修改的内容，应该使用修饰符效果类。

### 能力注册方式

能力只需要 `effect` 字段，触发条件包含在 `effect` 中（不再需要ID字段）：

#### 能力示例
```javascript
// 触发型能力
_.assign('battle.player_abilities', {
    "effect": "turn_start(ME.lust - 2)"
});

// 被动型能力
_.assign('battle.player_abilities', {
    "effect": "passive(ME.damage_modifier + 5)"
});

_.assign('battle.enemy.abilities', {
    "effect": "passive(OP.lust_damage_taken_modifier + 2)"
});
```
请注意，禁止嵌套，即能力的效果是添加能力，不允许这样的字段。
## 遗物（Artifacts）系统

遗物是提供持续战斗效果的物品，在战斗开始时激活并持续整场战斗。

### 遗物字段说明
-   `id` (string): 遗物的唯一标识符。
-   `name` (string): 遗物的中文名称。
-   `emoji` (string): 一个与遗物匹配的表情符号。
-   `description` (string): 遗物的详细故事和效果描述（中文）。
-   `effect` (string): 定义遗物游戏机制的核心字符串。

### 遗物效果
遗物使用统一效果表达式语法，支持新的括号触发格式。遗物总是由玩家发动，所以在遗物效果中ME指玩家，OP指敌人。

**推荐格式：**使用括号语法：`trigger(effects)`
禁止嵌套！禁止遗物的效果是添加能力
#### 遗物示例
```json
{
  "id": "strength_ring",
  "name": "力量指环",
  "emoji": "💍",
  "description": "一枚散发着红光的指环，佩戴者的攻击力会得到提升。",
  "effect": "battle_start(ME.status apply strength 1)"
}
```

**支持的触发时机：**
同能力

## 弃牌系统

### 主动弃牌
卡牌可以要求玩家弃掉其他卡牌作为使用条件：
- **弃牌需求字段**：`"discard_requirement": 2` - 需要弃掉2张牌
- **使用流程**：卡牌悬停 → 玩家选择弃牌 → 执行卡牌效果 → 触发弃牌效果

### 被动弃牌效果
使用选择器语法进行弃牌操作：
- `discard.选择器语法` - 弃掉选择器指定的牌

### 弃牌触发效果
卡牌可以有弃牌时触发的效果：
- **弃牌效果字段**：`"discard_effect": "ME.energy + 1"` - 弃牌时获得1点能量

## 消耗卡牌
使用选择器语法进行消耗卡牌操作
- `exile.选择器语法` - 消耗选择器指定的牌（本场战斗中移除）

## 统一牌选择系统

支持多种牌选择方式，用于高级效果（支持堆域前缀，默认 `hand.`）：
- `reduce_cost.hand.all 1` - 所有手牌费用减1
- `reduce_cost.hand.choose 1` - 选择的手牌费用减1
- `reduce_cost.hand.leftmost 2` - 最左侧的手牌费用减2（仅 hand.* 支持左右）
- `reduce_cost.draw.all 1` - 所有抽牌堆的牌费用减1（无左右）
- `reduce_cost.discard.choose 1` - 选择弃牌堆中的牌费用减1（无左右）
- `copy_card.hand.choose` - 复制选择的手牌
- `copy_card.hand.leftmost` - 复制最左侧的手牌（仅 hand.*）
- `copy_card.hand.random` - 复制随机的手牌
- `trigger_effect.hand.choose` - 选择的手牌下次使用效果触发两次
- `trigger_effect.hand.rightmost` - 最右侧的手牌下次使用效果触发两次（仅 hand.*）

### 选择器语法
- 支持堆域前缀，默认 `hand.`：
  - `hand.`（手牌，默认）
  - `draw.`（抽牌堆）
  - `discard.`（弃牌堆）
- 选择器关键字：
  - `random` - 随机选择（可用数字后缀，如 `random2`）
  - `all` - 所有
  - `choose` - 玩家主动选择
  - `leftmost`/`rightmost` - 最左侧/最右侧（仅 hand.* 支持）
  - `leftmost2` - 最左侧2张（仅 hand.*）
  - `all_cards` - 全部卡牌（手牌 + 抽牌堆 + 弃牌堆，无需前缀）
- 组合：用 `+` 连接多个选择器（如 `hand.random+discard.random2`）
- 注意：抽牌堆与弃牌堆没有左右顺序的概念，不支持 leftmost/rightmost 系列。



#### 弃牌效果示例
```json
{
  "id": "explosive_card",
  "name": "爆炸卡牌",
  "emoji": "💥",
  "type": "Attack",
  "cost": 2,
  "effect": "OP.hp - 5",
  "discard_effect": "OP.hp - 10",
  "description": "造成5点伤害，被弃掉时造成10点伤害"
}
```

### 状态效果中的目标处理
- **buff/debuff效果**：不需要指定目标（ME/OP），因为已经附加到特定目标身上
- **示例**：`lust + stacks * 3` 会自动作用于持有该状态的目标
- **stacks变量**：在状态效果中会自动替换为当前层数

### 重要说明
1. **能力语法**：必须使用新格式，使用括号语法 `trigger(effects)`，不再支持旧的冒号语法
2. **状态效果目标**：状态效果默认作用于持有该状态的实体，无需指定ME/OP前缀
3. **动态变量**：系统已优化实时计算，复合效果中的动态变量会获取最新值；未定义或非法数值按0处理以保证计算安全
4. **遗物效果**：推荐使用新的括号触发格式，如`battle_start(effects)`
5. **UI显示**：带触发前缀的能力效果现在能正确显示在UI中
6. **修饰符系统**：支持`damage_taken_modifier`, `lust_damage_taken_modifier`, `block_modifier`等防御性修饰符
7. **弃牌效果**：使用 `on_discard(effects)` 格式，在卡牌被弃掉时触发
8. **玩家独有属性**：`energy`, `draw`, `discard`等总是作用于玩家，无需前缀
9. **状态持续机制（变更）**：取消“持续回合”设定，状态仅有“层数（stacks）”。
10. **衰减机制（新增）**：状态可定义每回合的层数变化 `stacks_change`：
    - 纯数值：如 `-1` 每回合-1层，`+2` 每回合+2层
    - 百分比：如 `x0.5` 每回合层数减半（向下取整）
    - 特殊值：`reset` 每回合清零，`keep` 不变
11. **状态触发**：仍通过 `triggers` 定义 `apply / tick / remove / hold / stack` 等触发，效果字符串中可使用 `stacks` 占位符表示当前层数。
12. **示例（中毒）**：
    ```json
    {
      "id": "poison",
      "name": "中毒",
      "emoji": "☠️",
      "description": "回合结束时受到基于层数的伤害，并每回合衰减",
      "type": "debuff",
      "stacks_change": -1,
      "triggers": {
        "tick": ["OP.hp - stacks"]
      }
    }
    ```

## 设计原则与示例
-   平衡性 卡牌的强度应与其`cost`相匹配。高费卡牌能造成比数张低费卡牌更强的伤害。稀有度`rarity`主要是区别卡牌的效果，普通卡牌只有一个效果，罕见卡牌拥有复合效果，稀有卡牌拥有更强力的效果，史诗卡牌可以对战斗造成重大影响，传说卡牌可以直接影响整个游戏的胜负。
-   一致性 `description` 必须准确地反映 `effect` 的内容。
-   组合效果 一张牌可以有多个效果，用逗号隔开。
-   灵活创新 可以创造新的状态效果，但需要在变量中定义其详细信息。
-   语法规范 严格遵循统一效果表达式语法，确保效果能够正确解析和执行。
-   卡牌联动 卡牌直接要有联动效果，增加玩家的体验，例如负面状态结算。例如增加能量来打出能量需求强大的卡牌。
-   能量需求 不要设计无法打出的卡牌，例如玩家在没有增加能量手段的情况下，默认能量只有3，此时不应该创作超过该能量需求的卡牌，导致无法使用。
-   动态消耗 使用 `"cost": "energy"` 的卡牌可以消耗所有当前能量，效果强度应该与消耗的能量相关。
-   条件判断 使用if-else语法可以根据战斗状态动态调整效果，增加策略深度。条件应该基于实际的战斗状态，如生命值、能量等。
-   语法区别 **条件判断使用中括号`[]`，触发条件使用圆括号`()`**。例如：`if[condition][effect]` vs `turn_start(effect)` 