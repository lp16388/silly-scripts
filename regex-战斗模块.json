{
    "id": "8ebcf129-9ef7-4389-9969-3a8ee17b10e2",
    "scriptName": "战斗模块",
    "findRegex": "<BATTLE_START>",
    "replaceString": "```\n<!doctype html><html lang=\"zh-CN\"><head><meta charset=\"UTF-8\"/><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"/><title>FishRPG - 卡牌战斗</title><link href=\"https://fonts.googleapis.com/css2?family=ZCOOL+KuaiLe&family=Noto+Sans+SC:wght@300;400;500&display=swap\" rel=\"stylesheet\"/><style>@import url(https://fonts.googleapis.com/css2?family=ZCOOL+KuaiLe&family=Noto+Sans+SC:wght@300;400;500&display=swap);\n/*! tailwindcss v4.1.12 | MIT License | https://tailwindcss.com */@keyframes fadeIn{from{opacity:0}to{opacity:1}}@keyframes fadeOut{from{opacity:1}to{opacity:0}}@keyframes slideInUp{from{transform:translateY(100%);opacity:0}to{transform:translateY(0);opacity:1}}@keyframes slideInDown{from{transform:translateY(-100%);opacity:0}to{transform:translateY(0);opacity:1}}@keyframes bounce{0%,20%,53%,80%,100%{transform:translate3d(0,0,0)}40%,43%{transform:translate3d(0,-30px,0)}70%{transform:translate3d(0,-15px,0)}90%{transform:translate3d(0,-4px,0)}}@keyframes pulse{0%{transform:scale(1)}50%{transform:scale(1.05)}100%{transform:scale(1)}}@keyframes shake{0%,100%{transform:translateX(0)}10%,30%,50%,70%,90%{transform:translateX(-10px)}20%,40%,60%,80%{transform:translateX(10px)}}@keyframes glow{0%,100%{box-shadow:0 0 5px hsla(0,0%,100%,.3)}50%{box-shadow:0 0 20px hsla(0,0%,100%,.8)}}@keyframes float{0%,100%{transform:translateY(0px)}50%{transform:translateY(-10px)}}@keyframes spin{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}.card-casting{animation:glow .5s ease-in-out;transform:scale(1.05);z-index:1000}.card-hover{transform:translateY(-5px);transition:transform .2s ease;box-shadow:0 5px 15px rgba(0,0,0,.3)}.card-dragging{transform:rotate(5deg) scale(1.1);opacity:.8;z-index:1000}.card-drawing{animation:slideInUp .6s ease-out}.card-glow{position:absolute;top:0;left:0;right:0;bottom:0;border-radius:inherit;opacity:0;transition:opacity .3s ease;pointer-events:none}.enhanced-card:hover .card-glow{opacity:1;animation:glow 2s ease-in-out infinite}.status-pulsing{animation:pulse 2s ease-in-out infinite}.status-apply-effect{animation:bounce .8s ease-out}.status-remove-flash{animation:shake .6s ease-in-out}.relic-activated{animation:glow 1s ease-in-out}.relic-hover{transform:scale(1.1);transition:transform .2s ease}.relic-shine{position:absolute;top:0;left:0;right:0;bottom:0;background:linear-gradient(45deg,transparent 30%,rgba(255,255,255,0.3) 50%,transparent 70%);transform:translateX(-100%);transition:transform .6s ease}.relic-component:hover .relic-shine{transform:translateX(100%)}.damage-number{animation:fadeOut 1.5s ease-out forwards;font-weight:bold;text-shadow:2px 2px 4px rgba(0,0,0,.8);pointer-events:none;z-index:1000}.damage-damage{color:#f44}.damage-heal{color:#4f4}.damage-lust{color:#f4f}.hp-bar{position:relative;overflow:hidden}.hp-bar .hp{transition:width .8s ease-out;position:relative}.hp-bar .hp::after{content:\"\";position:absolute;top:0;left:0;right:0;bottom:0;background:linear-gradient(90deg,transparent,rgba(255,255,255,0.3),transparent);transform:translateX(-100%);animation:shine 2s ease-in-out infinite}@keyframes shine{0%{transform:translateX(-100%)}50%{transform:translateX(100%)}100%{transform:translateX(100%)}}.energy-gain{animation:pulse .5s ease-in-out;color:#4f4}.energy-loss{animation:shake .5s ease-in-out;color:#f44}.hit-flash{animation:flash .2s ease-in-out}@keyframes flash{0%,100%{background-color:rgba(0,0,0,0)}50%{background-color:hsla(0,0%,100%,.5)}}.victory-overlay,.defeat-overlay{animation:fadeIn .5s ease-in-out}.victory-title{animation:bounce 1s ease-out;color:gold;text-shadow:2px 2px 4px rgba(0,0,0,.8);font-size:3rem;margin-bottom:1rem}.defeat-title{animation:shake 1s ease-out;color:#f44;text-shadow:2px 2px 4px rgba(0,0,0,.8);font-size:3rem;margin-bottom:1rem}.defeat-subtitle{animation:fadeIn 1s ease-in-out .5s both;color:#ccc;font-size:1.5rem}.particle{animation:float 3s ease-in-out infinite;opacity:.8}.progress-bar.animated .progress-fill{transition:width .3s ease-out}.progress-shine{position:absolute;top:0;left:0;right:0;bottom:0;background:linear-gradient(90deg,transparent,rgba(255,255,255,0.3),transparent);transform:translateX(-100%);animation:shine 2s ease-in-out infinite}.tooltip{animation:fadeIn .2s ease-in-out;transform-origin:bottom center}.log-entry{animation:slideInUp .3s ease-out}.settings-panel{animation:slideInDown .3s ease-out}@media (prefers-reduced-motion:reduce){*{animation-duration:.01ms !important;animation-iteration-count:1 !important;transition-duration:.01ms !important}}.enhanced-card,.status-icon,.relic-component{will-change:transform;backface-visibility:hidden;perspective:1000px}.card-3d{transform-style:preserve-3d;transition:transform .3s ease}.card-3d:hover{transform:rotateY(10deg) rotateX(5deg)}.ens-effect{animation:pulse 1.5s ease-in-out infinite;filter:hue-rotate(0deg)}.ens-effect.intensity-1{animation-duration:3s;filter:hue-rotate(30deg)}.ens-effect.intensity-2{animation-duration:2.5s;filter:hue-rotate(60deg)}.ens-effect.intensity-3{animation-duration:2s;filter:hue-rotate(90deg)}.ens-effect.intensity-4{animation-duration:1.5s;filter:hue-rotate(120deg)}.ens-effect.intensity-5{animation-duration:1s;filter:hue-rotate(150deg);animation-name:pulse,shake}.loading-spinner{animation:spin 1s linear infinite}.btn{transition:all .2s ease}.btn:hover{transform:translateY(-2px);box-shadow:0 4px 8px rgba(0,0,0,.2)}.btn:active{transform:translateY(0);box-shadow:0 2px 4px rgba(0,0,0,.2)}.modal{animation:fadeIn .3s ease-in-out}.modal-content{animation:slideInDown .3s ease-out}@keyframes cardPlay{0%{transform:translateY(-20px) scale(1.1);opacity:1}50%{transform:translateY(-50px) scale(1.2) rotate(5deg);opacity:.8}100%{transform:translateY(-100px) scale(0.5) rotate(15deg);opacity:0}}@keyframes cardDraw{0%{transform:translateY(50px) scale(0.8);opacity:0}100%{transform:translateY(0) scale(1);opacity:1}}@keyframes energyInsufficient{0%,100%{transform:translateX(0)}20%,60%{transform:translateX(-5px)}40%,80%{transform:translateX(5px)}}.card-enhanced-hover{transition:all .3s cubic-bezier(0.4,0,0.2,1)}.card-enhanced-hover:hover{transform:translateY(-25px) scale(1.15);box-shadow:0 20px 40px rgba(0,0,0,.7);filter:brightness(1.1)}.shake-animation{animation:shake .3s ease-in-out}.hp-fill{transition:background-color .3s ease,width .5s ease}.hp-fill.hp-low{background-color:#ff9500 !important}.hp-fill.hp-critical{background-color:#f33 !important;animation:criticalPulse 1s infinite}@keyframes criticalPulse{0%,100%{opacity:1}50%{opacity:.7}}@keyframes lustPulse{0%,100%{transform:translate(-50%,-50%) scale(1);box-shadow:0 12px 36px rgba(0,0,0,.8)}50%{transform:translate(-50%,-50%) scale(1.05);box-shadow:0 16px 48px rgba(255,20,147,.6)}}.damage-number{animation:damageFloat 1.5s ease-out forwards}@keyframes damageFloat{0%{transform:translateY(0) scale(0.8);opacity:1}20%{transform:translateY(-10px) scale(1.2);opacity:1}100%{transform:translateY(-60px) scale(1);opacity:0}}.control-button{transition:all .3s ease}.control-button:hover{transform:translateY(-2px);box-shadow:0 4px 12px rgba(0,0,0,.3)}.control-button:active{transform:translateY(0)}.item-modal{animation:modalFadeIn .3s ease-out}@keyframes modalFadeIn{0%{opacity:0;transform:scale(0.9)}100%{opacity:1;transform:scale(1)}}#battle-log{transition:all .2s ease}.log-entry{animation:logEntrySlide .3s ease-out}@keyframes logEntrySlide{0%{transform:translateX(-20px);opacity:0}100%{transform:translateX(0);opacity:1}}.lust-fill{transition:background-color .3s ease,width .5s ease;background-color:hotpink !important}.lust-fill.lust-high{background-color:#ff1493 !important}.lust-fill.lust-critical{background-color:crimson !important;animation:lustCriticalPulse 1s infinite}@keyframes lustCriticalPulse{0%,100%{opacity:1;box-shadow:0 0 10px crimson}50%{opacity:.8;box-shadow:0 0 20px crimson}}.status-effect-icon{animation:statusAppear .5s ease-out;transition:all .3s ease}.status-effect-icon:hover{transform:scale(1.1);background:hsla(0,0%,100%,.3) !important}@keyframes statusAppear{0%{transform:scale(0);opacity:0}50%{transform:scale(1.2)}100%{transform:scale(1);opacity:1}}.player-status-effects,.enemy-status-effects{min-height:30px;display:flex;flex-wrap:wrap;align-items:center;justify-content:center;gap:4px;padding:5px}@keyframes orgasmFlash{0%{opacity:0}10%{opacity:1}20%{opacity:.3}30%{opacity:.9}40%{opacity:.1}50%{opacity:.8}60%{opacity:.2}70%{opacity:.7}80%{opacity:.1}90%{opacity:.5}100%{opacity:0}}.orgasm-flash{animation:orgasmFlash 2s ease-out}*{font-family:\"ZCOOL KuaiLe\",\"Noto Sans SC\",\"Microsoft YaHei\",\"Segoe UI\",\"Helvetica Neue\",sans-serif !important}h1,h2,h3,.game-title,.enemy-name,.card-name,.hand-label,.turn-counter,.stat-text,.stat-value,.effect-label,.intent-text,.enemy-intent,.end-turn-button,.control-button,.enemy-emoji,.card-description,.relic-name,.relic-description,.status-effect,.effect-tag,.lust-effect-name,.lust-effect-item,.battle-log,.phase-indicator,.deck-stat,.draw-pile-count,.discard-pile-count,.no-relics,.no-lust-effect,.enemy-status,.player-status,.lust-overflow-header h3,.lust-overflow-description,#enemy-name,#player-hp,#player-lust,#player-energy,#player-block,#enemy-hp,#enemy-lust,#enemy-block,#turn-number,#phase-indicator,#draw-pile-count,#discard-pile-count,#enemy-status-effects,#player-status-effects,#enemy-lust-effect,#player-lust-effect{font-family:\"ZCOOL KuaiLe\",\"Noto Sans SC\",\"Microsoft YaHei\",sans-serif !important}.clickable{cursor:pointer !important;transition:all .2s ease}.clickable:hover{opacity:.8;transform:scale(1.05);filter:brightness(1.2)}.clickable:active{transform:scale(0.95)}.enhanced-card{position:relative;width:120px;height:160px;margin:5px;border-radius:8px;background:linear-gradient(135deg,#2d3748,#4a5568);border:2px solid #718096;overflow:hidden;transition:all .3s ease;box-shadow:0 4px 8px rgba(0,0,0,.3);perspective:1000px;transform-style:preserve-3d}.enhanced-card.card-hover{transform:translateY(-5px) scale(1.05);box-shadow:0 8px 16px rgba(0,0,0,.4);border-color:#e2e8f0}.enhanced-card .card-header{position:absolute;top:5px;left:5px;right:5px;display:flex;justify-content:space-between;align-items:center;z-index:2}.enhanced-card .card-header .card-cost{background:#4299e1;color:#fff;border-radius:50%;width:24px;height:24px;display:flex;align-items:center;justify-content:center;font-weight:bold;font-size:.9em;box-shadow:0 2px 4px rgba(0,0,0,.3)}.enhanced-card .card-header .card-rarity-gem{width:16px;height:16px;border-radius:50%;background:#a0aec0;box-shadow:0 0 8px rgba(0,0,0,.5);border:1px solid hsla(0,0%,100%,.3)}.enhanced-card .card-header .card-type-indicator{position:absolute;top:-8px;right:-8px;padding:3px 8px;border-radius:12px;font-size:.6em;font-weight:bold;color:#fff;text-shadow:0 1px 2px rgba(0,0,0,.8);z-index:3;border:1px solid hsla(0,0%,100%,.3);-webkit-backdrop-filter:blur(5px);backdrop-filter:blur(5px)}.enhanced-card .card-artwork{position:absolute;top:35px;left:0;right:0;height:60px;display:flex;align-items:center;justify-content:center;background:hsla(0,0%,100%,.1)}.enhanced-card .card-artwork .card-emoji{font-size:2.5em;text-shadow:0 2px 4px rgba(0,0,0,.5)}.enhanced-card .card-artwork .card-keyword{position:absolute;bottom:2px;right:2px;background:rgba(0,0,0,.7);color:#fff;padding:2px 4px;border-radius:3px;font-size:.6em;font-weight:bold}.enhanced-card .card-artwork .card-keyword.retain{background:#38a169}.enhanced-card .card-artwork .card-keyword.exhaust{background:#e53e3e}.enhanced-card .card-artwork .card-keyword.ethereal{background:#805ad5}.enhanced-card .card-body{position:absolute;bottom:0;left:0;right:0;padding:6px;background:rgba(0,0,0,.85);color:#fff;max-height:45%;overflow:hidden}.enhanced-card .card-body .card-name{font-size:.75em;font-weight:bold;margin-bottom:3px;text-align:center;line-height:1.1}.enhanced-card .card-body .card-description{font-size:.55em;line-height:1.2;opacity:.9;text-align:center;max-height:2.4em;line-clamp:2;overflow:hidden;display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical}.enhanced-card .card-glow{position:absolute;top:-2px;left:-2px;right:-2px;bottom:-2px;background:linear-gradient(45deg,transparent,rgba(255,255,255,0.1),transparent);border-radius:8px;opacity:0;transition:opacity .3s ease}.enhanced-card:hover .card-glow{opacity:1}.enhanced-card.rarity-Common{border-color:#a0aec0}.enhanced-card.rarity-Common .card-rarity-gem{background:#a0aec0}.enhanced-card.rarity-Uncommon{border-color:#38a169}.enhanced-card.rarity-Uncommon .card-rarity-gem{background:#38a169}.enhanced-card.rarity-Rare{border-color:#9333ea}.enhanced-card.rarity-Rare .card-rarity-gem{background:#9333ea}.enhanced-card.rarity-Epic{border-color:#dc2626;animation:epic-glow 2s ease-in-out infinite alternate}.enhanced-card.rarity-Epic .card-rarity-gem{background:#dc2626}.enhanced-card.rarity-Legendary{border-color:#f59e0b;animation:legendary-glow 2s ease-in-out infinite alternate}.enhanced-card.rarity-Legendary .card-rarity-gem{background:#f59e0b}.enhanced-card.rarity-Corrupt{border-color:darkred;background:linear-gradient(135deg,#2b0000,#3d0000);box-shadow:0 0 20px rgba(139,0,0,.6),inset 0 0 20px rgba(0,0,0,.6)}.enhanced-card.rarity-Corrupt::before{content:\"\";position:absolute;top:0;left:0;right:0;bottom:0;background:radial-gradient(transparent,rgba(0,0,0,0.4));border-radius:9px;z-index:1;pointer-events:none}.enhanced-card.rarity-Corrupt::after{content:\"\";position:absolute;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:16px;background:linear-gradient(45deg,rgba(139,0,0,0.6),transparent,rgba(139,0,0,0.6));z-index:0;pointer-events:none;animation:corrupt-pulse 3s ease-in-out infinite}.enhanced-card.rarity-Corrupt .card-type-indicator{background:linear-gradient(135deg,#4a148c,#6a1b9a)}@keyframes corrupt-pulse{0%,100%{box-shadow:0 0 12px rgba(139,0,0,.6)}50%{box-shadow:0 0 24px rgba(139,0,0,.9)}}.enhanced-card.rarity-Rare,.enhanced-card.rarity-Epic,.enhanced-card.rarity-Legendary{perspective:1000px;transform-style:preserve-3d;transition:transform .1s ease-out,box-shadow .3s ease}.card-tooltip{background:rgba(0,0,0,.95);color:#fff;padding:12px;border-radius:8px;border:1px solid #4a5568;max-width:320px;box-shadow:0 4px 12px rgba(0,0,0,.5);font-size:.9em;line-height:1.4}.card-tooltip .tooltip-header{font-weight:bold;font-size:1.1em;margin-bottom:8px;color:#e2e8f0}.card-tooltip .tooltip-cost,.card-tooltip .tooltip-type,.card-tooltip .tooltip-rarity{margin-bottom:4px;color:#a0aec0;font-size:.9em}.card-tooltip .tooltip-description{margin-top:8px;padding-top:8px;border-top:1px solid #4a5568;color:#e2e8f0}.card-tooltip .tooltip-effects{margin-top:8px;max-height:240px;overflow:auto;word-break:break-word}.card-tooltip .tooltip-keywords{margin-top:8px;display:flex;gap:4px;flex-wrap:wrap}.card-tooltip .tooltip-keywords .keyword{background:#4a5568;color:#fff;padding:2px 6px;border-radius:4px;font-size:.8em;font-weight:bold}.debug-button{margin-top:10px;padding:8px 16px;background:linear-gradient(135deg,#4a5568,#2d3748);color:#e2e8f0;border:1px solid #718096;border-radius:6px;cursor:pointer;font-size:.9em;display:flex;align-items:center;gap:8px;width:100%;justify-content:center;transition:all .2s ease}.debug-button:hover{background:linear-gradient(135deg,#5a6578,#3d4758);border-color:#a0aec0}.debug-button:active{transform:scale(0.98)}.debug-button .button-icon{font-size:1em}*{box-sizing:border-box}body,html{width:100%;margin:0;padding:0;font-family:\"ZCOOL KuaiLe\",\"Noto Sans SC\",\"Microsoft YaHei\",\"Segoe UI\",\"Helvetica Neue\",sans-serif !important;background:#0f0c29;background:linear-gradient(to right,#24243e,#302b63,#0f0c29);color:#fff;overflow:hidden;text-shadow:1px 1px 2px #000,0 0 .5em rgba(0,0,0,.7);box-sizing:border-box}@keyframes moveStars{from{transform:translate(0,0)}to{transform:translate(-50%,-50%)}}.card-game-container{width:100vw;margin:0;display:flex;flex-direction:column;box-sizing:border-box;padding:10px;background:rgba(0,0,0,.2);position:relative;overflow:hidden}.card-game-container::before{content:\"\";position:absolute;top:0;left:0;width:200%;height:200%;background-image:radial-gradient(circle at 20% 20%,rgba(180,180,255,0.3) 1px,transparent 1px),radial-gradient(circle at 80% 80%,rgba(200,200,255,0.4) 1px,transparent 1px);background-size:50px 50px;animation:moveStars 180s linear infinite;z-index:0}.card-game-container>*{position:relative;z-index:1}#setup-scene{display:flex;flex-direction:column;justify-content:center;align-items:center;gap:15px;height:100%}#setup-scene .input-group{display:flex;flex-direction:column;width:80%;max-width:500px}#setup-scene .input-group label{margin-bottom:5px}#setup-scene .input-group input[type=text]{padding:8px;border-radius:4px;border:1px solid #ccc;background:rgba(0,0,0,.5);color:#fff}#setup-scene button{padding:10px 20px;border-radius:5px;border:none;background-color:#4caf50;color:#fff;cursor:pointer;font-size:1em}#setup-scene button:hover{background-color:#45a049}#battle-scene{display:flex;flex-direction:column;flex:1;width:100%;height:calc(100vh - 20px);gap:5px;padding:0}.effects-row{display:flex !important;gap:15px;margin-bottom:8px;flex-wrap:wrap}.effects-row .effect-section{flex:1;min-width:150px}.effects-row .effect-section .effect-label{font-size:.8em;color:#90ee90;margin-bottom:4px;font-weight:bold}.effects-row .effect-section .status-effects{display:flex;gap:4px;flex-wrap:wrap;min-height:24px;align-items:center}.effects-row .effect-section .status-effects:empty::before{content:\"无\";color:hsla(0,0%,100%,.4);font-style:italic;font-size:.7em}.effects-row .effect-section .lust-effect-display{min-height:20px}.effects-row .effect-section .lust-effect-display:empty::before{content:\"无\";color:hsla(0,0%,100%,.4);font-style:italic;font-size:.7em}.effects-row .effect-section .lust-effect-display .lust-effect-container .lust-effect-toggle{background:rgba(233,30,99,.2);border:1px solid rgba(233,30,99,.4);border-radius:4px;color:#e91e63;padding:2px 6px;font-size:.7em;cursor:pointer;transition:all .3s ease}.effects-row .effect-section .lust-effect-display .lust-effect-container .lust-effect-toggle:hover{background:rgba(233,30,99,.3);border-color:rgba(233,30,99,.6)}.effects-row .effect-section .lust-effect-display .lust-effect-container .lust-effect-details{max-height:0;overflow:hidden;transition:max-height .3s ease;margin-top:4px}.effects-row .effect-section .lust-effect-display .lust-effect-container .lust-effect-details .lust-effect-name{font-size:.8em;font-weight:bold;color:#e91e63;margin-bottom:2px}.effects-row .effect-section .lust-effect-display .lust-effect-container .lust-effect-details .lust-effect-description{font-size:.7em;color:rgba(233,30,99,.8);line-height:1.3;margin-bottom:4px}.effects-row .effect-section .lust-effect-display .lust-effect-container .lust-effect-details .lust-effect-tags .effect-tag{font-size:.6em;padding:1px 3px;margin-right:2px}.effects-row .effect-section .lust-effect-display .lust-effect-container.expanded .lust-effect-details{max-height:200px}.effects-row .effect-section .lust-effect-display .no-lust-effect{color:hsla(0,0%,100%,.4);font-style:italic;font-size:.7em}.character-stats{display:flex;gap:12px;align-items:center;margin-bottom:12px;flex-wrap:wrap}.character-stats .stat-item{display:flex;align-items:center;gap:8px;padding:8px 12px;border-radius:16px;background:hsla(0,0%,100%,.15);border:3px solid hsla(0,0%,100%,.3);transition:all .3s ease;position:relative;border-style:solid;border-image:none;box-shadow:0 4px 8px rgba(0,0,0,.2),inset 0 1px 0 hsla(0,0%,100%,.2)}.character-stats .stat-item::before{content:\"\";position:absolute;top:-2px;left:-2px;right:-2px;bottom:-2px;border-radius:18px;background:linear-gradient(45deg,transparent 30%,rgba(255,255,255,0.1) 50%,transparent 70%);z-index:-1}.character-stats .stat-item .stat-icon{font-size:1.4em;min-width:24px;text-align:center;filter:drop-shadow(0 2px 4px rgba(0,0,0,0.3))}.character-stats .stat-item.hp-stat,.character-stats .stat-item.lust-stat{flex:1;min-width:140px}.character-stats .stat-item.hp-stat .stat-bar-container,.character-stats .stat-item.lust-stat .stat-bar-container{flex:1;display:flex;flex-direction:column;gap:3px}.character-stats .stat-item.hp-stat .stat-bar-container .stat-bar-bg,.character-stats .stat-item.lust-stat .stat-bar-container .stat-bar-bg{width:100%;height:14px;border-radius:10px;overflow:hidden;border:2px solid hsla(0,0%,100%,.4);position:relative;box-shadow:inset 0 2px 4px rgba(0,0,0,.3),0 1px 2px hsla(0,0%,100%,.2)}.character-stats .stat-item.hp-stat .stat-bar-container .stat-bar-bg.hp-bg,.character-stats .stat-item.lust-stat .stat-bar-container .stat-bar-bg.hp-bg{background:rgba(139,0,0,.8)}.character-stats .stat-item.hp-stat .stat-bar-container .stat-bar-bg.lust-bg,.character-stats .stat-item.lust-stat .stat-bar-container .stat-bar-bg.lust-bg{background:rgba(75,0,130,.8)}.character-stats .stat-item.hp-stat .stat-bar-container .stat-bar-fill,.character-stats .stat-item.lust-stat .stat-bar-container .stat-bar-fill{height:100%;transition:width .6s cubic-bezier(0.4,0,0.2,1);border-radius:8px;position:relative}.character-stats .stat-item.hp-stat .stat-bar-container .stat-bar-fill::after,.character-stats .stat-item.lust-stat .stat-bar-container .stat-bar-fill::after{content:\"\";position:absolute;top:1px;left:2px;right:2px;height:40%;background:linear-gradient(to bottom,rgba(255,255,255,0.3),transparent);border-radius:6px 6px 0 0}.character-stats .stat-item.hp-stat .stat-bar-container .stat-bar-fill.hp-fill,.character-stats .stat-item.lust-stat .stat-bar-container .stat-bar-fill.hp-fill{background:linear-gradient(90deg,#27ae60,#2ecc71,#27ae60);box-shadow:0 0 10px rgba(39,174,96,.6),inset 0 1px 0 hsla(0,0%,100%,.3)}.character-stats .stat-item.hp-stat .stat-bar-container .stat-bar-fill.lust-fill,.character-stats .stat-item.lust-stat .stat-bar-container .stat-bar-fill.lust-fill{background:linear-gradient(90deg,#e91e63,#ff1493,#e91e63);box-shadow:0 0 10px rgba(255,20,147,.8),inset 0 1px 0 hsla(0,0%,100%,.3)}.character-stats .stat-item.hp-stat .stat-text,.character-stats .stat-item.lust-stat .stat-text{font-size:.85em;font-weight:bold;text-align:center;color:#fff;text-shadow:1px 1px 2px rgba(0,0,0,.7)}.character-stats.block-stat{background:rgba(100,149,237,.25);border-color:rgba(100,149,237,.6)}.character-stats.block-stat .stat-value{font-weight:bold;font-size:1.2em;color:#6495ed;text-shadow:1px 1px 2px rgba(0,0,0,.7)}.enemy-section{flex:0 0 auto;padding:5px;border-radius:8px}.enemy-section .enemy-card{background:rgba(139,0,0,.2);border:3px solid rgba(220,20,60,.6);border-radius:16px;padding:15px;-webkit-backdrop-filter:blur(5px);backdrop-filter:blur(5px);box-shadow:0 6px 20px rgba(220,20,60,.4),inset 0 1px 0 hsla(0,0%,100%,.1);position:relative}.enemy-section .enemy-card::before{content:\"\";position:absolute;top:-2px;left:-2px;right:-2px;bottom:-2px;border-radius:18px;background:linear-gradient(45deg,transparent 30%,rgba(220,20,60,0.2) 50%,transparent 70%);z-index:-1}.enemy-section .enemy-card .enemy-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:12px}.enemy-section .enemy-card .enemy-header .enemy-name-wrapper{display:flex;align-items:center;gap:10px}.enemy-section .enemy-card .enemy-header .enemy-name-wrapper .enemy-emoji{font-size:2.5em;filter:drop-shadow(0 0 8px rgba(255,255,255,0.5))}.enemy-section .enemy-card .enemy-header .enemy-name-wrapper .enemy-name{font-size:1.4em;font-weight:bold;color:#ff6b6b}.enemy-section .enemy-card .enemy-header .enemy-intent{background:rgba(255,215,0,.2);border:2px solid rgba(255,215,0,.8);border-radius:8px;padding:6px 10px;display:flex;align-items:center;gap:6px;min-width:100px;justify-content:center}.enemy-section .enemy-card .enemy-header .enemy-intent .intent-icon{font-size:.9em;filter:drop-shadow(0 0 4px rgba(255,215,0,0.8))}.enemy-section .enemy-card .enemy-header .enemy-intent .intent-text{font-weight:bold;color:gold;font-size:1em;font-family:\"ZCOOL KuaiLe\",\"Noto Sans SC\",\"Microsoft YaHei\",sans-serif !important}.enemy-section .enemy-card .enemy-stats{display:flex;gap:15px;align-items:center;margin-bottom:12px}.enemy-section .enemy-card .enemy-stats .stat-bar{flex:1}.enemy-section .enemy-card .enemy-stats .stat-bar .stat-label{font-size:.85em;margin-bottom:4px;color:gold}.enemy-section .enemy-card .enemy-stats .stat-bar .stat-background{width:100%;height:20px;background:rgba(0,0,0,.6);border-radius:10px;overflow:hidden;border:2px solid hsla(0,0%,100%,.3)}.enemy-section .enemy-card .enemy-stats .stat-bar .stat-background .stat-fill{height:100%;transition:width .5s ease;border-radius:8px}.enemy-section .enemy-card .enemy-stats .stat-bar .stat-background .stat-fill.hp-fill{background:linear-gradient(90deg,#e74c3c,#c0392b);box-shadow:0 0 10px rgba(231,76,60,.5)}.enemy-section .enemy-card .enemy-stats .stat-bar .stat-background .stat-fill.lust-fill{background:linear-gradient(90deg,#e91e63,#ad1457);box-shadow:0 0 10px rgba(233,30,99,.5)}.enemy-section .enemy-card .enemy-stats .stat-bar .stat-text{text-align:center;font-weight:bold;font-size:.9em;margin-top:2px}.enemy-section .enemy-card .enemy-stats .block-indicator{display:flex;flex-direction:column;align-items:center;padding:8px;background:rgba(100,149,237,.3);border-radius:8px;border:2px solid rgba(100,149,237,.6);min-width:60px}.enemy-section .enemy-card .enemy-stats .block-indicator .block-icon{font-size:1.5em;margin-bottom:2px}.enemy-section .enemy-card .enemy-stats .block-indicator .block-value{font-weight:bold;font-size:1.1em;color:#6495ed}.enemy-section .enemy-card .status-section .status-label{font-size:.9em;color:gold;margin-bottom:6px;font-weight:bold}.enemy-section .enemy-card .status-section .status-effects{display:flex;gap:6px;flex-wrap:wrap;min-height:30px;align-items:center}.enemy-section .enemy-card .status-section .status-effects:empty::before{content:\"无状态效果\";color:hsla(0,0%,100%,.5);font-style:italic;font-size:.8em}.battle-area{flex:0 0 auto;display:flex;justify-content:center;align-items:center;background:hsla(0,0%,100%,.1);border-radius:8px;margin:10px 0}.battle-area .battle-log{background:rgba(0,0,0,.3);border:1px solid hsla(0,0%,100%,.2);border-radius:8px;padding:10px;width:100%;height:80px}.battle-area .battle-log .log-content{font-size:.9em;line-height:1.4;color:hsla(0,0%,100%,.8)}.player-section{flex:0 0 auto;padding:5px;border-radius:8px}.player-section .player-card{background:rgba(0,100,0,.2);border:3px solid rgba(34,139,34,.6);border-radius:16px;padding:15px;-webkit-backdrop-filter:blur(5px);backdrop-filter:blur(5px);box-shadow:0 6px 20px rgba(34,139,34,.4),inset 0 1px 0 hsla(0,0%,100%,.1);position:relative}.player-section .player-card::before{content:\"\";position:absolute;top:-2px;left:-2px;right:-2px;bottom:-2px;border-radius:18px;background:linear-gradient(45deg,transparent 30%,rgba(34,139,34,0.2) 50%,transparent 70%);z-index:-1}.player-section .player-card .abilities-section{margin-bottom:12px}.player-section .player-card .abilities-section .abilities-label{font-size:.9em;color:#a855f7;margin-bottom:6px;font-weight:bold}.player-section .player-card .abilities-section .abilities-grid{display:flex;gap:4px;flex-wrap:wrap;min-height:30px;align-items:flex-start}.player-section .player-card .abilities-section .abilities-grid:empty::before{content:\"无能力\";color:hsla(0,0%,100%,.5);font-style:italic;font-size:.8em}.player-section .player-card .abilities-section .abilities-grid .ability-item{background:rgba(168,85,247,.2);border:1px solid rgba(168,85,247,.4);border-radius:6px;color:#c084fc;padding:6px 10px;font-size:.8em;cursor:pointer;transition:all .2s ease;display:flex;align-items:center;gap:4px}.player-section .player-card .abilities-section .abilities-grid .ability-item:hover{background:rgba(168,85,247,.3);border-color:rgba(168,85,247,.6);transform:translateY(-1px)}.player-section .player-card .abilities-section .abilities-grid .ability-item .ability-icon{font-size:1em}.player-section .player-card .abilities-section .abilities-grid .ability-item .ability-name{font-weight:500}.player-section .player-card .abilities-section .abilities-grid .ability-item .ability-description{font-size:.7em;color:rgba(192,132,252,.8);margin-top:2px}.player-section .player-card .relic-section{margin-bottom:12px}.player-section .player-card .relic-section .relic-label{font-size:.9em;color:#90ee90;margin-bottom:6px;font-weight:bold}.player-section .player-card .relic-section .relic-grid{display:flex;gap:0px;flex-wrap:nowrap;min-height:30px;align-items:flex-start;overflow-x:auto}.player-section .player-card .relic-section .relic-grid:empty::before{content:\"无遗物\";color:hsla(0,0%,100%,.5);font-style:italic;font-size:.8em}.player-section .player-card .relic-section .relic-grid .no-relics{color:hsla(0,0%,100%,.5);font-style:italic;font-size:.8em;text-align:center;padding:10px}.player-section .player-card .relic-section .relic-grid .relic-container{flex:0 0 auto;margin-right:-1px}.player-section .player-card .relic-section .relic-grid .relic-container .relic-toggle{background:rgba(255,215,0,.2);border:1px solid rgba(255,215,0,.4);border-radius:4px;color:gold;padding:4px 8px;font-size:.8em;cursor:pointer;transition:all .3s ease;white-space:nowrap;font-family:\"ZCOOL KuaiLe\",\"Noto Sans SC\",\"Microsoft YaHei\",sans-serif !important}.player-section .player-card .relic-section .relic-grid .relic-container .relic-toggle:hover{background:rgba(255,215,0,.3);border-color:rgba(255,215,0,.6)}.player-section .player-card .relic-section .relic-grid .relic-container.relic-triggered{animation:relic-trigger 1s ease-in-out}.player-section .player-card .relic-section .relic-grid .relic-details{margin-top:4px;padding:8px;background:rgba(0,0,0,.8);border:1px solid rgba(255,215,0,.4);border-radius:4px;animation:relic-details-appear .3s ease-out}.player-section .player-card .relic-section .relic-grid .relic-details .relic-name{font-size:.9em;font-weight:bold;color:gold;margin-bottom:4px;font-family:\"ZCOOL KuaiLe\",\"Noto Sans SC\",\"Microsoft YaHei\",sans-serif !important}.player-section .player-card .relic-section .relic-grid .relic-details .relic-description{font-size:.8em;color:hsla(0,0%,100%,.9);line-height:1.4;margin-bottom:6px;font-family:\"ZCOOL KuaiLe\",\"Noto Sans SC\",\"Microsoft YaHei\",sans-serif !important}.player-section .player-card .relic-section .relic-grid .relic-details .relic-effects .effect-tag{font-size:.7em;padding:2px 4px;margin-right:3px;font-family:\"ZCOOL KuaiLe\",\"Noto Sans SC\",\"Microsoft YaHei\",sans-serif !important}.hand-section{flex:0 0 auto;padding:5px}.hand-section .hand-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:8px}.hand-section .hand-header .hand-label{font-weight:bold;color:gold;text-shadow:1px 1px 2px rgba(0,0,0,.7)}.hand-section .hand-header .energy-display{display:flex;align-items:center;gap:8px;padding:6px 10px;background:rgba(255,215,0,.25);border:3px solid rgba(255,215,0,.6);border-radius:16px;transition:all .3s ease;position:relative;box-shadow:0 4px 8px rgba(255,215,0,.3),inset 0 1px 0 hsla(0,0%,100%,.2)}.hand-section .hand-header .energy-display::before{content:\"\";position:absolute;top:-2px;left:-2px;right:-2px;bottom:-2px;border-radius:18px;background:linear-gradient(45deg,transparent 30%,rgba(255,215,0,0.2) 50%,transparent 70%);z-index:-1}.hand-section .hand-header .energy-display .stat-icon{font-size:1.2em;filter:drop-shadow(0 2px 4px rgba(0,0,0,0.3))}.hand-section .hand-header .energy-display .stat-value{font-weight:bold;font-size:1.1em;color:gold;text-shadow:1px 1px 2px rgba(0,0,0,.7)}.hand-section .hand-header .energy-display.energy-insufficient{animation:energyInsufficient .5s ease-in-out;background:rgba(255,0,0,.3);border-color:rgba(255,0,0,.6)}.hand-section .hand-header .energy-display.energy-insufficient .stat-value{color:#f44}.hand-section .player-hand{position:relative;display:block;min-height:180px;padding:15px 10px 25px 10px;margin-bottom:20px}.hand-section .player-hand .enhanced-card{position:absolute;bottom:0;transition:transform .2s ease,z-index .2s ease,left .2s ease;will-change:transform,left;width:110px;aspect-ratio:3/4}.hand-section .player-hand[data-count]{--card-offset:36px}.hand-section .player-hand .enhanced-card:hover,.hand-section .player-hand .enhanced-card.card-hover,.hand-section .player-hand .enhanced-card:focus{transform:translateY(-24px) scale(1.08);z-index:100}.hand-section .player-hand .enhanced-card.is-active{transform:translateY(-28px) scale(1.1);z-index:120}.control-section{flex:0 0 auto;padding:5px}.control-section .game-controls{display:flex;justify-content:space-between;align-items:center;background:rgba(0,0,0,.4);border:1px solid hsla(0,0%,100%,.2);border-radius:8px;padding:12px}.control-section .game-controls .end-turn-button{padding:12px 24px;border-radius:8px;border:none;background:linear-gradient(135deg,#e74c3c,#c0392b);color:#fff;font-weight:bold;cursor:pointer;font-size:1em;transition:all .3s ease;box-shadow:0 4px 8px rgba(231,76,60,.3)}.control-section .game-controls .end-turn-button:hover{background:linear-gradient(135deg,#c0392b,#a93226);transform:translateY(-2px);box-shadow:0 6px 12px rgba(231,76,60,.4)}.control-section .game-controls .game-info{display:flex;gap:20px}.control-section .game-controls .game-info .turn-info{text-align:center}.control-section .game-controls .game-info .turn-info .turn-counter{font-weight:bold;color:gold}.control-section .game-controls .game-info .turn-info .phase-indicator{font-size:.8em;color:hsla(0,0%,100%,.7)}.control-section .game-controls .game-info .deck-info{display:flex;gap:15px}.control-section .game-controls .game-info .deck-info .deck-stat{display:flex;align-items:center;gap:4px;font-size:.9em}.control-section .game-controls .game-info .deck-info .deck-stat .deck-icon{font-size:1.2em}.status-effect{display:flex;flex-direction:column;align-items:center;justify-content:center;width:40px;height:40px;border-radius:8px;background:rgba(75,0,130,.8);border:2px solid rgba(138,43,226,.8);font-size:1.2em;cursor:pointer;transition:all .3s ease;position:relative}.status-effect:hover{transform:scale(1.1);box-shadow:0 4px 12px rgba(138,43,226,.6)}.status-effect .status-value{position:absolute;bottom:-2px;right:-2px;background:hsla(0,0%,100%,.9);color:#000;border-radius:50%;width:16px;height:16px;display:flex;align-items:center;justify-content:center;font-size:.7em;font-weight:bold}.status-effect .status-duration{position:absolute;top:-2px;left:-2px;background:rgba(66,153,225,.9);color:#fff;border-radius:50%;width:14px;height:14px;display:flex;align-items:center;justify-content:center;font-size:.6em;font-weight:bold;border:1px solid #fff}.status-effect.ens-status{background:rgba(220,20,60,.8);border-color:rgba(255,20,147,.8)}.status-effect.buff-status{background:rgba(0,128,0,.8);border-color:rgba(50,205,50,.8)}.status-effect.debuff-status{background:rgba(178,34,34,.8);border-color:rgba(220,20,60,.8)}.relic{display:flex;align-items:center;justify-content:center;width:50px;height:50px;border-radius:50%;background:linear-gradient(135deg,#ffd700,#ffb300);border:2px solid #fff;cursor:pointer;transition:all .3s ease;box-shadow:0 4px 8px rgba(0,0,0,.3)}.relic .relic-emoji{font-size:1.8em;filter:drop-shadow(0 0 3px rgba(0,0,0,0.5))}.relic:hover{transform:translateY(-5px) scale(1.1);box-shadow:0 8px 16px rgba(0,0,0,.4);border-color:gold}.relic:active{transform:translateY(-3px) scale(1.05)}.relic.rarity-Common{background:linear-gradient(135deg,#9e9e9e,#757575);border-color:#616161}.relic.rarity-Uncommon{background:linear-gradient(135deg,#4caf50,#388e3c);border-color:#2e7d32}.relic.rarity-Rare{background:linear-gradient(135deg,#2196f3,#1976d2);border-color:#1565c0}.relic.rarity-Boss{background:linear-gradient(135deg,#9c27b0,#7b1fa2);border-color:#6a1b9a}.relic.rarity-ENS{background:linear-gradient(135deg,#f44336,#d32f2f);border-color:#c62828}.relic-component{display:flex;flex-direction:column;align-items:center;margin:5px;cursor:pointer;transition:all .3s ease}.relic-component .relic-frame{position:relative;display:flex;align-items:center;justify-content:center;width:50px;height:50px;border-radius:50%;background:linear-gradient(135deg,#ffd700,#ffb300);border:2px solid #fff;box-shadow:0 4px 8px rgba(0,0,0,.3);transition:all .3s ease}.relic-component .relic-frame .relic-emoji{font-size:1.8em;filter:drop-shadow(0 0 3px rgba(0,0,0,0.5));z-index:2}.relic-component .relic-frame .relic-shine{position:absolute;top:10%;left:20%;width:15px;height:15px;background:radial-gradient(circle,rgba(255,255,255,0.8),transparent);border-radius:50%;z-index:1}.relic-component .relic-name{margin-top:5px;font-size:12px;color:#fff;text-align:center;max-width:60px;word-wrap:break-word;text-shadow:1px 1px 2px rgba(0,0,0,.7)}.relic-component:hover .relic-frame{transform:translateY(-5px) scale(1.1);box-shadow:0 8px 16px rgba(0,0,0,.4)}.relic-component:active .relic-frame{transform:translateY(-3px) scale(1.05)}.relic-component.rarity-Common .relic-frame{background:linear-gradient(135deg,#9e9e9e,#757575);border-color:#616161}.relic-component.rarity-Uncommon .relic-frame{background:linear-gradient(135deg,#4caf50,#388e3c);border-color:#2e7d32}.relic-component.rarity-Rare .relic-frame{background:linear-gradient(135deg,#2196f3,#1976d2);border-color:#1565c0}.relic-component.rarity-Boss .relic-frame{background:linear-gradient(135deg,#9c27b0,#7b1fa2);border-color:#6a1b9a}.relic-component.rarity-ENS .relic-frame{background:linear-gradient(135deg,#f44336,#d32f2f);border-color:#c62828}.relic-tooltip{position:fixed;background:rgba(0,0,0,.95);color:#fff;padding:10px 15px;border-radius:8px;font-size:13px;z-index:1000;max-width:250px;border:2px solid gold;box-shadow:0 4px 12px rgba(0,0,0,.5);pointer-events:none}.relic-tooltip .relic-tooltip-name{font-weight:bold;color:gold;margin-bottom:5px}.relic-tooltip .relic-tooltip-description{line-height:1.4}.energy-notification{position:fixed;top:20px;left:50%;transform:translateX(-50%);z-index:10000;pointer-events:none}.energy-notification .energy-notification-content{display:flex;align-items:center;gap:8px;background:linear-gradient(135deg,#ff4444,#cc0000);color:#fff;padding:12px 20px;border-radius:8px;font-size:14px;font-weight:bold;box-shadow:0 4px 12px rgba(0,0,0,.3);border:2px solid #fff;animation:energyNotificationSlide .3s ease-out}.energy-notification .energy-notification-content .energy-notification-icon{font-size:1.2em;animation:energyNotificationPulse 1s infinite}.energy-notification .energy-notification-content .energy-notification-text{white-space:nowrap}@keyframes energyNotificationSlide{from{transform:translateY(-20px);opacity:0}to{transform:translateY(0);opacity:1}}@keyframes energyNotificationPulse{0%,100%{transform:scale(1)}50%{transform:scale(1.1)}}.card{width:140px;height:200px;border:3px solid #fff;border-radius:12px;background:linear-gradient(135deg,#4a4a4a,#2a2a2a);padding:12px;box-sizing:border-box;display:flex;flex-direction:column;cursor:pointer;transition:all .3s cubic-bezier(0.4,0,0.2,1);position:relative;box-shadow:0 6px 20px rgba(0,0,0,.4);-webkit-backdrop-filter:blur(5px);backdrop-filter:blur(5px);will-change:transform}.card .card-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:8px}.card .card-header .card-cost{position:absolute;top:-8px;left:-8px;width:32px;height:32px;background:linear-gradient(135deg,#1e88e5,#1565c0);color:#fff;border-radius:50%;display:flex;justify-content:center;align-items:center;font-weight:bold;font-size:1.1em;border:3px solid #fff;box-shadow:0 2px 8px rgba(0,0,0,.3);z-index:2}.card .card-header .card-name{font-weight:bold;font-size:.9em;text-align:center;color:#fff;text-shadow:1px 1px 2px rgba(0,0,0,.8);flex:1;margin-left:20px}@media (max-width:768px){.card{width:120px;height:170px;padding:10px}.card .card-header .card-cost{width:28px;height:28px;font-size:1em}}@media (max-width:480px){.card{width:100px;height:140px;padding:8px}.card .card-header .card-cost{width:24px;height:24px;font-size:.9em}}.card.rarity-Common{border-color:#8a8a8a;background:linear-gradient(135deg,#4a4a4a,#2a2a2a);box-shadow:0 4px 12px rgba(138,138,138,.2)}.card.rarity-Common::before{content:\"\";position:absolute;top:0;left:0;right:0;bottom:0;background:linear-gradient(135deg,rgba(255,255,255,0.05),rgba(255,255,255,0));border-radius:9px;z-index:1;pointer-events:none}.card.rarity-Uncommon{border-color:#4fc3f7;background:linear-gradient(135deg,#1e3a8a,#1e40af);box-shadow:0 6px 20px rgba(79,195,247,.5);border-width:3px}.card.rarity-Uncommon::before{content:\"\";position:absolute;top:0;left:0;right:0;bottom:0;background:linear-gradient(135deg,rgba(79,195,247,0.15),rgba(79,195,247,0));border-radius:9px;z-index:1;pointer-events:none}.card.rarity-Uncommon::after{content:\"\";position:absolute;top:-2px;left:-2px;right:-2px;bottom:-2px;background:linear-gradient(45deg,transparent,rgba(79,195,247,0.3),transparent);border-radius:14px;z-index:0;pointer-events:none}.card.rarity-Rare{border-color:#9333ea;background:linear-gradient(135deg,#7c3aed,#8b5cf6);box-shadow:0 8px 25px rgba(147,51,234,.6);border-width:4px}.card.rarity-Rare::before{content:\"\";position:absolute;top:0;left:0;right:0;bottom:0;background:linear-gradient(135deg,rgba(147,51,234,0.2),rgba(147,51,234,0));border-radius:9px;z-index:1;pointer-events:none}.card.rarity-Rare::after{content:\"\";position:absolute;top:-3px;left:-3px;right:-3px;bottom:-3px;background:linear-gradient(45deg,transparent,rgba(147,51,234,0.4),transparent,rgba(147,51,234,0.4),transparent);background-size:200% 200%;border-radius:16px;z-index:0;pointer-events:none;animation:rare-shimmer 3s ease-in-out infinite}.card.rarity-Epic{border-color:#dc2626;background:linear-gradient(135deg,#dc2626,#ef4444);box-shadow:0 10px 40px rgba(220,38,38,.8),0 0 30px rgba(220,38,38,.6),inset 0 0 20px rgba(220,38,38,.2);border-width:5px}.card.rarity-Epic::before{content:\"\";position:absolute;top:0;left:0;right:0;bottom:0;background:linear-gradient(135deg,rgba(220,38,38,0.25),rgba(239,68,68,0.15));border-radius:9px;z-index:1;pointer-events:none}.card.rarity-Epic::after{content:\"\";position:absolute;top:-4px;left:-4px;right:-4px;bottom:-4px;background:linear-gradient(45deg,rgba(220,38,38,0.6),rgba(239,68,68,0.6),rgba(220,38,38,0.6),rgba(239,68,68,0.6));border-radius:18px;z-index:0;pointer-events:none;animation:epic-pulse 2s ease-in-out infinite}.card.rarity-Legendary{border-color:#f59e0b;background:linear-gradient(135deg,#f59e0b,#fbbf24,#f59e0b);box-shadow:0 12px 50px rgba(245,158,11,.9),0 0 40px rgba(245,158,11,.8),inset 0 0 25px rgba(245,158,11,.3);border-width:6px;animation:legendary-glow 3.5s ease-in-out infinite alternate}.card.rarity-Legendary::before{content:\"\";position:absolute;top:0;left:0;right:0;bottom:0;background:linear-gradient(135deg,rgba(245,158,11,0.3),rgba(251,191,36,0.2));border-radius:9px;z-index:1;pointer-events:none}.card.rarity-Legendary::after{content:\"\";position:absolute;top:-6px;left:-6px;right:-6px;bottom:-6px;background:linear-gradient(45deg,rgba(245,158,11,0.15),rgba(251,191,36,0.15),rgba(245,158,11,0.15),rgba(251,191,36,0.15));border-radius:20px;z-index:0;pointer-events:none;animation:legendary-rainbow 7s linear infinite}.card.card-type-Attack{border-color:#ef5350}.card.card-type-Attack .card-type-indicator{background:linear-gradient(135deg,#ef5350,#d32f2f)}.card.card-type-Attack::after{content:\"\";position:absolute;top:0;left:0;right:0;bottom:0;background:linear-gradient(135deg,rgba(239,83,80,0.2),rgba(239,83,80,0));border-radius:9px;z-index:1;pointer-events:none}.card.card-type-Skill{border-color:#42a5f5}.card.card-type-Skill .card-type-indicator{background:linear-gradient(135deg,#42a5f5,#1976d2)}.card.card-type-Skill::after{content:\"\";position:absolute;top:0;left:0;right:0;bottom:0;background:linear-gradient(135deg,rgba(66,165,245,0.2),rgba(66,165,245,0));border-radius:9px;z-index:1;pointer-events:none}.card.card-type-Power{border-color:#ab47bc}.card.card-type-Power .card-type-indicator{background:linear-gradient(135deg,#ab47bc,#8e24aa)}.card.card-type-Power::after{content:\"\";position:absolute;top:0;left:0;right:0;bottom:0;background:linear-gradient(135deg,rgba(171,71,188,0.2),rgba(171,71,188,0));border-radius:9px;z-index:1;pointer-events:none}.card.card-type-Event{border-color:#ab47bc;background:linear-gradient(135deg,#6a1b9a,#4a148c);box-shadow:0 6px 15px rgba(171,71,188,.4)}.card.card-type-Event .card-type-indicator{background:linear-gradient(135deg,#ffa726,#f57c00)}.card .emoji{font-size:3.5em;text-align:center;flex-grow:1;display:flex;align-items:center;justify-content:center;opacity:.9;text-shadow:0 0 8px rgba(0,0,0,.6);margin:5px 0;filter:drop-shadow(0 0 5px rgba(255,255,255,0.3));transition:transform .3s ease}.card .card-description{font-size:.8em;text-align:center;line-height:1.3;background:rgba(0,0,0,.4);border-radius:6px;padding:6px;margin-top:auto;color:hsla(0,0%,100%,.9);min-height:40px;display:flex;align-items:center;justify-content:center}.card .card-effects{margin-top:4px;padding:2px 4px;text-align:center;max-height:42px;overflow-y:auto;overflow-x:hidden}.card .card-effects .effect-tag{font-family:inherit;box-sizing:border-box;word-break:break-all}.card:hover{transform:translateY(-20px) scale(1.1);box-shadow:0 15px 30px rgba(0,0,0,.6);z-index:10}.card:hover .emoji{transform:scale(1.1)}.card:hover::before{opacity:.8}.card.disabled{opacity:.6;filter:grayscale(50%);cursor:not-allowed}.card.disabled:hover{transform:translateY(-5px) scale(1.02);box-shadow:0 8px 15px rgba(0,0,0,.4)}.card.card-played{animation:cardPlay .5s forwards}.card.card-drawn{animation:cardDraw .5s forwards}.card.energy-insufficient{animation:energyInsufficient .5s ease-in-out;border-color:red !important;box-shadow:0 0 15px rgba(255,0,0,.7) !important}.card .energy-tooltip{position:absolute;top:-35px;left:50%;transform:translateX(-50%);background:rgba(255,0,0,.9);color:#fff;padding:5px 10px;border-radius:5px;font-size:12px;font-weight:bold;z-index:1000;pointer-events:none;white-space:nowrap;box-shadow:0 2px 8px rgba(0,0,0,.3)}.card .energy-tooltip::after{content:\"\";position:absolute;top:100%;left:50%;transform:translateX(-50%);border:5px solid rgba(0,0,0,0);border-top-color:rgba(255,0,0,.9)}.tooltip{position:absolute;background-color:rgba(10,0,20,.95);color:#fff;padding:12px 16px;border-radius:8px;border:2px solid #a388ff;font-size:.9em;z-index:1000;display:none;max-width:280px;pointer-events:none;box-shadow:0 4px 20px rgba(163,136,255,.4);-webkit-backdrop-filter:blur(8px);backdrop-filter:blur(8px)}.tooltip .tooltip-name{font-weight:bold;color:gold;margin-bottom:6px;font-size:1.1em}.tooltip .tooltip-desc{white-space:pre-wrap;line-height:1.4;color:hsla(0,0%,100%,.9)}.loading-overlay{position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,.8);display:flex;justify-content:center;align-items:center;z-index:1000}.loading-overlay .loading-content{text-align:center;color:#fff}.loading-overlay .loading-content .loading-spinner{width:50px;height:50px;border:5px solid hsla(0,0%,100%,.3);border-top:5px solid #fff;border-radius:50%;animation:spin 1s linear infinite;margin:0 auto 20px}@keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes legendary-glow{from{box-shadow:0 12px 18px rgba(245,158,11,.28),0 0 14px rgba(245,158,11,.18)}to{box-shadow:0 12px 24px rgba(245,158,11,.34),0 0 16px rgba(245,158,11,.22)}}@media (max-width:768px){.card-game-container{padding:5px}.enemy-section .enemy-card .enemy-header{flex-direction:column;gap:10px}.enemy-section .enemy-card .enemy-header .enemy-intent{min-width:auto;width:100%}.player-section .player-card .player-stats .main-stats-row{flex-direction:column;gap:8px}.player-section .player-card .player-stats .main-stats-row .stat-item{width:100%;min-width:auto}.player-section .player-card .player-stats .main-stats-row .stat-item.hp-stat,.player-section .player-card .player-stats .main-stats-row .stat-item.lust-stat{min-width:auto}.player-section .player-card .player-stats .effects-row{flex-direction:column;gap:8px}.player-section .player-card .player-stats .effects-row .effect-section{min-width:auto}.control-section .game-controls{flex-direction:column;gap:10px}}@media (max-width:480px){.player-section .player-card .player-stats .main-stats-row .stat-item{padding:4px 8px;gap:6px}.player-section .player-card .player-stats .main-stats-row .stat-item .stat-icon{font-size:1em}.player-section .player-card .player-stats .main-stats-row .stat-item .stat-value{font-size:1em}.player-section .player-card .player-stats .main-stats-row .stat-item.hp-stat .stat-bar-container .stat-bar-bg,.player-section .player-card .player-stats .main-stats-row .stat-item.lust-stat .stat-bar-container .stat-bar-bg{height:10px}.player-section .player-card .player-stats .main-stats-row .stat-item.hp-stat .stat-bar-container .stat-text,.player-section .player-card .player-stats .main-stats-row .stat-item.lust-stat .stat-bar-container .stat-text{font-size:.7em}.player-section .player-card .player-stats .effects-row .effect-section .effect-label{font-size:.7em}.player-section .player-card .player-stats .effects-row .effect-section .status-effects,.player-section .player-card .player-stats .effects-row .effect-section .lust-effect-display{min-height:20px}.player-section .player-card .player-stats .effects-row .effect-section .status-effects:empty::before,.player-section .player-card .player-stats .effects-row .effect-section .lust-effect-display:empty::before{font-size:.6em}}.top-bar{display:flex;justify-content:space-between;align-items:center;padding:5px 10px;background-color:rgba(0,0,0,.3);border-bottom:1px solid var(--border-color);width:100%}.battle-controls{display:flex;gap:10px}.game-info,.player-tab-stats{display:flex;gap:15px}.control-button{padding:8px 16px;background:linear-gradient(135deg,#4a90e2,#357abd);color:#fff;border:none;border-radius:6px;font-size:14px;font-weight:bold;cursor:pointer;transition:all .3s ease}.control-button:hover{background:linear-gradient(135deg,#357abd,#2968a3);transform:translateY(-2px);box-shadow:0 4px 8px rgba(0,0,0,.2)}.control-button:active{transform:translateY(0)}.lust-overflow-area{position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:linear-gradient(135deg,#ff1744,#d50000);color:#fff;padding:30px;border-radius:15px;box-shadow:0 12px 36px rgba(0,0,0,.8);z-index:3000;max-width:500px;text-align:center;border:3px solid #f44}.lust-overflow-area .lust-overflow-header{margin-bottom:20px}.lust-overflow-area .lust-overflow-header h3{font-size:24px;margin-bottom:10px;text-shadow:2px 2px 4px rgba(0,0,0,.5)}.lust-overflow-area .lust-overflow-header .lust-overflow-description{font-size:16px;opacity:.9}.lust-overflow-area .lust-overflow-effects{margin-bottom:20px}.lust-overflow-area .lust-overflow-effects .lust-effect-item{background:hsla(0,0%,100%,.1);padding:10px;margin:5px 0;border-radius:8px;border-left:4px solid #ff0}.lust-overflow-area .lust-overflow-confirm{background:linear-gradient(135deg,#ffeb3b,#ffc107);color:#333;border:none;padding:12px 24px;border-radius:8px;font-size:16px;font-weight:bold;cursor:pointer;transition:all .3s ease}.lust-overflow-area .lust-overflow-confirm:hover{background:linear-gradient(135deg,#ffc107,#ff9800);transform:scale(1.05)}.item-modal{position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,.7);z-index:2500;display:flex;justify-content:center;align-items:center}.item-modal .item-modal-content{background:linear-gradient(135deg,#2a2a2a,#1a1a1a);border:3px solid #4a90e2;border-radius:12px;padding:20px;max-width:600px;width:90%;max-height:80vh;overflow-y:auto;color:#fff}.item-modal .item-modal-content .item-modal-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:20px;padding-bottom:10px;border-bottom:2px solid #4a90e2}.item-modal .item-modal-content .item-modal-header h3{margin:0;font-size:20px}.item-modal .item-modal-content .item-modal-header .close-modal{background:none;border:none;color:#aaa;font-size:24px;cursor:pointer}.item-modal .item-modal-content .item-modal-header .close-modal:hover{color:#fff}.item-modal .item-modal-content .item-list{display:grid;grid-template-columns:repeat(auto-fill,minmax(200px,1fr));gap:15px}.item-modal .item-modal-content .item-list .item-card{background:hsla(0,0%,100%,.1);border:2px solid #4a90e2;border-radius:8px;padding:15px;cursor:pointer;transition:all .3s ease}.item-modal .item-modal-content .item-list .item-card:hover{background:hsla(0,0%,100%,.2);transform:translateY(-2px);box-shadow:0 4px 12px rgba(74,144,226,.3)}.item-modal .item-modal-content .item-list .item-card .item-emoji{font-size:24px;margin-bottom:8px}.item-modal .item-modal-content .item-list .item-card .item-name{font-weight:bold;margin-bottom:5px}.item-modal .item-modal-content .item-list .item-card .item-description{font-size:12px;opacity:.8;margin-bottom:8px}.item-modal .item-modal-content .item-list .item-card .item-count{font-size:14px;color:#4a90e2;font-weight:bold}.item-modal .item-modal-content .item-list .item-card.disabled{opacity:.5;cursor:not-allowed}.item-modal .item-modal-content .item-list .item-card.disabled:hover{transform:none;box-shadow:none}.pile-viewer{position:fixed;top:0;left:0;width:100%;height:100%;z-index:3000;display:flex;align-items:center;justify-content:center}.pile-viewer-overlay{position:absolute;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,.7);cursor:pointer}.pile-viewer-content{position:relative;background:linear-gradient(135deg,#2a1810,#3d2817);border:2px solid #8b4513;border-radius:12px;width:80%;max-width:800px;max-height:80%;display:flex;flex-direction:column;box-shadow:0 8px 32px rgba(0,0,0,.8)}.pile-viewer-header{display:flex;justify-content:space-between;align-items:center;padding:16px 20px;border-bottom:1px solid #8b4513;background:rgba(139,69,19,.2)}.pile-viewer-header h3{margin:0;color:#f4e4bc;font-size:18px}.close-btn{background:none;border:none;color:#f4e4bc;font-size:20px;cursor:pointer;padding:4px 8px;border-radius:4px;transition:background-color .2s}.close-btn:hover{background:hsla(0,0%,100%,.1)}.pile-viewer-body{flex:1;overflow-y:auto;padding:20px;display:grid;grid-template-columns:repeat(auto-fill,minmax(200px,1fr));gap:12px;max-height:500px}.pile-viewer-body .card{transform:none !important;margin:0;cursor:default;pointer-events:none}.pile-viewer-body .card:hover{transform:none !important}@keyframes shake{0%,100%{transform:translateX(0)}10%,30%,50%,70%,90%{transform:translateX(-2px)}20%,40%,60%,80%{transform:translateX(2px)}}@keyframes lustFlash{0%{opacity:0}50%{opacity:.6}100%{opacity:0}}@keyframes lustPulse{0%,100%{transform:translate(-50%,-50%) scale(1)}50%{transform:translate(-50%,-50%) scale(1.05)}}@keyframes cardDrawn{0%{opacity:0;transform:translateY(20px) scale(0.8)}100%{opacity:1;transform:translateY(0) scale(1)}}.shake-animation{animation:shake .3s ease-in-out}.card-drawn{animation:cardDrawn .5s ease-out}.card-playing{transition:all .3s ease;z-index:100}.floating-damage{animation:floatUp 1.5s ease-out forwards}@keyframes floatUp{0%{opacity:1;transform:translateX(-50%) translateY(0)}100%{opacity:0;transform:translateX(-50%) translateY(-80px)}}.hp-fill{transition:width .5s ease,background-color .3s ease}.hp-low{background:linear-gradient(90deg,#ff8c00,#ffa500) !important}.hp-critical{background:linear-gradient(90deg,#ff4444,#ff6666) !important;animation:pulse 1s infinite}.lust-fill{transition:width .3s ease,background-color .3s ease}.lust-high{background:linear-gradient(90deg,#ff69b4,#ff1493) !important}.lust-critical{background:linear-gradient(90deg,#ff1493,#dc143c) !important;animation:pulse 1s infinite}@keyframes pulse{0%,100%{opacity:1}50%{opacity:.7}}.card.unaffordable{opacity:.5;filter:grayscale(50%);cursor:not-allowed !important;pointer-events:none}.card.unaffordable .card-cost.insufficient-energy{background:#f44 !important;color:#fff !important;animation:energy-warning 1s infinite alternate}@keyframes energy-warning{0%{background:#f44 !important}100%{background:#c00 !important}}.status-effects{display:flex;flex-wrap:wrap;gap:4px;margin-top:8px}.status-effects .status-effect{display:flex;flex-direction:column;align-items:center;padding:4px 6px;border-radius:6px;min-width:32px;font-size:.7em;cursor:pointer;transition:all .3s ease}.status-effects .status-effect.positive{background:rgba(76,175,80,.2);border:1px solid rgba(76,175,80,.5);color:#4caf50}.status-effects .status-effect.negative{background:rgba(244,67,54,.2);border:1px solid rgba(244,67,54,.5);color:#f44336}.status-effects .status-effect:hover{transform:scale(1.1);z-index:10}.status-effects .status-effect:focus{outline:none}.status-effects .status-effect::before,.status-effects .status-effect::after{display:none}.status-effects .status-effect .status-icon{font-size:1.2em;line-height:1}.status-effects .status-effect .status-value{font-weight:bold;font-size:.9em;line-height:1}.status-effects .status-effect .status-duration{font-size:.8em;opacity:.8;line-height:1}.status-detail-modal{position:fixed;top:0;left:0;width:100%;height:100%;z-index:4000}.status-detail-modal .status-detail-overlay{position:absolute;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,.5)}.status-detail-modal .status-detail-content{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);background:linear-gradient(135deg,#2c3e50,#34495e);color:#fff;padding:20px;border-radius:12px;border:2px solid #3498db;box-shadow:0 8px 24px rgba(0,0,0,.6);min-width:300px;max-width:400px}.status-detail-modal .status-detail-content .status-detail-header{display:flex;align-items:center;gap:12px;margin-bottom:15px;padding-bottom:10px;border-bottom:1px solid hsla(0,0%,100%,.2)}.status-detail-modal .status-detail-content .status-detail-header .status-detail-icon{font-size:2em}.status-detail-modal .status-detail-content .status-detail-header .status-detail-name{flex:1;font-size:1.3em;font-weight:bold;color:#3498db}.status-detail-modal .status-detail-content .status-detail-header .close-status-detail{background:none;border:none;color:#bdc3c7;font-size:1.5em;cursor:pointer;padding:0;width:30px;height:30px;display:flex;align-items:center;justify-content:center;border-radius:50%;transition:all .3s ease}.status-detail-modal .status-detail-content .status-detail-header .close-status-detail:hover{background:hsla(0,0%,100%,.1);color:#fff}.status-detail-modal .status-detail-content .status-detail-description{font-size:1em;line-height:1.5;color:#ecf0f1}.relic-tooltip{position:absolute;background:linear-gradient(135deg,#2c3e50,#34495e);color:#fff;padding:12px 16px;border-radius:8px;border:1px solid #3498db;box-shadow:0 4px 12px rgba(0,0,0,.6);z-index:5000;max-width:250px;font-size:.9em}.relic-tooltip .relic-tooltip-header{display:flex;align-items:center;gap:8px;margin-bottom:8px;padding-bottom:6px;border-bottom:1px solid hsla(0,0%,100%,.2)}.relic-tooltip .relic-tooltip-header .relic-tooltip-emoji{font-size:1.2em}.relic-tooltip .relic-tooltip-header .relic-tooltip-name{font-weight:bold;color:#3498db}.relic-tooltip .relic-tooltip-description{margin-bottom:6px;line-height:1.4;color:#ecf0f1}.relic-tooltip .relic-tooltip-effect{font-size:.8em;color:#bdc3c7;font-style:italic}@keyframes epic-glow{0%{box-shadow:0 0 10px rgba(220,38,38,.5)}100%{box-shadow:0 0 20px rgba(220,38,38,.8),0 0 30px rgba(220,38,38,.4)}}@keyframes legendary-glow{0%{box-shadow:0 0 8px rgba(245,158,11,.22)}100%{box-shadow:0 0 14px rgba(245,158,11,.32),0 0 20px rgba(245,158,11,.18)}}@keyframes player-damage-flash{0%,100%{box-shadow:0 0 0 0px rgba(255,68,68,0)}50%{box-shadow:0 0 0 8px rgba(255,68,68,.8)}}@keyframes player-lust-flash{0%,100%{box-shadow:0 0 0 0px rgba(255,105,180,0)}50%{box-shadow:0 0 0 8px rgba(255,105,180,.8)}}@keyframes player-both-flash{0%,100%{box-shadow:0 0 0 0px rgba(255,68,68,0)}25%{box-shadow:0 0 0 8px rgba(255,68,68,.8)}50%{box-shadow:0 0 0 0px rgba(255,68,68,0)}75%{box-shadow:0 0 0 8px rgba(255,105,180,.8)}}@keyframes enemy-damage-flash{0%,100%{box-shadow:0 0 0 0px rgba(255,68,68,0)}50%{box-shadow:0 0 0 8px rgba(255,68,68,.8)}}@keyframes enemy-lust-flash{0%,100%{box-shadow:0 0 0 0px rgba(255,105,180,0)}50%{box-shadow:0 0 0 8px rgba(255,105,180,.8)}}@keyframes enemy-both-flash{0%,100%{box-shadow:0 0 0 0px rgba(255,68,68,0)}25%{box-shadow:0 0 0 8px rgba(255,68,68,.8)}50%{box-shadow:0 0 0 0px rgba(255,68,68,0)}75%{box-shadow:0 0 0 8px rgba(255,105,180,.8)}}.player-card.damage-flash{animation:player-damage-flash .4s ease-in-out}.player-card.lust-flash{animation:player-lust-flash .4s ease-in-out}.player-card.both-flash{animation:player-both-flash .6s ease-in-out}.enemy-card.damage-flash{animation:enemy-damage-flash .4s ease-in-out}.enemy-card.lust-flash{animation:enemy-lust-flash .4s ease-in-out}.enemy-card.both-flash{animation:enemy-both-flash .6s ease-in-out}@keyframes screen-shake{0%,100%{transform:translate(0,0)}10%{transform:translate(-2px,-1px)}20%{transform:translate(2px,1px)}30%{transform:translate(-1px,2px)}40%{transform:translate(1px,-2px)}50%{transform:translate(-2px,1px)}60%{transform:translate(2px,-1px)}70%{transform:translate(-1px,-2px)}80%{transform:translate(1px,2px)}90%{transform:translate(-2px,-1px)}}body.screen-shake{animation:screen-shake .5s ease-in-out}@keyframes relic-trigger{0%,100%{transform:scale(1)}25%{transform:scale(1.1)}50%{transform:scale(1.05)}75%{transform:scale(1.1)}}@keyframes relic-details-appear{0%{opacity:0;transform:translateY(-10px);max-height:0}100%{opacity:1;transform:translateY(0);max-height:200px}}.card-blocked-notification{position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:rgba(0,0,0,.95);color:#ff6b6b;padding:20px 30px;border-radius:12px;border:2px solid #ff6b6b;font-size:16px;font-weight:bold;z-index:10000;box-shadow:0 15px 40px rgba(0,0,0,.8),0 0 20px rgba(255,107,107,.3);font-family:\"ZCOOL KuaiLe\",\"Noto Sans SC\",\"Microsoft YaHei\",sans-serif !important;text-align:center;min-width:300px;-webkit-backdrop-filter:blur(5px);backdrop-filter:blur(5px)}.card-blocked-notification::before{content:\"\";position:absolute;top:-2px;left:-2px;right:-2px;bottom:-2px;background:linear-gradient(45deg,#ff6b6b,#ff8e8e,#ff6b6b);border-radius:12px;z-index:-1;animation:border-glow 2s ease-in-out infinite alternate}@keyframes border-glow{0%{opacity:.5}100%{opacity:1}}.lust-effect-display .lust-effect-item{background:rgba(233,30,99,.1);border:1px solid rgba(233,30,99,.3);border-radius:8px;padding:10px;margin:5px 0}.lust-effect-display .lust-effect-item .lust-effect-name{font-weight:bold;color:#e91e63;font-size:1.1em;margin-bottom:5px}.lust-effect-display .lust-effect-item .lust-effect-description{color:#f8bbd9;font-size:.9em;line-height:1.4;margin-bottom:5px}.lust-effect-display .lust-effect-item .lust-effect-details{color:#ad1457;font-size:.8em;font-style:italic}.lust-effect-display .no-lust-effect{color:#7f8c8d;font-style:italic;text-align:center;padding:10px}.auto-lust-overflow-popup{position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:linear-gradient(135deg,#e91e63,#ad1457);color:#fff;padding:20px 30px;border-radius:15px;border:2px solid #f06292;box-shadow:0 12px 36px rgba(233,30,99,.4);z-index:3500;text-align:center;min-width:350px;max-width:450px}.auto-lust-overflow-popup .auto-lust-content .auto-lust-header{display:flex;align-items:center;justify-content:center;gap:12px;margin-bottom:15px}.auto-lust-overflow-popup .auto-lust-content .auto-lust-header .auto-lust-icon{font-size:2em;animation:pulse-heart 1s infinite alternate}.auto-lust-overflow-popup .auto-lust-content .auto-lust-header .auto-lust-title{font-size:1.5em;font-weight:bold;text-shadow:2px 2px 4px rgba(0,0,0,.5)}.auto-lust-overflow-popup .auto-lust-content .auto-lust-effect-name{font-size:1.3em;font-weight:bold;color:#ffcdd2;margin-bottom:10px}.auto-lust-overflow-popup .auto-lust-content .auto-lust-description{font-size:1em;line-height:1.4;color:#f8bbd9}@keyframes pulse-heart{0%{transform:scale(1)}100%{transform:scale(1.2)}}.enemy-action-popup{position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:rgba(0,0,0,.85);color:#fff;padding:20px 30px;border-radius:15px;border:2px solid #f44;box-shadow:0 12px 36px rgba(0,0,0,.8);z-index:3000;text-align:center;min-width:300px}.enemy-action-popup .enemy-action-content .enemy-action-name{font-size:1.5em;font-weight:bold;color:#f66;margin-bottom:10px;text-shadow:2px 2px 4px rgba(0,0,0,.5)}.enemy-action-popup .enemy-action-content .enemy-action-description{font-size:1em;color:#ccc;line-height:1.4}.pulse-pink{animation:pulsePink 1s ease-in-out}@keyframes pulsePink{0%,100%{background-color:inherit}50%{background-color:hotpink}}@keyframes rare-shimmer{0%{background-position:-200% 0}100%{background-position:200% 0}}@keyframes epic-pulse{0%,100%{opacity:.6;transform:scale(1)}50%{opacity:1;transform:scale(1.02)}}@keyframes legendary-rainbow{0%{filter:hue-rotate(0deg) brightness(1)}25%{filter:hue-rotate(90deg) brightness(1.1)}50%{filter:hue-rotate(180deg) brightness(1.2)}75%{filter:hue-rotate(270deg) brightness(1.1)}100%{filter:hue-rotate(360deg) brightness(1)}}.discard-selection-modal{position:fixed;top:0;left:0;width:100%;height:100%;z-index:2000;display:none}.discard-selection-modal .modal-backdrop{position:absolute;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,.7)}.discard-selection-modal .modal-content{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);background:linear-gradient(135deg,#2a2a3a 0%,#1a1a2e 100%);border-radius:15px;border:2px solid #4a4a6a;box-shadow:0 10px 30px rgba(0,0,0,.5);max-width:80%;max-height:80%;overflow:hidden}.discard-selection-modal .modal-header{padding:20px;border-bottom:1px solid #4a4a6a;text-align:center}.discard-selection-modal .modal-header h3{color:#fff;margin:0 0 10px 0;font-size:1.5em}.discard-selection-modal .modal-header p{color:#ccc;margin:0 0 15px 0}.discard-selection-modal .modal-header .selection-counter{color:gold;font-weight:bold;font-size:1.1em}.discard-selection-modal .modal-header .selection-counter .selected-count{color:#ff6b6b}.discard-selection-modal .modal-body{padding:20px;max-height:400px;overflow-y:auto}.discard-selection-modal .modal-body .discard-cards-container{display:grid;grid-template-columns:repeat(auto-fill,minmax(120px,1fr));gap:15px}.discard-selection-modal .modal-body .discard-card{background:linear-gradient(135deg,#3a3a4a 0%,#2a2a3a 100%);border:2px solid #4a4a6a;border-radius:10px;padding:15px;text-align:center;cursor:pointer;transition:all .3s ease;position:relative}.discard-selection-modal .modal-body .discard-card:hover{border-color:#6a6a8a;transform:translateY(-2px);box-shadow:0 5px 15px rgba(0,0,0,.3)}.discard-selection-modal .modal-body .discard-card.selected{border-color:#ff6b6b;background:linear-gradient(135deg,#4a3a3a 0%,#3a2a2a 100%);box-shadow:0 0 15px rgba(255,107,107,.3)}.discard-selection-modal .modal-body .discard-card.selected::after{content:\"✓\";position:absolute;top:5px;right:5px;color:#ff6b6b;font-weight:bold;font-size:1.2em}.discard-selection-modal .modal-body .discard-card .card-emoji{font-size:2em;margin-bottom:8px}.discard-selection-modal .modal-body .discard-card .card-name{color:#fff;font-size:.9em;margin-bottom:5px;font-weight:bold}.discard-selection-modal .modal-body .discard-card .card-cost{color:gold;font-size:.8em;font-weight:bold}.discard-selection-modal .modal-body .discard-card .card-cost::before{content:\"⚡ \"}.discard-selection-modal .modal-footer{padding:20px;border-top:1px solid #4a4a6a;text-align:center;display:flex;gap:15px;justify-content:center}.discard-selection-modal .modal-footer .btn{padding:10px 20px;border:none;border-radius:8px;font-size:1em;font-weight:bold;cursor:pointer;transition:all .3s ease}.discard-selection-modal .modal-footer .btn.btn-secondary{background:#6a6a8a;color:#fff}.discard-selection-modal .modal-footer .btn.btn-secondary:hover{background:#7a7a9a}.discard-selection-modal .modal-footer .btn.btn-primary{background:#ff6b6b;color:#fff}.discard-selection-modal .modal-footer .btn.btn-primary:hover:not(:disabled){background:#ff5252}.discard-selection-modal .modal-footer .btn.btn-primary:disabled{background:#4a4a6a;color:#8a8a8a;cursor:not-allowed}.card-pending-discard{position:relative;border:2px solid gold !important;box-shadow:0 0 20px rgba(255,215,0,.5) !important;animation:pendingPulse 2s infinite}.card-pending-discard .pending-indicator{position:absolute;top:-30px;left:50%;transform:translateX(-50%);background:rgba(255,215,0,.9);color:#000;padding:5px 10px;border-radius:15px;font-size:.8em;font-weight:bold;white-space:nowrap;z-index:100;animation:bounce 1s infinite}@keyframes pendingPulse{0%,100%{box-shadow:0 0 20px rgba(255,215,0,.5)}50%{box-shadow:0 0 30px rgba(255,215,0,.8)}}@keyframes bounce{0%,20%,50%,80%,100%{transform:translateX(-50%) translateY(0)}40%{transform:translateX(-50%) translateY(-5px)}60%{transform:translateX(-50%) translateY(-3px)}}.card-selection-modal{position:fixed;top:0;left:0;width:100%;height:100%;z-index:2000;display:none}.card-selection-modal .modal-backdrop{position:absolute;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,.7)}.card-selection-modal .modal-content{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);background:linear-gradient(135deg,#2a2a3a 0%,#1a1a2e 100%);border-radius:15px;border:2px solid #4a4a6a;box-shadow:0 10px 30px rgba(0,0,0,.5);max-width:90%;max-height:90%;overflow:hidden}.card-selection-modal .modal-header{padding:20px;border-bottom:1px solid #4a4a6a;text-align:center}.card-selection-modal .modal-header h3{color:#fff;margin:0 0 10px 0;font-size:1.5em}.card-selection-modal .modal-header p{color:#ccc;margin:0 0 15px 0}.card-selection-modal .modal-header .selection-counter{color:#4a9eff;font-weight:bold;font-size:1.1em}.card-selection-modal .modal-header .selection-counter .selected-count{color:#4a9eff}.card-selection-modal .modal-body{padding:20px;max-height:500px;overflow-y:auto}.card-selection-modal .modal-body .selection-cards-container{display:grid;grid-template-columns:repeat(auto-fill,minmax(150px,1fr));gap:15px}.card-selection-modal .modal-body .selection-card{background:linear-gradient(135deg,#3a3a4a 0%,#2a2a3a 100%);border:2px solid #4a4a6a;border-radius:10px;padding:15px;text-align:center;cursor:pointer;transition:all .3s ease;position:relative}.card-selection-modal .modal-body .selection-card:hover{border-color:#6a6a8a;transform:translateY(-2px);box-shadow:0 5px 15px rgba(0,0,0,.3)}.card-selection-modal .modal-body .selection-card.selected{border-color:#4a9eff;background:linear-gradient(135deg,#3a4a5a 0%,#2a3a4a 100%);box-shadow:0 0 15px rgba(74,158,255,.3)}.card-selection-modal .modal-body .selection-card.selected::after{content:\"✓\";position:absolute;top:5px;right:5px;color:#4a9eff;font-weight:bold;font-size:1.2em}.card-selection-modal .modal-body .selection-card .card-emoji{font-size:2.5em;margin-bottom:8px}.card-selection-modal .modal-body .selection-card .card-name{color:#fff;font-size:1em;margin-bottom:5px;font-weight:bold}.card-selection-modal .modal-body .selection-card .card-cost{color:gold;font-size:.9em;font-weight:bold;margin-bottom:8px}.card-selection-modal .modal-body .selection-card .card-cost::before{content:\"⚡ \"}.card-selection-modal .modal-body .selection-card .card-description{color:#ccc;font-size:.8em;line-height:1.3;max-height:60px;overflow:hidden;text-overflow:ellipsis}.card-selection-modal .modal-footer{padding:20px;border-top:1px solid #4a4a6a;text-align:center;display:flex;gap:15px;justify-content:center}.card-selection-modal .modal-footer .btn{padding:10px 20px;border:none;border-radius:8px;font-size:1em;font-weight:bold;cursor:pointer;transition:all .3s ease}.card-selection-modal .modal-footer .btn.btn-secondary{background:#6a6a8a;color:#fff}.card-selection-modal .modal-footer .btn.btn-secondary:hover{background:#7a7a9a}.card-selection-modal .modal-footer .btn.btn-primary{background:#4a9eff;color:#fff}.card-selection-modal .modal-footer .btn.btn-primary:hover:not(:disabled){background:#3a8eef}.card-selection-modal .modal-footer .btn.btn-primary:disabled{background:#4a4a6a;color:#8a8a8a;cursor:not-allowed}\n@keyframes fadeIn{from{opacity:0}to{opacity:1}}@keyframes fadeOut{from{opacity:1}to{opacity:0}}@keyframes slideInUp{from{transform:translateY(100%);opacity:0}to{transform:translateY(0);opacity:1}}@keyframes slideInDown{from{transform:translateY(-100%);opacity:0}to{transform:translateY(0);opacity:1}}@keyframes bounce{0%,20%,53%,80%,100%{transform:translate3d(0,0,0)}40%,43%{transform:translate3d(0,-30px,0)}70%{transform:translate3d(0,-15px,0)}90%{transform:translate3d(0,-4px,0)}}@keyframes pulse{0%{transform:scale(1)}50%{transform:scale(1.05)}100%{transform:scale(1)}}@keyframes shake{0%,100%{transform:translateX(0)}10%,30%,50%,70%,90%{transform:translateX(-10px)}20%,40%,60%,80%{transform:translateX(10px)}}@keyframes glow{0%,100%{box-shadow:0 0 5px hsla(0,0%,100%,.3)}50%{box-shadow:0 0 20px hsla(0,0%,100%,.8)}}@keyframes float{0%,100%{transform:translateY(0px)}50%{transform:translateY(-10px)}}@keyframes spin{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}.card-casting{animation:glow .5s ease-in-out;transform:scale(1.05);z-index:1000}.card-hover{transform:translateY(-5px);transition:transform .2s ease;box-shadow:0 5px 15px rgba(0,0,0,.3)}.card-dragging{transform:rotate(5deg) scale(1.1);opacity:.8;z-index:1000}.card-drawing{animation:slideInUp .6s ease-out}.card-glow{position:absolute;top:0;left:0;right:0;bottom:0;border-radius:inherit;opacity:0;transition:opacity .3s ease;pointer-events:none}.enhanced-card:hover .card-glow{opacity:1;animation:glow 2s ease-in-out infinite}.status-pulsing{animation:pulse 2s ease-in-out infinite}.status-apply-effect{animation:bounce .8s ease-out}.status-remove-flash{animation:shake .6s ease-in-out}.relic-activated{animation:glow 1s ease-in-out}.relic-hover{transform:scale(1.1);transition:transform .2s ease}.relic-shine{position:absolute;top:0;left:0;right:0;bottom:0;background:linear-gradient(45deg,transparent 30%,rgba(255,255,255,0.3) 50%,transparent 70%);transform:translateX(-100%);transition:transform .6s ease}.relic-component:hover .relic-shine{transform:translateX(100%)}.damage-number{animation:fadeOut 1.5s ease-out forwards;font-weight:bold;text-shadow:2px 2px 4px rgba(0,0,0,.8);pointer-events:none;z-index:1000}.damage-damage{color:#f44}.damage-heal{color:#4f4}.damage-lust{color:#f4f}.hp-bar{position:relative;overflow:hidden}.hp-bar .hp{transition:width .8s ease-out;position:relative}.hp-bar .hp::after{content:\"\";position:absolute;top:0;left:0;right:0;bottom:0;background:linear-gradient(90deg,transparent,rgba(255,255,255,0.3),transparent);transform:translateX(-100%);animation:shine 2s ease-in-out infinite}@keyframes shine{0%{transform:translateX(-100%)}50%{transform:translateX(100%)}100%{transform:translateX(100%)}}.energy-gain{animation:pulse .5s ease-in-out;color:#4f4}.energy-loss{animation:shake .5s ease-in-out;color:#f44}.hit-flash{animation:flash .2s ease-in-out}@keyframes flash{0%,100%{background-color:rgba(0,0,0,0)}50%{background-color:hsla(0,0%,100%,.5)}}.victory-overlay,.defeat-overlay{animation:fadeIn .5s ease-in-out}.victory-title{animation:bounce 1s ease-out;color:gold;text-shadow:2px 2px 4px rgba(0,0,0,.8);font-size:3rem;margin-bottom:1rem}.defeat-title{animation:shake 1s ease-out;color:#f44;text-shadow:2px 2px 4px rgba(0,0,0,.8);font-size:3rem;margin-bottom:1rem}.defeat-subtitle{animation:fadeIn 1s ease-in-out .5s both;color:#ccc;font-size:1.5rem}.particle{animation:float 3s ease-in-out infinite;opacity:.8}.progress-bar.animated .progress-fill{transition:width .3s ease-out}.progress-shine{position:absolute;top:0;left:0;right:0;bottom:0;background:linear-gradient(90deg,transparent,rgba(255,255,255,0.3),transparent);transform:translateX(-100%);animation:shine 2s ease-in-out infinite}.tooltip{animation:fadeIn .2s ease-in-out;transform-origin:bottom center}.log-entry{animation:slideInUp .3s ease-out}.settings-panel{animation:slideInDown .3s ease-out}@media (prefers-reduced-motion:reduce){*{animation-duration:.01ms !important;animation-iteration-count:1 !important;transition-duration:.01ms !important}}.enhanced-card,.status-icon,.relic-component{will-change:transform;backface-visibility:hidden;perspective:1000px}.card-3d{transform-style:preserve-3d;transition:transform .3s ease}.card-3d:hover{transform:rotateY(10deg) rotateX(5deg)}.ens-effect{animation:pulse 1.5s ease-in-out infinite;filter:hue-rotate(0deg)}.ens-effect.intensity-1{animation-duration:3s;filter:hue-rotate(30deg)}.ens-effect.intensity-2{animation-duration:2.5s;filter:hue-rotate(60deg)}.ens-effect.intensity-3{animation-duration:2s;filter:hue-rotate(90deg)}.ens-effect.intensity-4{animation-duration:1.5s;filter:hue-rotate(120deg)}.ens-effect.intensity-5{animation-duration:1s;filter:hue-rotate(150deg);animation-name:pulse,shake}.loading-spinner{animation:spin 1s linear infinite}.btn{transition:all .2s ease}.btn:hover{transform:translateY(-2px);box-shadow:0 4px 8px rgba(0,0,0,.2)}.btn:active{transform:translateY(0);box-shadow:0 2px 4px rgba(0,0,0,.2)}.modal{animation:fadeIn .3s ease-in-out}.modal-content{animation:slideInDown .3s ease-out}@keyframes cardPlay{0%{transform:translateY(-20px) scale(1.1);opacity:1}50%{transform:translateY(-50px) scale(1.2) rotate(5deg);opacity:.8}100%{transform:translateY(-100px) scale(0.5) rotate(15deg);opacity:0}}@keyframes cardDraw{0%{transform:translateY(50px) scale(0.8);opacity:0}100%{transform:translateY(0) scale(1);opacity:1}}@keyframes energyInsufficient{0%,100%{transform:translateX(0)}20%,60%{transform:translateX(-5px)}40%,80%{transform:translateX(5px)}}.card-enhanced-hover{transition:all .3s cubic-bezier(0.4,0,0.2,1)}.card-enhanced-hover:hover{transform:translateY(-25px) scale(1.15);box-shadow:0 20px 40px rgba(0,0,0,.7);filter:brightness(1.1)}.shake-animation{animation:shake .3s ease-in-out}.hp-fill{transition:background-color .3s ease,width .5s ease}.hp-fill.hp-low{background-color:#ff9500 !important}.hp-fill.hp-critical{background-color:#f33 !important;animation:criticalPulse 1s infinite}@keyframes criticalPulse{0%,100%{opacity:1}50%{opacity:.7}}@keyframes lustPulse{0%,100%{transform:translate(-50%,-50%) scale(1);box-shadow:0 12px 36px rgba(0,0,0,.8)}50%{transform:translate(-50%,-50%) scale(1.05);box-shadow:0 16px 48px rgba(255,20,147,.6)}}.damage-number{animation:damageFloat 1.5s ease-out forwards}@keyframes damageFloat{0%{transform:translateY(0) scale(0.8);opacity:1}20%{transform:translateY(-10px) scale(1.2);opacity:1}100%{transform:translateY(-60px) scale(1);opacity:0}}.control-button{transition:all .3s ease}.control-button:hover{transform:translateY(-2px);box-shadow:0 4px 12px rgba(0,0,0,.3)}.control-button:active{transform:translateY(0)}.item-modal{animation:modalFadeIn .3s ease-out}@keyframes modalFadeIn{0%{opacity:0;transform:scale(0.9)}100%{opacity:1;transform:scale(1)}}#battle-log{transition:all .2s ease}.log-entry{animation:logEntrySlide .3s ease-out}@keyframes logEntrySlide{0%{transform:translateX(-20px);opacity:0}100%{transform:translateX(0);opacity:1}}.lust-fill{transition:background-color .3s ease,width .5s ease;background-color:hotpink !important}.lust-fill.lust-high{background-color:#ff1493 !important}.lust-fill.lust-critical{background-color:crimson !important;animation:lustCriticalPulse 1s infinite}@keyframes lustCriticalPulse{0%,100%{opacity:1;box-shadow:0 0 10px crimson}50%{opacity:.8;box-shadow:0 0 20px crimson}}.status-effect-icon{animation:statusAppear .5s ease-out;transition:all .3s ease}.status-effect-icon:hover{transform:scale(1.1);background:hsla(0,0%,100%,.3) !important}@keyframes statusAppear{0%{transform:scale(0);opacity:0}50%{transform:scale(1.2)}100%{transform:scale(1);opacity:1}}.player-status-effects,.enemy-status-effects{min-height:30px;display:flex;flex-wrap:wrap;align-items:center;justify-content:center;gap:4px;padding:5px}@keyframes orgasmFlash{0%{opacity:0}10%{opacity:1}20%{opacity:.3}30%{opacity:.9}40%{opacity:.1}50%{opacity:.8}60%{opacity:.2}70%{opacity:.7}80%{opacity:.1}90%{opacity:.5}100%{opacity:0}}.orgasm-flash{animation:orgasmFlash 2s ease-out}\n</style></head><body><div class=\"card-game-container\"><div id=\"battle-scene\" class=\"scene\"><div class=\"battle-background\"><div class=\"bg-particles\"></div></div><div><div class=\"enemy-section\"><div class=\"enemy-card\"><div class=\"enemy-header\"><div class=\"enemy-name-wrapper\"><div class=\"enemy-emoji\">👹</div><div class=\"enemy-name\" id=\"enemy-name\">神秘敌人</div></div><div class=\"enemy-intent\"><div class=\"intent-icon\">❓</div><div class=\"intent-text\">准备行动</div></div></div><div class=\"character-stats\"><div class=\"stat-item hp-stat\"><div class=\"stat-icon\">🩸</div><div class=\"stat-bar-container\"><div class=\"stat-bar-bg hp-bg\"><div class=\"stat-bar-fill hp-fill\"></div></div><div class=\"stat-text\" id=\"enemy-hp\">50/50</div></div></div><div class=\"stat-item lust-stat\"><div class=\"stat-icon\">💗</div><div class=\"stat-bar-container\"><div class=\"stat-bar-bg lust-bg\"><div class=\"stat-bar-fill lust-fill\"></div></div><div class=\"stat-text\" id=\"enemy-lust\">0/100</div></div></div><div class=\"stat-item block-stat\" id=\"enemy-block-container\" style=\"display:none\"><div class=\"stat-icon\">🛡️</div><div class=\"stat-value\" id=\"enemy-block\">0</div></div></div><div class=\"effects-row\"><div class=\"effect-section status-section\" id=\"enemy-status-section\"><div class=\"effect-label\">状态:</div><div class=\"status-effects enemy-status\" id=\"enemy-status-effects\"></div></div><div class=\"effect-section lust-section\" id=\"enemy-lust-section\"><div class=\"lust-effect-display\" id=\"enemy-lust-effect\"></div></div></div><div class=\"abilities-section\"><div class=\"abilities-label\">⚡ 能力:</div><div class=\"abilities-grid\" id=\"enemy-abilities\"></div></div></div></div><div class=\"battle-area\"><div id=\"lust-overflow-area\" class=\"lust-overflow-area\" style=\"display:none\"><div class=\"lust-overflow-header\"><h3>欲望爆发！</h3><p class=\"lust-overflow-description\">欲望值已满，触发特殊效果...</p></div><div class=\"lust-overflow-effects\"></div><button id=\"confirm-lust-overflow\" class=\"lust-overflow-confirm\">确认</button></div><div id=\"item-use-modal\" class=\"item-modal\" style=\"display:none\"><div class=\"item-modal-content\"><div class=\"item-modal-header\"><h3>使用道具</h3><button id=\"close-item-modal\" class=\"close-modal\">&times;</button></div><div class=\"item-list\"></div></div></div></div><div class=\"player-section\"><div class=\"player-card\"><div class=\"character-stats\"><div class=\"stat-item hp-stat\"><div class=\"stat-icon\">🩸</div><div class=\"stat-bar-container\"><div class=\"stat-bar-bg hp-bg\"><div class=\"stat-bar-fill hp-fill\"></div></div><div class=\"stat-text\" id=\"player-hp\">80/80</div></div></div><div class=\"stat-item lust-stat\"><div class=\"stat-icon\">💗</div><div class=\"stat-bar-container\"><div class=\"stat-bar-bg lust-bg\"><div class=\"stat-bar-fill lust-fill\"></div></div><div class=\"stat-text\" id=\"player-lust\">0/100</div></div></div><div class=\"stat-item block-stat\" id=\"block-stat-container\" style=\"display:none\"><div class=\"stat-icon\">🛡️</div><div class=\"stat-value\" id=\"player-block\">0</div></div></div><div class=\"effects-row\"><div class=\"effect-section status-section\" id=\"player-status-section\"><div class=\"effect-label\">状态:</div><div class=\"status-effects player-status\" id=\"player-status-effects\"></div></div><div class=\"effect-section lust-section\" id=\"player-lust-section\"><div class=\"lust-effect-display\" id=\"player-lust-effect\"></div></div></div><div class=\"abilities-section\"><div class=\"abilities-label\">⚡ 能力:</div><div class=\"abilities-grid\" id=\"player-abilities\"></div></div><div class=\"relic-section\"><div class=\"relic-label\">🏺 遗物:</div><div class=\"relic-grid\"></div></div></div></div></div><div class=\"hand-section\"><div class=\"hand-header\"><div class=\"hand-label\">🃏 手牌</div><div class=\"energy-display\"><div class=\"stat-icon\">⚡</div><div class=\"stat-value\" id=\"player-energy\">3/3</div></div></div><div class=\"player-hand\" id=\"hand-cards\"></div></div><div class=\"control-section\"><div class=\"game-controls\"><div class=\"game-info\"><div class=\"turn-info\"><div class=\"turn-counter\">回合: <span class=\"turn-number\" id=\"turn-number\">1</span></div><div class=\"phase-indicator\" id=\"phase-indicator\">玩家回合</div></div><div class=\"deck-info\"><div class=\"deck-stat clickable\" id=\"draw-pile-btn\" data-pile=\"draw\" title=\"查看抽牌堆\"><span class=\"deck-icon\">📚</span> <span class=\"draw-pile-count\" id=\"draw-pile-count\">0</span></div><div class=\"deck-stat clickable\" id=\"discard-pile-btn\" data-pile=\"discard\" title=\"查看弃牌堆\"><span class=\"deck-icon\">🗂️</span> <span class=\"discard-pile-count\" id=\"discard-pile-count\">0</span></div><div class=\"deck-stat clickable\" id=\"exhaust-pile-btn\" data-pile=\"exhaust\" title=\"查看消耗堆\"><span class=\"deck-icon\">💀</span> <span class=\"exhaust-pile-count\" id=\"exhaust-pile-count\">0</span></div></div><div class=\"climax-penalty\" style=\"display:none;color:#ff6b6b;font-size:.9em;margin-top:5px\" id=\"climax-penalty\"></div></div><div class=\"battle-controls\"><button class=\"end-turn-button\">结束回合</button> <button id=\"battle-log-btn\" class=\"control-button\">战斗日志</button> <button id=\"modifier-display-btn\" class=\"control-button\">修饰符</button> <button id=\"use-item-btn\" class=\"control-button\">使用道具</button></div></div></div></div><div class=\"loading-overlay\" style=\"display:none\"><div class=\"loading-content\"><div class=\"loading-spinner\"></div><div class=\"loading-text\">AI正在生成独特内容...</div><div class=\"loading-sub\">这可能需要几秒钟</div></div></div><div class=\"narrative-overlay\" style=\"display:none\"><div class=\"narrative-content\"><div class=\"narrative-text\"></div></div></div><div class=\"game-over-dialog\" style=\"display:none\"><div class=\"dialog-backdrop\"></div><div class=\"dialog-content\"><h2 class=\"result-title\">战斗结束</h2><div class=\"result-message\"></div><div class=\"dialog-buttons\"><button class=\"restart-btn\">重新开始</button> <button class=\"return-setup-btn\">返回设置</button></div></div></div><div class=\"no-enemy-dialog\" id=\"no-enemy-dialog\" style=\"display:none\"><div class=\"dialog-backdrop\"></div><div class=\"dialog-content\"><h2 class=\"result-title\">无法进行战斗</h2><div class=\"result-message\" id=\"no-enemy-message\">敌人数据未注册或不完整，请先生成/选择敌人。</div><div class=\"dialog-buttons\"><button class=\"return-setup-btn\" id=\"no-enemy-refresh\">刷新</button></div></div></div><div class=\"reward-dialog\" style=\"display:none\"><div class=\"dialog-backdrop\"></div><div class=\"dialog-content\"><h3 class=\"reward-title\">选择奖励</h3><div class=\"reward-items\"></div><div class=\"dialog-buttons\"><button class=\"skip-reward-btn\">跳过</button></div></div></div><div id=\"tooltip\" class=\"tooltip\" style=\"display:none\"><div class=\"tooltip-name\"></div><div class=\"tooltip-desc\"></div></div></div><div id=\"pile-viewer\" class=\"pile-viewer\" style=\"display:none\"><div class=\"pile-viewer-overlay\" onclick=\"closePileViewer()\"></div><div class=\"pile-viewer-content\"><div class=\"pile-viewer-header\"><h3 id=\"pile-viewer-title\">牌堆查看</h3><button class=\"close-btn\" onclick=\"closePileViewer()\">✕</button></div><div class=\"pile-viewer-body\" id=\"pile-viewer-cards\"></div></div></div><script>var e={95:(e,t,a)=>{function n(e){const t={hand:'手牌',draw:'抽牌堆',discard:'弃牌堆'};return e.split('+').map((e=>{const a=e.trim(),n=a.match(/^(hand|draw|discard)\\.(.+)$/),s=n?n[2]:a,i=n?t[n[1]]:'';switch(s){case'random':return`${i||''}随机`;case'leftmost':return`${i||''}最左侧`;case'rightmost':return`${i||''}最右侧`;case'all':return i?`所有${i}`:'所有卡牌';case'all_cards':return'全部卡牌（手牌+抽牌堆+弃牌堆）';case'current':return`${i||''}当前`;case'current_left':return`${i||''}当前左侧`;case'current_right':return`${i||''}当前右侧`;case'current_adjacent':return`${i||''}当前相邻`;case'choose':return`${i||''}选择`;default:{const e=s.match(/^(leftmost|rightmost|random)(\\d+)$/);if(e){const[,t,a]=e;return`${i}${'leftmost'===t?'最左侧':'rightmost'===t?'最右侧':'随机'}${a}张`}return a}}})).join('和')}a.r(t),a.d(t,{describeSelector:()=>n})},113:(e,t,a)=>{a.r(t),a.d(t,{GameStateManager:()=>n});class n{static instance;gameState;listeners=new Map;constructor(){this.initializeEmptyState()}static getInstance(){return n.instance||(n.instance=new n),n.instance}initializeEmptyState(){this.gameState={player:this.createEmptyPlayer(),enemy:null,currentTurn:0,phase:'setup',isGameOver:!1,winner:null}}createEmptyPlayer(){return{maxHp:80,currentHp:80,maxLust:100,currentLust:0,energy:3,maxEnergy:3,block:0,statusEffects:[],relics:[],deck:[],hand:[],drawPile:[],discardPile:[],exhaustPile:[],drawPerTurn:5,gender:'Male',corruption:0}}getGameState(){return{...this.gameState}}getPlayer(){return{...this.gameState.player}}getEnemy(){const e=this.gameState.enemy?{...this.gameState.enemy}:null;if(!e){try{const e=getVariables({type:'message'});console.log('🔄 ===== 敌人数据恢复调试 ====='),console.log('📋 当前内存中的gameState.enemy:',this.gameState.enemy),console.log('📋 variables?.stat_data?.battle?.enemy:',e?.stat_data?.battle?.enemy),console.log('📋 variables?.battle?.enemy:',e?.battle?.enemy);const t=e?.battle?.enemy||e?.stat_data?.battle?.enemy;if(console.log('📋 最终选择的mvuEnemy:',t),t&&t.name)return console.log('🔄 从MVU变量恢复敌人数据:',t.name),this.gameState.enemy={id:t.name,name:t.name,emoji:t.emoji||'👹',maxHp:t.max_hp||100,currentHp:t.hp||t.max_hp||100,maxLust:t.max_lust||100,currentLust:t.lust||0,energy:0,maxEnergy:0,block:0,statusEffects:t.status_effects||[],intent:this.generateEnemyIntent(t),climaxPenalty:t.lust_effect?.effect||'',actions:t.actions||[],nextAction:null,abilities:t.abilities||[],dialogue:t.description||'',isBoss:!1,lustEffect:t.lust_effect||{name:'欲望爆发',description:'敌人欲望达到上限时，对玩家造成额外伤害',effect:'damage:5'}},{...this.gameState.enemy}}catch(e){console.error('从MVU变量恢复敌人数据失败:',e)}console.log('🔄 ===== 敌人数据恢复调试结束 =====')}return e}getCurrentPhase(){return this.gameState.phase}isGameOver(){return this.gameState.isGameOver}updatePlayer(e){this.gameState.player={...this.gameState.player,...e},this.notifyListeners('player_updated')}updateEnemy(e){this.gameState.enemy&&(this.gameState.enemy={...this.gameState.enemy,...e},this.notifyListeners('enemy_updated'))}setEnemy(e){this.gameState.enemy=e,this.notifyListeners('enemy_set')}setPhase(e){this.gameState.phase=e,this.notifyListeners('phase_changed')}incrementTurn(){this.gameState.currentTurn++,this.notifyListeners('turn_incremented')}setCurrentTurn(e){this.gameState.currentTurn=e,this.notifyListeners('turn_set')}setGameOver(e){this.gameState.isGameOver=!0,this.gameState.winner=e,this.gameState.phase='game_over',this.notifyListeners('game_over')}addStatusEffect(e,t){const a='player'===e?this.gameState.player:this.gameState.enemy;if(!a)return;const n=a.statusEffects.findIndex((e=>e.id===t.id));n>=0?(a.statusEffects[n].stacks+=t.stacks,void 0!==t.duration&&(a.statusEffects[n].duration=Math.max(a.statusEffects[n].duration||0,t.duration))):a.statusEffects.push({...t}),this.notifyListeners(`${e}_status_added`)}removeStatusEffect(e,t){const a='player'===e?this.gameState.player:this.gameState.enemy;if(!a)return;const n=a.statusEffects.findIndex((e=>e.id===t));n>=0&&(a.statusEffects.splice(n,1),this.notifyListeners(`${e}_status_removed`))}updateStatusEffect(e,t,a){const n='player'===e?this.gameState.player:this.gameState.enemy;if(!n)return;const s=n.statusEffects.find((e=>e.id===t));s&&(Object.assign(s,a),this.notifyListeners(`${e}_status_updated`))}addCardToHand(e){this.gameState.player.hand.push({...e}),this.notifyListeners('hand_updated')}removeCardFromHand(e){const t=this.gameState.player.hand.findIndex((t=>t.id===e));if(t>=0){const e=this.gameState.player.hand.splice(t,1)[0];return this.notifyListeners('hand_updated'),e}return null}moveCardToDiscard(e){this.gameState.player.discardPile.push({...e}),this.notifyListeners('discard_updated')}moveCardToExhaust(e){this.gameState.player.exhaustPile.push({...e}),this.notifyListeners('exhaust_updated')}drawCardsFromPile(e){const t=[];for(let a=0;a<e&&(0===this.gameState.player.drawPile.length&&this.shuffleDiscardIntoDraw(),0!==this.gameState.player.drawPile.length)&&!(this.gameState.player.hand.length>=10);a++){const e=this.gameState.player.drawPile.pop();t.push(e),this.gameState.player.hand.push(e)}return t.length>0&&this.notifyListeners('cards_drawn'),t}shuffleDiscardIntoDraw(){const e=[...this.gameState.player.discardPile].sort((()=>Math.random()-.5));this.gameState.player.drawPile.push(...e),this.gameState.player.discardPile=[],this.notifyListeners('deck_shuffled')}addCardToHand(e){if(this.gameState.player.hand.length>=10)return void console.log('⚠️ 已达手牌上限(10)，忽略加入手牌的卡牌:',e?.name||'未知');const t={...e};this.gameState.player.hand.push(t),this.notifyListeners('card_added_to_hand'),console.log(`✅ 卡牌加入手牌: ${t.name}`)}addCardToDeck(e){const t={...e},a=Math.floor(Math.random()*(this.gameState.player.drawPile.length+1));this.gameState.player.drawPile.splice(a,0,t),this.notifyListeners('card_added_to_deck'),console.log(`✅ 卡牌加入抽牌堆: ${t.name}`)}addRelic(e){this.gameState.player.relics.push({...e}),this.notifyListeners('relic_added')}removeRelic(e){const t=this.gameState.player.relics.findIndex((t=>t.id===e));t>=0&&(this.gameState.player.relics.splice(t,1),this.notifyListeners('relic_removed'))}addEventListener(e,t){this.listeners.has(e)||this.listeners.set(e,[]),this.listeners.get(e).push(t)}removeEventListener(e,t){const a=this.listeners.get(e);if(a){const e=a.indexOf(t);e>=0&&a.splice(e,1)}}notifyListeners(e){const t=this.listeners.get(e);t&&t.forEach((e=>e(this.gameState)));const a=this.listeners.get('state_changed');a&&a.forEach((e=>e(this.gameState)))}async saveToSillyTavern(){try{const e=JSON.stringify(this.gameState);await insertOrAssignVariables({fishRPG_gameState:e},{type:'character'}),console.log('游戏状态已保存到 SillyTavern')}catch(e){throw console.error('保存游戏状态失败:',e),e}}async loadFromSillyTavern(){try{const e=getVariables({type:'message'}),t=e?.stat_data?.battle||e?.battle;if(console.log('🔍 ===== 完整的MVU变量调试信息 ====='),console.log('📋 variables 根对象:',e),e?(console.log('📋 variables 的所有键:',Object.keys(e)),e.stat_data?(console.log('📋 variables.stat_data:',e.stat_data),console.log('📋 stat_data 的所有键:',Object.keys(e.stat_data)),e.stat_data.battle?(console.log('📋 variables.stat_data.battle:',e.stat_data.battle),console.log('📋 stat_data.battle 的所有键:',Object.keys(e.stat_data.battle)),e.stat_data.battle.enemy?console.log('📋 variables.stat_data.battle.enemy:',e.stat_data.battle.enemy):console.log('❌ variables.stat_data.battle.enemy 不存在')):console.log('❌ variables.stat_data.battle 不存在')):console.log('❌ variables.stat_data 不存在'),e.battle?(console.log('📋 variables.battle:',e.battle),console.log('📋 battle 的所有键:',Object.keys(e.battle)),e.battle.enemy?console.log('📋 variables.battle.enemy:',e.battle.enemy):console.log('❌ variables.battle.enemy 不存在')):console.log('❌ variables.battle 不存在')):console.log('❌ variables 根对象不存在'),console.log('🔍 ===== MVU变量调试信息结束 ====='),t){this.convertMVUToGameState(t),this.notifyListeners('state_loaded');const e=this.getEnemy();return e?console.log(`✅ 战斗状态已加载，敌人: ${e.name}`):console.log('⚠️ 战斗状态已加载，但未找到敌人数据'),!0}return!1}catch(e){return console.error('加载游戏状态失败:',e),!1}}normalizeMVUArray(e){return e?Array.isArray(e)?e.length>=2&&Array.isArray(e[0])&&'string'==typeof e[1]||e.length>=1&&Array.isArray(e[0])?e[0].filter((e=>'$__META_EXTENSIBLE__$'!==e&&'[]'!==e&&null!=e&&''!==e)):e.filter((e=>'$__META_EXTENSIBLE__$'!==e&&'[]'!==e&&null!=e&&''!==e)):'object'==typeof e?[e]:[]:[]}convertMVUToGameState(e){const t=e.core||{};let n=e.enemy||null;if(!n){const e=getVariables({type:'message'});n=e?.battle?.enemy||null,console.log('🔍 从variables.battle.enemy获取敌人数据:',n?.name||'未找到')}const s=this.normalizeMVUArray(e.cards),i=this.normalizeMVUArray(e.artifacts),r=this.normalizeMVUArray(e.player_abilities),o=this.normalizeMVUArray(e.player_status_effects);console.log(`🔄 转换MVU数据: ${s.length}张卡牌, ${i.length}个遗物${n?', 敌人: '+n.name:', 无敌人'}`);const c=this.convertCards(s);this.gameState.player={...this.gameState.player,currentHp:t.hp||80,maxHp:100,currentLust:t.lust||0,maxLust:t.max_lust||100,energy:t.energy||3,maxEnergy:3,block:t.block||0,drawPerTurn:t.draw_count||5,deck:[...c],hand:[],drawPile:[...c],discardPile:[],exhaustPile:[],relics:this.convertRelics(i),abilities:r||[],statusEffects:o||[]},this.shuffleDiscardIntoDraw();const l=this.gameState.player.drawPerTurn,d=this.drawCardsFromPile(l);if(this.gameState.player.hand=d,console.log(`🃏 抽取起始手牌 ${d.length} 张:`,d.map((e=>e.name))),!n||!n.name){console.error('❌ 无法读取敌人数据！battle.enemy 变量未正确设置');const e=`\\n        <div style=\"color: red; font-weight: bold; padding: 20px; text-align: center; background: #ffe0e0; border: 2px solid red; border-radius: 8px; margin: 20px;\">\\n          <h2>⚠️ 战斗系统错误</h2>\\n          <p>无法读取敌人数据！</p>\\n          <p>请确保 battle.enemy 变量已正确设置。</p>\\n          <p>当前敌人数据：${JSON.stringify(n||'undefined')}</p>\\n          <p style=\"font-size: 14px; margin-top: 10px;\">请检查AI是否正确生成了敌人信息，或刷新页面重试。</p>\\n        </div>\\n      `,t=document.querySelector('.battle-log-content');t&&(t.innerHTML=e);const a=document.querySelector('.enemy-info');throw a&&(a.innerHTML=e),new Error('敌人数据未找到或无效。请确保AI已正确生成敌人信息。')}if(this.gameState.enemy={id:n.name,name:n.name,emoji:n.emoji||'👹',maxHp:n.max_hp||100,currentHp:n.hp||n.max_hp||100,maxLust:n.max_lust||100,currentLust:n.lust||0,energy:0,maxEnergy:0,block:0,statusEffects:n.status_effects||[],intent:this.generateEnemyIntent(n),climaxPenalty:n.lust_effect?.effect||'',actions:n.actions||[],nextAction:null,abilities:n.abilities||[],dialogue:n.description||'',isBoss:!1,lustEffect:n.lust_effect||{name:'欲望爆发',description:'敌人欲望达到上限时，对玩家造成额外伤害',effect:'damage:5'}},this.gameState.enemy.actions&&this.gameState.enemy.actions.length>0){a(331).EnemyIntentManager.initializeEnemyIntent(this.gameState.enemy)}this.gameState.battle={...e,player_lust_effect:e.player_lust_effect||{name:'榨精支配',description:'敌人欲望达到上限时，你获得治疗并对敌人施加虚弱',effect:'heal:15,apply_status:enemy:weak:2:2'}},'number'==typeof t.max_lust&&t.max_lust>0&&(this.gameState.player.maxLust=t.max_lust),this.gameState.currentTurn=t['回合数']||1,this.gameState.phase='player_turn',console.log(`✅ MVU数据转换完成: 回合${this.gameState.currentTurn}`)}convertCards(e){const t=[];let a=0;return e.forEach((e=>{if(e&&e.id&&e.name){const n=e.quantity||1;for(let s=0;s<n;s++){const n=`${e.id}_${a++}_${Date.now()}`;t.push({id:n,originalId:e.id,name:e.name,emoji:e.emoji||'🃏',type:e.type||'Skill',rarity:e.rarity||'Common',cost:e.cost||0,description:e.description||'',effect:e.effect||'',retain:e.retain||!1,exhaust:e.exhaust||!1,ethereal:e.ethereal||!1})}}})),console.log(`🃏 转换了 ${t.length} 张卡牌`),t}convertRelics(e){const t=[];return e.forEach((e=>{e&&e.id&&e.name&&t.push({id:e.id,name:e.name,emoji:e.emoji||'🔮',description:e.description||'',effect:e.effect||'',rarity:'Common'})})),console.log(`🔮 转换了 ${t.length} 个遗物`),t}generateEnemyIntent(e){if(e.actions&&e.actions.length>0){let t=null;if('probability'===e.actionMode&&e.actionConfig){const a=Object.values(e.actionConfig).reduce(((e,t)=>e+(t||0)),0);let n=Math.random()*a;for(const[a,s]of Object.entries(e.actionConfig))if(n-=s||0,n<=0){t=e.actions.find((e=>e.name===a));break}}else t=e.actions[Math.floor(Math.random()*e.actions.length)];if(t)return{type:this.getIntentType(t.effect),description:t.description||t.name,emoji:this.getIntentEmoji(t.effect)}}return{type:'attack',description:'准备行动',emoji:'❓'}}getIntentType(e){return e?e.includes('damage:')||e.includes('lust_damage:')?'attack':e.includes('block:')?'defend':e.includes('apply_status:enemy:')?'debuff':e.includes('apply_status:player:')?'buff':'special':'special'}getIntentEmoji(e){return e?e.includes('damage:')?'⚔️':e.includes('lust_damage:')?'💋':e.includes('block:')?'🛡️':e.includes('apply_status:')?'🎯':'❓':'❓'}resetGame(){this.initializeEmptyState(),this.notifyListeners('game_reset')}snapshots=new Map;createSnapshot(e){this.snapshots.set(e,JSON.parse(JSON.stringify(this.gameState)))}restoreSnapshot(e){const t=this.snapshots.get(e);return!!t&&(this.gameState=JSON.parse(JSON.stringify(t)),this.notifyListeners('snapshot_restored'),!0)}deleteSnapshot(e){this.snapshots.delete(e)}clearTemporaryModifiers(){console.log('🧹 清除临时修饰符...');const e=['draw','discard','energy_gain','card_play_limit'],t=this.gameState.player;if(t.modifiers){const a={...t.modifiers};e.forEach((e=>{void 0!==a[e]&&(console.log(`  移除玩家临时修饰符: ${e} = ${a[e]}`),delete a[e])})),this.updatePlayer({modifiers:a})}const a=this.gameState.enemy;if(a&&a.modifiers){const t={...a.modifiers};e.forEach((e=>{void 0!==t[e]&&(console.log(`  移除敌人临时修饰符: ${e} = ${t[e]}`),delete t[e])})),this.updateEnemy({modifiers:t})}console.log('✅ 临时修饰符已清除')}}},220:(e,t,a)=>{a.d(t,{h:()=>n});class n{static instance;attributeDefinitions=new Map;validPrefixes=['battle_start','turn_start','turn_end','card_played','on_discard','take_damage','take_heal','lust_increase','lust_decrease','deal_damage','deal_heal','deal_lust_increase','deal_lust_decrease','gain_buff','gain_debuff','lose_buff','lose_debuff','enemy_gain_buff','enemy_gain_debuff','enemy_lose_buff','enemy_lose_debuff','passive','apply_status','tick'];validOperators=['+','-','*','/','=','apply','remove'];playerOnlyAttributes=['hand','deck','drawPile','discardPile','exhaustPile','drawPerTurn','energy','maxEnergy','max_energy','relics','draw','discard','reduce_cost','copy_card','trigger_effect'];constructor(){this.initializeAttributeDefinitions()}static getInstance(){return n.instance||(n.instance=new n),n.instance}initializeAttributeDefinitions(){this.attributeDefinitions.set('max_hp',{id:'max_hp',displayName:'最大生命值',category:'basic',dataType:'number',minValue:1}),this.attributeDefinitions.set('max_lust',{id:'max_lust',displayName:'最大欲望值',category:'basic',dataType:'number',minValue:1}),this.attributeDefinitions.set('max_energy',{id:'max_energy',displayName:'最大能量',category:'basic',dataType:'number',minValue:1}),this.attributeDefinitions.set('hp',{id:'hp',displayName:'生命值',category:'basic',dataType:'number',minValue:0}),this.attributeDefinitions.set('lust',{id:'lust',displayName:'欲望值',category:'basic',dataType:'number',minValue:0}),this.attributeDefinitions.set('energy',{id:'energy',displayName:'当前能量',category:'basic',dataType:'number',minValue:0}),this.attributeDefinitions.set('block',{id:'block',displayName:'格挡',category:'basic',dataType:'number',minValue:0}),this.attributeDefinitions.set('status',{id:'status',displayName:'状态效果',category:'status',dataType:'string'}),this.attributeDefinitions.set('ability',{id:'ability',displayName:'能力',category:'ability',dataType:'string'}),this.attributeDefinitions.set('draw',{id:'draw',displayName:'抽牌',category:'card',dataType:'number',minValue:0}),this.attributeDefinitions.set('discard',{id:'discard',displayName:'弃牌',category:'card',dataType:'string'}),this.attributeDefinitions.set('add_to_hand',{id:'add_to_hand',displayName:'加入手牌',category:'card',dataType:'object'}),this.attributeDefinitions.set('add_to_deck',{id:'add_to_deck',displayName:'加入抽牌堆',category:'card',dataType:'object'}),this.attributeDefinitions.set('exhaust',{id:'exhaust',displayName:'消耗',category:'card',dataType:'number',minValue:0}),this.attributeDefinitions.set('reduce_cost',{id:'reduce_cost',displayName:'降低费用',category:'card',dataType:'number'}),this.attributeDefinitions.set('copy_card',{id:'copy_card',displayName:'复制卡牌',category:'card',dataType:'string'}),this.attributeDefinitions.set('trigger_effect',{id:'trigger_effect',displayName:'触发效果',category:'card',dataType:'string'}),this.attributeDefinitions.set('damage_modifier',{id:'damage_modifier',displayName:'伤害修饰符',category:'modifier',dataType:'number'}),this.attributeDefinitions.set('damage_taken_modifier',{id:'damage_taken_modifier',displayName:'受伤害修饰符',category:'modifier',dataType:'number'}),this.attributeDefinitions.set('lust_damage_modifier',{id:'lust_damage_modifier',displayName:'欲望伤害修饰符',category:'modifier',dataType:'number'}),this.attributeDefinitions.set('lust_damage_taken_modifier',{id:'lust_damage_taken_modifier',displayName:'受欲望伤害修饰符',category:'modifier',dataType:'number'}),this.attributeDefinitions.set('block_modifier',{id:'block_modifier',displayName:'格挡修饰符',category:'modifier',dataType:'number'}),this.attributeDefinitions.set('narrate',{id:'narrate',displayName:'叙事',category:'special',dataType:'string'})}parseEffectString(e){if(!e||''===e.trim())return[];const t=this.splitEffectsByComma(e),a=[];for(const e of t){const t=e.trim();if(t)try{const e=this.parseEffectPart(t);e.isValid?a.push(e):console.warn('⚠️ 无效的效果表达式:',t)}catch(e){console.error('❌ 解析效果部分失败:',t,e)}}return a}splitEffectsByComma(e){if(/^\\s*narrate\\b/i.test(e))return[e.trim()];const t=e.replace(/[⭐⚡🔥💖💔🛡️⚔️✨🎯]/g,'').replace(/，/g,',').replace(/\\s+/g,' ').trim(),a=[];let n='',s=0,i=0,r=0,o=!1,c='';for(let e=0;e<t.length;e++){const l=t[e];'\"'===l&&'\\\\'!==c&&(o=!o),'('===l?s++:')'===l?s=Math.max(0,s-1):'{'===l?i++:'}'===l?i=Math.max(0,i-1):'['===l?r++:']'===l&&(r=Math.max(0,r-1)),','!==l||o||0!==s||0!==i||0!==r?n+=l:n.trim()&&(a.push(n.trim()),n=''),c=l}return n.trim()&&a.push(n.trim()),a}isVariableReference(e){return!!/^(max_hp|max_lust|max_energy|current_hp|current_lust|current_energy|hp|lust|energy|block|hand_size|deck_size|discard_pile_size|cards_played_this_turn)$/.test(e)||!!/^(ME|OP)\\.[a-zA-Z_][a-zA-Z0-9_]*$/.test(e)}isMathExpression(e){return/[+\\-*/()]/.test(e)&&this.containsVariableReference(e)}containsVariableReference(e){return/(max_hp|max_lust|max_energy|current_hp|current_lust|current_energy|hp|lust|energy|block|hand_size|deck_size|discard_pile_size|cards_played_this_turn|ME\\.\\w+|OP\\.\\w+|stacks)/.test(e)}parseConditionalExpression(e){if(!e.startsWith('if['))return null;if(!this.isIfStatementComplete(e))return console.warn('if语句不完整，跳过解析:',e),{raw:e,attribute:'conditional',operator:'if',value:'',isConditional:!0,condition:'',trueEffect:'',falseEffect:'',isValid:!1,errorMessage:'if语句不完整',description:`不完整的if语句: ${e}`};try{const t=this.parseIfStatement(e,0);if(!t)return null;const{condition:a,trueEffect:n,falseEffect:s,endPos:i}=t,r=e.slice(i).trim();return r&&')'!==r&&'))'!==r?(console.warn('if语句解析不完整:',e),null):{raw:e,attribute:'conditional',operator:s?'if-else':'if',value:'',isConditional:!0,condition:a.trim(),trueEffect:n.trim(),falseEffect:s?s.trim():'',isValid:!0,description:this.generateConditionalDescription(a,n,s||'')}}catch(t){return console.error('if语句解析失败:',t,e),{raw:e,attribute:'conditional',operator:'if',value:'',isConditional:!0,condition:'',trueEffect:'',falseEffect:'',isValid:!1,errorMessage:`if语句解析失败: ${t}`}}}isIfStatementComplete(e){let t=0,a=!1,n=!1,s=!1,i=!1;for(let r=0;r<e.length;r++){const o=e[r];'['===o?(t++,1===t&&e.substring(0,r).endsWith('if')?s=!0:1===t&&a&&!n&&(i=!0)):']'===o&&(t--,0===t&&(s?(a=!0,s=!1):i&&(n=!0,i=!1)))}return 0===t&&a&&n}parseIfStatement(e,t){if(!e.substring(t).startsWith('if['))return null;let a=t+3,n=1,s='';for(;a<e.length&&n>0;){const t=e[a];'['===t?n++:']'===t&&n--,n>0&&(s+=t),a++}if(0!==n)throw new Error('条件部分括号不平衡');if(a>=e.length||'['!==e[a])throw new Error('缺少true效果的开始括号');a++,n=1;let i='';for(;a<e.length&&n>0;){const t=e[a];'['===t?n++:']'===t&&n--,n>0&&(i+=t),a++}if(0!==n)throw new Error('true效果部分括号不平衡');if(a<e.length&&e.substring(a).startsWith('else[')){a+=5,n=1;let t='';for(;a<e.length&&n>0;){const s=e[a];'['===s?n++:']'===s&&n--,n>0&&(t+=s),a++}if(0!==n)throw new Error('false效果部分括号不平衡');return{condition:s.trim(),trueEffect:i.trim(),falseEffect:t.trim(),endPos:a}}return{condition:s.trim(),trueEffect:i.trim(),endPos:a}}parseBalancedBrackets(e,t){if('['!==e[t])return console.warn('parseBalancedBrackets: 起始位置不是[，位置:',t,'字符:',e[t]),null;let a=t+1,n=1,s='';for(;a<e.length&&n>0;){const t=e[a];'['===t?n++:']'===t&&n--,n>0&&(s+=t),a++}return 0!==n?(console.warn('括号不平衡，剩余括号数:',n,'位置:',a,'内容:',s),null):{content:s.trim(),endPos:a}}generateConditionalDescription(e,t,a){const n=this.translateCondition(e),s=this.generateEffectDescriptionFromString(t);if(a){return`如果${n}，则${s}；否则${this.generateEffectDescriptionFromString(a)}`}return`如果${n}，则${s}`}translateCondition(e){let t=this.replaceVariablesInExpression(e);return t=t.replace(/>=/g,'≥').replace(/<=/g,'≤').replace(/==/g,'=').replace(/!=/g,'≠').replace(/>/g,'＞').replace(/</g,'＜'),t}generateEffectDescriptionFromString(e){if(e.includes('.status apply')){const t=e.match(/(ME|OP)\\.status apply (\\w+)(?:\\s+(\\d+))?/);if(t){const[,e,a,n='1']=t;return`${'ME'===e?'己方':'对方'}获得${n}层${a}状态`}}const t=e.match(/(ME|OP)\\.(\\w+)\\s*([+\\-*/=])\\s*(.+)/);if(t){const[,e,a,n,s]=t;return`${'ME'===e?'己方':'对方'}的${this.getAttributeChineseName(a)}${this.getOperatorChineseName(n)}${this.replaceVariablesInExpression(s)}`}return this.replaceVariablesInExpression(e)}getAttributeChineseName(e){return{hp:'生命值',lust:'欲望值',energy:'能量',block:'格挡值',max_hp:'最大生命值',max_lust:'最大欲望值',max_energy:'最大能量'}[e]||e}getOperatorChineseName(e){return{'+':'增加','-':'减少','*':'乘以','/':'除以','=':'设置为'}[e]||e}replaceVariablesInExpression(e){const{variableDisplayMap:t}=a(689);let n=e;return n=n.replace(/(ME|OP)\\.(\\w+)/g,((_,e,a)=>`${'ME'===e?'己方':'对方'}的${t[a]||this.attributeDefinitions.get(a)?.displayName||a}`)),Object.entries(t).forEach((([e,t])=>{const a=new RegExp(`\\\\b${e}\\\\b`,'g');n=n.replace(a,`己方的${t}`)})),n}parseEffectPart(e){const t={raw:e,attribute:'',operator:'',value:'',isValid:!1};try{const a=this.parseConditionalExpression(e);if(a)return a;const n=e.match(/^(ME|OP)\\.([\\w_]+)\\((.+)\\)$/),s=e.match(/^([\\w_]+)\\((.+)\\)$/);if(n){const[,e,a,s]=n;if(this.validPrefixes.includes(a))return t.target=e,t.attribute='ability',t.operator='add',t.value=`${a}(${s})`,t.isValid=!0,t.description=this.generateAbilityDescription(`${a}(${s})`),t;throw new Error(`未知的触发条件: ${a}`)}if(s){const[,e,a]=s;if(this.validPrefixes.includes(e))return t.target='ME',t.attribute='ability',t.operator='add',t.value=`${e}(${a})`,t.isValid=!0,t.description=this.generateAbilityDescription(`${e}(${a})`),t;throw new Error(`未知的触发条件: ${e}`)}{const a=e.match(/^([\\w_]+)\\((.*)$/);if(a){const[,e,n]=a;if(this.validPrefixes.includes(e)){const a=n.endsWith(')')?n.slice(0,-1):n;return t.target='ME',t.attribute='ability',t.operator='add',t.value=`${e}(${a})`,t.isValid=!0,t.description=this.generateAbilityDescription(`${e}(${a})`),t}}}const i=e.match(/^(ME|OP)\\.([\\w_]+)\\s*([+\\-*/=]|apply|remove)\\s*(.+)$/);if(i){const[,e,a,n,s]=i;if(t.target=e,t.attribute=a,t.operator=n,'status'!==a||'apply'!==n&&'remove'!==n)this.parseValueStringWithFlag(s,t);else if('apply'===n){const e=s.trim();let a,n=1;const i=e.split(/\\s+/);a=i[0],n=i[1]?parseInt(i[1]):1,t.value=`${a}:${n}`}else t.value=s.trim();return t.isValid=!0,t.description=this.generateDescription(t),t}if(e.includes('add_to_hand ')||e.includes('add_to_deck '))try{return this.parseCardInsertion(e,t),t.isValid=!0,t.description=this.generateDescription(t),t}catch(e){throw new Error(`卡牌操作解析失败: ${e instanceof Error?e.message:'未知错误'}`)}const r=this.parseBasicEffect(e);if(r&&r.isValid)return r;throw new Error(`无法解析的效果格式: ${e}`)}catch(a){return console.error('❌ 解析效果部分失败:',e,a),t.isValid=!1,t.errorMessage=a instanceof Error?a.message:'未知错误',t}}parseCardInsertion(e,t){let a,n;if(e.startsWith('add_to_hand '))a='add_to_hand',n=e.substring(12).trim();else{if(!e.startsWith('add_to_deck '))throw new Error(`卡牌插入格式错误: ${e}`);a='add_to_deck',n=e.substring(12).trim()}t.attribute=a,t.operator='add';try{if(n.startsWith('{')||n.startsWith('{\"')){let e=n;e=e.replace(/\\\\\"/g,'\"');let a=0,s=-1;for(let t=0;t<e.length;t++)if('{'===e[t]&&a++,'}'===e[t]&&(a--,0===a)){s=t;break}s>0&&(e=e.substring(0,s+1)),t.value=JSON.parse(e)}else t.value={id:n}}catch(e){console.error('卡牌数据解析失败:',n,e);try{let a=n.replace(/,\\s*}/,'}').replace(/,\\s*]/,']');if(!a.startsWith('{'))throw e;t.value=JSON.parse(a)}catch(t){const a=e instanceof Error?e.message:String(e);throw new Error(`卡牌数据解析失败: ${n} - ${a}`)}}}parseBasicExpression(e,t){let a=e.match(/^([a-zA-Z_][a-zA-Z0-9_]*)\\.([a-zA-Z0-9_.+|]+)(?:\\s*([+\\-=*/])\\s*(.+))?$/);if(a){const[,e,n,s,i]=a;return t.attribute=e,t.selector=n,t.operator=s||'=',void(t.value=i?this.parseValueString(i):1)}const n=e.match(/^([a-zA-Z_][a-zA-Z0-9_]*)\\.([a-zA-Z0-9_.+|]+)\\s+(.+)$/);if(n){const[,e,a,s]=n;return t.attribute=e,t.selector=a,t.operator='=',t.value=this.parseValueString(s),t.isValid=!0,void(t.description=this.generateDescription(t))}const s=e.match(/^((?:ME|OP)\\.[\\w_]+|[\\w_]+)\\s*([+\\-*/=])\\s*(.+)$/);if(!s){const a=e.match(/^((?:ME|OP)\\.[\\w_]+|[\\w_]+)$/);if(a){const[,e]=a;if(e.includes('.')){const[a,n]=e.split('.');t.target=a,t.attribute=n}else t.attribute=e;return t.operator='=',void(t.value=1)}const n=e.match(/^narrate\\s+\"([\\s\\S]*)\"$/);if(n)return t.attribute='narrate',t.operator='=',t.value=n[1],t.isValid=!0,void(t.description=`叙事：${t.value}`);throw new Error(`表达式格式错误: ${e}`)}const[,i,r,o]=s;if(!this.validOperators.includes(r))throw new Error(`不支持的操作符: ${r}`);if(i.includes('.')){const[e,a]=i.split('.');t.target=e,t.attribute=a}else t.attribute=i;if(t.operator=r,'narrate'===t.attribute)t.value=o.replace(/^[\"']|[\"']$/g,'');else{const e=parseFloat(o);isNaN(e)?this.isVariableReference(o)||this.isMathExpression(o)?(t.value=o,t.isVariableReference=!0):t.value=o:t.value=e}}parseValueString(e){const t=parseFloat(e);return isNaN(t)?(this.isVariableReference(e),e):t}parseValueStringWithFlag(e,t){const a=parseFloat(e);isNaN(a)?this.isVariableReference(e)||this.isMathExpression(e)?(t.value=e,t.isVariableReference=!0):t.value=e:t.value=a}generateDescription(e){const t=this.attributeDefinitions.get(e.attribute),a=t?t.displayName:e.attribute,n='ME'===e.target?'己方':'OP'===e.target?'对方':'';let s='';if(e.prefix){s+=`${this.getPrefixDescription(e.prefix)}: `}if(n&&(s+=`${n}的`),'ability'===e.attribute&&'add'===e.operator){const t=e.value.toString(),a=t.indexOf(':');if(a>0){const e=t.substring(0,a).trim(),n=t.substring(a+1).trim();s=`${this.getPrefixDescription(e)}时，${n}`}else s+=t}else if('apply'===e.operator){const t=e.value.toString().split(':')[0];s+=`施加${e.value.toString().split(':')[1]||'1'}层${t}状态`}else if(e.selector){const t=this.getSelectorDescription(e.selector);'discard'===e.attribute?s+=`弃掉${t}的卡牌`:'reduce_cost'===e.attribute?s+=`${t}费用减少${e.value}`:'copy_card'===e.attribute?s+=`复制${t}的卡牌`:'trigger_effect'===e.attribute?s+=`${t}的卡牌下次使用效果触发两次`:s+=`${a}${t}`}else{s+=`${a}${this.getOperatorDescription(e.operator)}${e.value}`}return e.duration&&(s+=`，持续${e.duration}回合`),s}getPrefixDescription(e){return{battle_start:'战斗开始时',turn_start:'回合开始时',turn_end:'回合结束时',card_played:'打出卡牌时',take_damage:'受到伤害时',apply_status:'施加状态时',tick:'状态触发时'}[e]||e}generateEffectDescription(e){let t='';const a=this.attributeDefinitions.get(e.attribute),n=a?a.displayName:e.attribute;if('apply'===e.operator){const a=e.value.toString().split(':')[0];t+=`施加${e.value.toString().split(':')[1]||'1'}层${a}状态`}else{const a=this.getOperatorDescription(e.operator);let s=e.value;if('string'==typeof e.value)if(e.isVariableReference){const t=this.attributeDefinitions.get(e.value);if(t)s=t.displayName;else{s={max_hp:'最大生命值',max_lust:'最大欲望值',max_energy:'最大能量',hp:'生命值',lust:'欲望值',energy:'当前能量',block:'格挡',draw:'抽牌数',discard:'弃牌数'}[e.value]||e.value}}else this.containsVariableReference(e.value)&&(s=this.replaceVariablesInExpression(e.value));t+=`${n}${a}${s}`}return t}parseBasicEffect(e){const t={raw:e,attribute:'',operator:'',value:'',isValid:!1};let a=e;const n=a.match(/^(.+?)\\s*@(\\d+)$/);if(n){const[,e,s]=n;t.duration=parseInt(s),a=e.trim()}return a.includes('add_to_hand ')||a.includes('add_to_deck ')?this.parseCardInsertion(a,t):(this.parseBasicExpression(a,t),t.attribute&&(t.isValid=!0,t.description||(t.description=this.generateDescription(t)))),t}generateAbilityDescription(e){const t=e.match(/^([\\w_]+)\\((.+)\\)$/);if(t){const[,e,a]=t,n=this.getPrefixDescription(e);try{const e=this.parseBasicEffect(a);return`${n}: ${this.generateEffectDescription(e)}`}catch(e){return`${n}: ${a}`}}const a=e.indexOf(':');if(a>0){const t=e.substring(0,a).trim(),n=e.substring(a+1).trim(),s=this.getPrefixDescription(t);try{const e=this.parseBasicEffect(n);return`${s}: ${this.generateEffectDescription(e)}`}catch(e){return`${s}: ${n}`}}return e}getOperatorDescription(e){return{'+':'增加','-':'减少','*':'乘以','/':'除以','=':'设置为'}[e]||e}getAttributeDefinition(e){return this.attributeDefinitions.get(e)}getAllAttributeDefinitions(){return new Map(this.attributeDefinitions)}getSelectorDescription(e){const{describeSelector:t}=a(95);return t(e)}parseDiscardEffect(e){if(console.log('🗑️ 解析弃牌效果:',e),!e||''===e.trim())return null;try{const t=e.trim(),a=this.parseEffectPart(t);return a.isValid?a:(console.warn('⚠️ 弃牌效果解析失败:',a.errorMessage),null)}catch(t){return console.error('❌ 弃牌效果解析异常:',e,t),null}}}},331:(e,t,a)=>{a.r(t),a.d(t,{EnemyIntentManager:()=>s});const n=a(775).W.getInstance();class s{static parseActionIntent(e){if(!e.effect)return{type:'unknown',description:e.description||'未知行动',name:e.name,effect:e.effect};const t=e.effect.split(',').map((e=>e.trim()))[0].split(':'),a=t[0],n=parseInt(t[1])||0;switch(a){case'damage':return{type:'attack',damage:n,description:e.description,name:e.name,effect:e.effect};case'lust_damage':return{type:'lust_attack',damage:n,description:e.description,name:e.name,effect:e.effect};case'block':return{type:'defend',block:n,description:e.description,name:e.name,effect:e.effect};case'heal':return{type:'heal',heal:n,description:e.description,name:e.name,effect:e.effect};case'apply_status':return{type:'debuff',description:e.description,name:e.name,effect:e.effect};default:return{type:'unknown',description:e.description||'未知行动',name:e.name,effect:e.effect}}}static updateEnemyIntentDisplay(e){let t='❓',a='准备行动',s='';if(e.nextAction){const i=function(e){const t=e.effect||'',a=n.parseEffectToTags(t,{isPlayerCard:!1});let s='unknown',i=0,r=0,o=0;if(t.includes('damage:')){s='attack';const e=t.match(/damage:(\\d+)/);e&&(i=parseInt(e[1]))}else if(t.includes('lust_damage:')){s='lust_attack';const e=t.match(/lust_damage:(\\d+)/);e&&(r=parseInt(e[1]))}else if(t.includes('block:')){s='defend';const e=t.match(/block:(\\d+)/);e&&(o=parseInt(e[1]))}else t.includes('heal:')?s='heal':t.includes('apply_status:player:')?s='debuff':t.includes('apply_status:enemy:')&&(s='buff');return{type:s,description:e.description||e.name||'未知行动',tags:a,damage:i>0?i:void 0,lustDamage:r>0?r:void 0,block:o>0?o:void 0}}(e.nextAction);t=function(e){switch(e){case'attack':return'⚔️';case'lust_attack':return'💗';case'defend':return'🛡️';case'heal':return'💚';case'debuff':return'💀';default:return'❓'}}(i.type),a=i.description,s=n.createEffectTagsHTML(i.tags),i.damage&&(a+=` (${i.damage}伤害)`),i.lustDamage&&(a+=` (${i.lustDamage}欲望)`),i.block&&(a+=` (${i.block}格挡)`)}else if(e.intent)t=e.intent.icon||'❓',a=e.intent.description||'准备行动';else if(e.actions&&Array.isArray(e.actions)&&e.actions.length>0){const n=this.filterMetadata(e.actions);if(n.length>0){const e=n[Math.floor(Math.random()*n.length)];switch(this.parseActionIntent(e).type){case'attack':t='⚔️';break;case'lust_attack':t='💋';break;case'defend':t='🛡️';break;case'heal':t='💚';break;case'debuff':t='💀';break;default:t='❓'}a=e.description||e.name||'未知行动'}}const i=$('.enemy-intent');i.length>0?i.html(`\\n        <div class=\"intent-icon\">${t}</div>\\n        <div class=\"intent-description\">${a}</div>\\n        ${s?`<div class=\"intent-effects\">${s}</div>`:''}\\n      `):($('.intent-icon').text(t),$('.intent-text').text(a)),console.log(`更新敌人意图: ${t} ${a}`)}static setNextAction(e,t){if(!t||0===t.length)return;const a=this.filterMetadata(t);if(0===a.length)return;const n=a[Math.floor(Math.random()*a.length)],s=this.parseActionIntent(n);e.nextAction=s,console.log(`设置敌人下回合意图: ${n.name} - ${n.description}`),this.updateEnemyIntentDisplay(e)}static initializeEnemyIntent(e){if(!e.nextAction&&e.actions){const t=this.filterMetadata(e.actions);if(t.length>0){const a=t[Math.floor(Math.random()*t.length)],n=this.parseActionIntent(a);e.nextAction=n,console.log(`初始化敌人意图: ${a.name}`),this.updateEnemyIntentDisplay(e)}}}static executeCurrentIntentAndSetNext(e){e.nextAction&&(console.log(`敌人执行行动: ${e.nextAction.name}`),e.actions&&this.setNextAction(e,e.actions))}static filterMetadata(e){return Array.isArray(e)?e.filter((e=>{if(!e||'object'!=typeof e)return!1;const t=Object.keys(e);return 1!==t.length||'_metadata'!==t[0]&&!t[0].startsWith('_')})):[]}static getIntentDisplayInfo(e){let t='❓',a='未知行动',n='#ffffff';switch(e.type){case'attack':t='⚔️',a=`攻击 ${e.damage||'?'}`,n='#ff4444';break;case'lust_attack':t='💋',a=`欲望攻击 ${e.damage||'?'}`,n='#ff44ff';break;case'defend':t='🛡️',a=`防御 ${e.block||'?'}`,n='#4444ff';break;case'heal':t='💚',a=`治疗 ${e.heal||'?'}`,n='#44ff44';break;case'buff':t='💪',a='增益',n='#ffaa44';break;case'debuff':t='💀',a='减益',n='#aa44aa';break;default:t='❓',a=e.description||'未知行动',n='#ffffff'}return{icon:t,text:a,color:n}}}},624:(e,t,a)=>{a.d(t,{b:()=>n});class n{static instance;statusDefinitions=new Map;constructor(){}static getInstance(){return n.instance||(n.instance=new n),n.instance}refreshFromMVU(){this.statusDefinitions.clear(),this.loadFromMVU()}loadFromMVU(){try{const e=getVariables({type:'message'}),t=e?.stat_data?.battle?.statuses;if(!t||!Array.isArray(t))return;let a=t,n=0;for(;Array.isArray(a)&&a.length>0&&Array.isArray(a[0])&&n<3;)console.log(`🔍 Fish - 深度 ${n} - 解析嵌套数组:`,a[0]),a=a[0],n++;console.log('🔍 Fish - 解析状态数组:',{原始:t,解析后:a,长度:a.length,深度:n});const s=a.filter((e=>{const t=e&&'object'==typeof e&&'$__META_EXTENSIBLE__$'!==e&&e.id&&e.name;return!t&&e&&console.warn('⚠️ Fish - 状态对象无效:',e,'字段:',e?Object.keys(e):'N/A'),t}));for(const e of s)if(this.validateStatusDefinition(e)){const t={...e,source:'ai',createdAt:e.createdAt||Date.now()};this.statusDefinitions.set(t.id,t),console.log(`✅ 加载状态定义: ${t.name} (${t.id})`)}}catch(e){console.error('加载动态状态定义失败:',e)}}validateStatusDefinition(e){if(!e||'object'!=typeof e)return!1;const t=['id','name','emoji','description','type'];for(const a of t)if(!e[a])return console.warn(`状态定义缺少必需字段: ${a}`),!1;return!!['buff','debuff','neutral'].includes(e.type)||(console.warn(`无效的状态类型: ${e.type}`),!1)}getStatusDefinition(e){return this.statusDefinitions.get(e)}getStatusTriggerEffects(e,t){const a=this.statusDefinitions.get(e);if(!a||!a.triggers[t])return[];const n=a.triggers[t];return Array.isArray(n)?n:'string'==typeof n?[n]:[]}addStatusDefinition(e){this.validateStatusDefinition(e)&&(this.statusDefinitions.set(e.id,e),this.saveToMVU())}saveToMVU(){try{const e=Array.from(this.statusDefinitions.values()).filter((e=>'ai'===e.source));insertOrAssignVariables({'stat_data.battle.statuses':e},{type:'message'})}catch(e){console.error('保存动态状态定义失败:',e)}}forceReload(){this.statusDefinitions.clear(),this.loadFromMVU()}getAllStatusDefinitions(){return new Map(this.statusDefinitions)}}},689:(e,t,a)=>{a.r(t),a.d(t,{variableDisplayMap:()=>n});const n={max_hp:'最大生命值',max_lust:'最大欲望值',max_energy:'最大能量',hp:'生命值',lust:'欲望值',energy:'当前能量',block:'格挡',draw:'抽牌数',discard:'弃牌数',hand_size:'手牌数',deck_size:'抽牌堆数',discard_pile_size:'弃牌堆数',cards_played_this_turn:'本回合出牌数',stacks:'层数'}},775:(e,t,a)=>{a.d(t,{W:()=>i});var n=a(624),s=a(220);class i{static instance;parser;statusManager;attributeDisplayConfig={hp:{name:'生命值',positiveIcon:'💚',negativeIcon:'💔',positiveColor:'#44ff44',negativeColor:'#ff4444'},lust:{name:'欲望值',positiveIcon:'💕',negativeIcon:'✨',positiveColor:'#ff69b4',negativeColor:'#87ceeb'},energy:{name:'能量',positiveIcon:'⚡',negativeIcon:'⚡',positiveColor:'#ffff00',negativeColor:'#888888'},block:{name:'格挡',positiveIcon:'🛡️',negativeIcon:'🛡️',positiveColor:'#4169e1',negativeColor:'#888888'},max_hp:{name:'最大生命值',positiveIcon:'💪',negativeIcon:'💔',positiveColor:'#44ff44',negativeColor:'#ff4444'},max_lust:{name:'最大欲望值',positiveIcon:'💖',negativeIcon:'💔',positiveColor:'#ff69b4',negativeColor:'#ff4444'},max_energy:{name:'最大能量',positiveIcon:'⚡',negativeIcon:'⚡',positiveColor:'#ffff00',negativeColor:'#888888'},draw:{name:'抽牌',positiveIcon:'🃏',negativeIcon:'🃏',positiveColor:'#ffd700',negativeColor:'#888888'},discard:{name:'弃牌',positiveIcon:'🗂️',negativeIcon:'🗂️',positiveColor:'#888888',negativeColor:'#ff4444'},damage_modifier:{name:'伤害修饰',positiveIcon:'⚔️',negativeIcon:'⚔️',positiveColor:'#ef4444',negativeColor:'#ef4444'},lust_damage_modifier:{name:'欲望伤害修饰',positiveIcon:'💖',negativeIcon:'💖',positiveColor:'#ec4899',negativeColor:'#ec4899'},lust_damage_taken_modifier:{name:'受到欲望伤害修饰',positiveIcon:'💔',negativeIcon:'💔',positiveColor:'#dc2626',negativeColor:'#dc2626'},damage_taken_modifier:{name:'受到伤害修饰',positiveIcon:'🛡️',negativeIcon:'⚔️',positiveColor:'#10b981',negativeColor:'#ef4444'},block_modifier:{name:'格挡修饰',positiveIcon:'🛡️',negativeIcon:'🛡️',positiveColor:'#3b82f6',negativeColor:'#3b82f6'},add_to_hand:{name:'加入手牌',positiveIcon:'🃏',negativeIcon:'🃏',positiveColor:'#10b981',negativeColor:'#10b981'},add_to_deck:{name:'加入抽牌堆',positiveIcon:'📚',negativeIcon:'📚',positiveColor:'#8b5cf6',negativeColor:'#8b5cf6'}};prefixDisplayConfig={battle_start:{name:'战斗开始时',icon:'🚀',color:'#ffd700'},turn_start:{name:'回合开始时',icon:'🔄',color:'#4169e1'},turn_end:{name:'回合结束时',icon:'🔚',color:'#9370db'},card_played:{name:'打出卡牌时',icon:'🃏',color:'#ff69b4'},on_card_played:{name:'打出卡牌时',icon:'🃏',color:'#ff69b4'},on_discard:{name:'弃牌时',icon:'🗑️',color:'#6b7280'},take_damage:{name:'受到伤害时',icon:'💥',color:'#ff4444'},take_heal:{name:'受到治疗时',icon:'💚',color:'#22c55e'},lust_increase:{name:'欲望增加时',icon:'💖',color:'#ec4899'},lust_decrease:{name:'欲望减少时',icon:'💙',color:'#3b82f6'},deal_damage:{name:'造成伤害时',icon:'⚔️',color:'#dc2626'},deal_heal:{name:'造成治疗时',icon:'🌟',color:'#16a34a'},deal_lust_increase:{name:'造成欲望增加时',icon:'💕',color:'#f97316'},deal_lust_decrease:{name:'造成欲望减少时',icon:'🧊',color:'#0ea5e9'},gain_buff:{name:'获得增益时',icon:'✨',color:'#10b981'},gain_debuff:{name:'获得减益时',icon:'🌫️',color:'#ef4444'},ability_gain:{name:'获得能力时',icon:'🎯',color:'#8b5cf6'},lose_buff:{name:'失去增益时',icon:'💨',color:'#6b7280'},lose_debuff:{name:'失去减益时',icon:'🌈',color:'#8b5cf6'},enemy_gain_buff:{name:'对方获得增益时',icon:'👥✨',color:'#f59e0b'},enemy_gain_debuff:{name:'对方获得减益时',icon:'👥🌫️',color:'#84cc16'},enemy_lose_buff:{name:'对方失去增益时',icon:'👥💨',color:'#06b6d4'},enemy_lose_debuff:{name:'对方失去减益时',icon:'👥🌈',color:'#d946ef'},passive:{name:'被动效果',icon:'⭐',color:'#a855f7'}};constructor(){this.parser=s.h.getInstance(),this.statusManager=n.b.getInstance()}static getInstance(){return i.instance||(i.instance=new i),i.instance}parseEffectToTags(e,t){if(!e||''===e.trim())return[];const a=this.parser.parseEffectString(e),n=[];for(const e of a){if(!e.isValid){n.push({text:`错误: ${e.raw}`,icon:'❌',color:'#ff4444',category:'harmful'});continue}const a=this.convertExpressionToTags(e,t);n.push(...a)}return n}parseTriggeredEffectToTags(e,t,a){if(!t||''===t.trim())return[];const n=this.parser.parseEffectString(t),s=[],i=this.prefixDisplayConfig[e];i&&s.push({text:i.name,color:i.color,icon:i.icon,category:'special'});const r=[];for(const e of n){if(!e.isValid){r.push(`错误: ${e.raw}`);continue}const t=this.convertExpressionToTags(e,a);r.push(...t.map((e=>e.text)))}return r.length>0&&s.push({text:r.join('，'),color:'#e2e8f0',icon:'⚡',category:'special'}),s}convertExpressionToTags(e,t){const a=[];if(e.prefix){const n=this.prefixDisplayConfig[e.prefix];let s='',i='⚡';if('status'===e.attribute){const a=this.convertStatusEffectToTags(e,t);s=a.map((e=>e.text)).join('，'),a.length>0&&(i=a[0].icon)}else if('narrate'===e.attribute)s=`叙事: ${e.value}`,i='📖';else{const a=this.convertAttributeEffectToTags(e,t);s=a.map((e=>e.text)).join('，'),a.length>0&&(i=a[0].icon)}n&&s&&a.push({text:`${n.name}: ${s}`,icon:`${n.icon}${i}`,color:n.color,category:'special'})}else if(e.isConditional){const n=this.convertConditionalExpressionToTags(e,t);a.push(...n)}else if('ability'===e.attribute){const n=this.convertAbilityEffectToTags(e,t);a.push(...n)}else if('status'===e.attribute){const n=this.convertStatusEffectToTags(e,t);a.push(...n)}else if('narrate'===e.attribute)a.push({text:`叙事: ${e.value}`,icon:'📖',color:'#9370db',category:'utility'});else if(e.selector){const n=this.convertCardOperationToTags(e,t);a.push(...n)}else{const n=this.convertAttributeEffectToTags(e,t);a.push(...n)}return a}convertConditionalExpressionToTags(e,t){if(!e.isConditional||!e.condition)return[];let a=e.description;if(!a){const t=this.translateCondition(e.condition),n=e.trueEffect?this.parseEffectDescription(e.trueEffect):'';if(e.falseEffect&&''!==e.falseEffect.trim()){a=`如果${t}，则${n}；否则${this.parseEffectDescription(e.falseEffect)}`}else a=`如果${t}，则${n}`}const n=e.condition.includes('&&')||e.condition.includes('||')||e.falseEffect;return[{text:a,icon:n?'🔀':'❓',color:n?'#9333ea':'#8b5cf6',category:'special'}]}translateCondition(e){let t=this.replaceVariablesInExpression(e);return t=t.replace(/>=/g,'≥').replace(/<=/g,'≤').replace(/==/g,'=').replace(/!=/g,'≠').replace(/>/g,'＞').replace(/</g,'＜'),t}replaceVariablesInExpression(e){const t=a(689),n=t&&t.variableDisplayMap||{};let s=e;return s=s.replace(/(ME|OP)\\.(\\w+)/g,((_,e,t)=>`${'ME'===e?'己方':'对方'}的${n[t]||this.getAttributeDisplayName(t)||t}`)),Object.entries(n).forEach((([e,t])=>{const a=new RegExp(`\\\\b${e}\\\\b`,'g');s=s.replace(a,t)})),s}convertAbilityEffectToTags(e,t){const a=e.value.toString(),n=a.match(/^([\\w_]+)\\((.+)\\)$/);if(n){const[,e,a]=n,s=this.prefixDisplayConfig[e];if(!s)return console.warn(`未找到触发条件配置: ${e}`),[{text:`${e}: ${a}`,icon:'⚡',color:'#a855f7',category:'special'}];try{const e=this.parser.parseEffectString(a),n=[];for(const a of e)if(a.isValid)if(a.isConditional){const e=this.convertConditionalExpressionToTags(a,t);e.length>0?n.push(...e.map((e=>e.text))):a.description?n.push(a.description):n.push(a.raw)}else if('status'===a.attribute){const e=this.convertStatusEffectToTags(a,t);n.push(...e.map((e=>e.text)))}else if('narrate'===a.attribute)n.push(`叙事: ${a.value}`);else if(a.selector){const e=this.convertCardOperationToTags(a,t);n.push(...e.map((e=>e.text)))}else{const e=this.convertAttributeEffectToTags(a,t);n.push(...e.map((e=>e.text)))}else n.push(a.raw);const i=n.length>0?n.join('，'):a;return[{text:`${s.name}: ${i}`,icon:`${s.icon}⚡`,color:s.color,category:'special'}]}catch(e){return console.warn('解析能力内部效果失败:',e),[{text:`${s.name}: ${a}`,icon:`${s.icon}⚡`,color:s.color,category:'special'}]}}return[{text:`能力: ${a}`,icon:'⭐',color:'#a855f7',category:'special'}]}convertCardOperationToTags(e,t){const a=this.getSelectorDescription(e.selector||'');switch(e.attribute){case'discard':const t='number'==typeof e.value?e.value:1;return[{text:1===t?`弃掉${a}的卡牌`:`弃掉${a}的${t}张卡牌`,icon:'🗑️',color:'#6b7280',category:'harmful'}];case'exile':return[{text:`放逐${a}的卡牌`,icon:'🔥',color:'#ef4444',category:'harmful'}];case'reduce_cost':return[{text:/^(所有手牌|所有抽牌堆|所有弃牌堆|全部卡牌)/.test(a)?`${a}费用减少${e.value}`:`${a}的卡牌费用减少${e.value}`,icon:'⚡',color:'#ffd700',category:'beneficial'}];case'copy_card':{let e=`复制${a}的卡牌`;return/手牌选择/.test(a)&&(e='复制一张手牌'),/抽牌堆选择/.test(a)&&(e='复制抽牌堆中的一张牌'),/弃牌堆选择/.test(a)&&(e='复制弃牌堆中的一张牌'),/手牌随机/.test(a)&&(e='复制随机手牌'),[{text:e,icon:'📄',color:'#4a9eff',category:'beneficial'}]}case'trigger_effect':return[{text:`${a}的卡牌下次使用效果触发两次`,icon:'⚡⚡',color:'#ff6b6b',category:'beneficial'}];default:return[{text:`${e.attribute}.${e.selector}`,icon:'❓',color:'#888888',category:'neutral'}]}}getSelectorDescription(e){const{describeSelector:t}=a(95);return t(e)}convertStatusEffectToTags(e,t){if('apply'!==e.operator)return[];let a,n=1;if('string'==typeof e.value&&e.value.includes(':')){const t=e.value.split(':');a=t[0],n=parseInt(t[1])||1}else a=e.value;const s=this.statusManager.getStatusDefinition(a);if(!s)return[{text:`未知状态: ${a}`,icon:'❓',color:'#888888',category:'neutral'}];const i=this.getStatusGameText(e,s,t,n),r=this.isStatusGameActionPositive(e,s,t),o=r?'beneficial':'harmful',c=r?'#44ff44':'#ff4444';return[{text:i,icon:s.emoji,color:c,category:o}]}getStatusGameText(e,t,a,n){const s=a?.isPlayerCard??!0,i=a?.isStatusDisplay??!1;let r;r='ME'===e.target?'player':'OP'===e.target||s?'enemy':'player';let o=n??1;if(!n&&'string'==typeof e.value&&e.value.includes(':')){const t=e.value.split(':');o=parseInt(t[1])||1}let c='';return c=i?t.name:'player'===r&&s?`获得${t.name}`:'enemy'===r&&s||'player'!==r||s?`对方获得${t.name}`:`我方获得${t.name}`,o>1?c+=` ${o}层`:i&&(c+=` ${o}`),c}isStatusGameActionPositive(e,t,a){const n=a?.isPlayerCard??!0,s='player'===(e.target||(n?'enemy':'player'));return'buff'===t.type?s:'debuff'===t.type&&!s}playerOnlyAttributes=new Set(['energy','draw','discard','max_energy']);convertAttributeEffectToTags(e,t){if('ability'===e.attribute&&'add'===e.operator){const t=e.value.toString(),a=t.match(/^([\\w_]+)\\((.+)\\)$/);if(a){const[,e,t]=a,n=this.prefixDisplayConfig[e];return[{text:`${n?n.name:e}: ${this.parseEffectDescription(t)}`,icon:'🔮',color:'#9370db',category:'special'}]}return[{text:t,icon:'🔮',color:'#9370db',category:'special'}]}if('add_to_hand'===e.attribute||'add_to_deck'===e.attribute){const t='add_to_hand'===e.attribute?'手牌':'抽牌堆',a=e.value;let n='未知卡牌';return'object'==typeof a&&null!==a&&'name'in a?n=a.name:'string'==typeof a&&(n=a),[{text:`加入${t}\"${n}\"`,icon:'🃏',color:'#4ade80',category:'beneficial'}]}const a=this.attributeDisplayConfig[e.attribute];if(!a)return[{text:`${e.attribute} ${e.operator} ${e.value}`,icon:'❓',color:'#888888',category:'neutral'}];let n;if(e.isVariableReference||'string'==typeof e.value&&this.isVariableReference(e.value)){const n=this.getGameActionTextForVariableReference(e,t),s=this.isGameActionPositive(e,t);return[{text:n,icon:s?a.positiveIcon:a.negativeIcon,color:s?a.positiveColor:a.negativeColor,category:s?'beneficial':'harmful'}]}if('number'==typeof e.value)n=e.value;else if(e.isVariableReference)n=1;else if(n=parseFloat(e.value),isNaN(n))return[{text:`无效数值: ${e.value}`,icon:'❌',color:'#ff4444',category:'harmful'}];const s=this.getGameActionText(e,t),i=this.isGameActionPositive(e,t);return[{text:s,icon:i?a.positiveIcon:a.negativeIcon,color:i?a.positiveColor:a.negativeColor,category:i?'beneficial':'harmful'}]}getGameActionText(e,t){const{attribute:a,operator:n,value:s,target:i}=e;let r,o;'number'==typeof s?(r=s,o=s.toString()):e.isVariableReference?(o=this.getVariableDisplayName(s),r=1):(r=parseFloat(s),o=r.toString());const c=t?.isPlayerCard??!0;if(this.playerOnlyAttributes.has(a)){const e='';return this.getAttributeActionText(a,n,o,e)}let l;l='ME'===i?'player':'OP'===i?'enemy':t?.isStatusDisplay?'self':c?'enemy':'player';const d=this.getGameTargetPrefix(l,c);return this.getAttributeActionText(a,n,o,d,e)}getAttributeActionText(e,t,a,n,s){const i='string'==typeof a?a:a.toString(),r='number'==typeof a?a:parseFloat(a);if('string'==typeof a&&isNaN(r))return`${n}${this.getAttributeDisplayName(e)}${this.getOperatorSymbol(t)}${i}`;switch(e){case'hp':return this.getHealthActionText(t,r,n);case'lust':return this.getLustActionText(t,r,n);case'energy':return this.getEnergyActionText(t,r,n);case'block':return this.getBlockActionText(t,r,n);case'max_hp':return this.getMaxHealthActionText(t,r,n);case'max_lust':return this.getMaxLustActionText(t,r,n);case'max_energy':return this.getMaxEnergyActionText(t,r,n);case'draw':return this.getDrawActionText(t,r);case'discard':return this.getDiscardActionText(t,r,n);case'damage_modifier':return this.getDamageModifierActionText(t,r,n);case'lust_damage_modifier':return this.getLustDamageModifierActionText(t,r,n);case'damage_taken_modifier':return this.getDamageTakenModifierActionText(t,r,n);case'lust_damage_taken_modifier':return this.getLustDamageTakenActionText(t,r,n);case'block_modifier':return this.getBlockModifierActionText(t,r,n);case'add_to_hand':return s?this.getAddCardActionText(s,'手牌'):`${n}添加卡牌到手牌`;case'add_to_deck':return s?this.getAddCardActionText(s,'抽牌堆'):`${n}添加卡牌到抽牌堆`;default:return`${n}${e}${this.getOperatorSymbol(t)}${r}`}}getGameTargetPrefix(e,t){return'player'===e?t?'':'我方':'enemy'===e?'对方':'self'===e?'':'对方'}getHealthActionText(e,t,a){switch(e){case'+':return`${a}治疗${t}点`;case'-':return`${a}伤害${t}点`;case'*':return`${a}生命×${t}`;case'/':return`${a}生命÷${t}`;case'=':return`${a}生命=${t}`;default:return`${a}生命${e}${t}`}}getLustActionText(e,t,a){switch(e){case'+':return`${a}欲望+${t}`;case'-':return`${a}欲望-${t}`;case'*':return`${a}欲望×${t}`;case'/':return`${a}欲望÷${t}`;case'=':return`${a}欲望=${t}`;default:return`${a}欲望${e}${t}`}}getEnergyActionText(e,t,a){switch(e){case'+':return a?`${a}获得${t}点能量`:`获得${t}点能量`;case'-':return a?`${a}失去${t}点能量`:`失去${t}点能量`;case'*':return`${a}能量×${t}`;case'/':return`${a}能量÷${t}`;case'=':return`${a}能量=${t}`;default:return`${a}能量${e}${t}`}}getBlockActionText(e,t,a){switch(e){case'+':return a?`${a}获得${t}点格挡`:`获得${t}点格挡`;case'-':return a?`${a}失去${t}点格挡`:`失去${t}点格挡`;default:return`${a}格挡${e}${t}`}}getMaxHealthActionText(e,t,a){switch(e){case'+':return a?`${a}最大生命值+${t}`:`最大生命值+${t}`;case'-':return a?`${a}最大生命值-${t}`:`最大生命值-${t}`;default:return`${a}最大生命值${e}${t}`}}getMaxLustActionText(e,t,a){switch(e){case'+':return a?`${a}最大欲望值+${t}`:`最大欲望值+${t}`;case'-':return a?`${a}最大欲望值-${t}`:`最大欲望值-${t}`;default:return`${a}最大欲望值${e}${t}`}}getMaxEnergyActionText(e,t,a){switch(e){case'+':return`最大能量+${t}`;case'-':return`最大能量-${t}`;default:return`最大能量${e}${t}`}}getDrawActionText(e,t){switch(e){case'+':return`抽${t}张牌`;case'-':return`少抽${t}张牌`;default:return`抽牌${e}${t}`}}getDiscardActionText(e,t,a){return'+'===e?a?`${a}弃${t}张牌`:`弃${t}张牌`:`${a}弃牌${e}${t}`}isGameActionPositive(e,t){const{attribute:a,operator:n,target:s}=e,i='player'===(s||(t?.isPlayerCard??!0?'enemy':'player'));switch(a){case'hp':case'energy':case'max_energy':case'max_hp':case'max_lust':case'block':if('+'===n)return i;if('-'===n)return!i;break;case'lust':if('+'===n)return!i;if('-'===n)return i;break;case'draw':return'+'===n;case'discard':if('+'===n)return!i}return!1}getOperatorSymbol(e){switch(e){case'+':return'+';case'-':return'-';case'*':return'×';case'/':return'÷';case'=':return'=';default:return e}}_getTargetDisplayText(e,t){if(!e){return t?.isPlayerCard??!0?'':'我方的'}switch(e){case'player':return'我方的';case'enemy':return'对方的';default:return''}}_getOperatorDisplayText(e,t){switch(e){case'+':return`+${t}`;case'-':return`-${t}`;case'*':return`×${t}`;case'/':return`÷${t}`;case'=':return`=${t}`;default:return`${e}${t}`}}createEffectTagsHTML(e){return 0===e.length?'':'<div class=\"effect-tags-container\">'+e.map((e=>`\\n        <span class=\"effect-tag effect-${e.category}\" style=\"\\n          background: ${e.color}20;\\n          border: 1px solid ${e.color};\\n          color: ${e.color};\\n          padding: 2px 6px;\\n          border-radius: 12px;\\n          font-size: 10px;\\n          font-weight: 600;\\n          margin: 2px;\\n          display: inline-block;\\n          white-space: nowrap;\\n          line-height: 1.3;\\n          box-shadow: 0 1px 2px rgba(0,0,0,0.1);\\n        \">\\n          ${e.icon} ${e.text}\\n        </span>\\n      `)).join('')+'</div>'}createCompactEffectTagsHTML(e){return 0===e.length?'':'<div class=\"effect-tags-container compact\">'+e.map((e=>`\\n        <span class=\"effect-tag compact effect-${e.category}\" style=\"\\n          background: ${e.color}15;\\n          border: 1px solid ${e.color}80;\\n          color: ${e.color};\\n          padding: 1px 4px;\\n          border-radius: 8px;\\n          font-size: 9px;\\n          font-weight: 500;\\n          margin: 1px;\\n          display: inline-block;\\n          white-space: nowrap;\\n          line-height: 1.2;\\n          max-width: 140px;\\n          overflow: hidden;\\n          text-overflow: ellipsis;\\n        \">\\n          ${e.icon} ${e.text}\\n        </span>\\n      `)).join('')+'</div>'}createWrappedEffectTagsHTML(e){return 0===e.length?'':'<div class=\"effect-tags-container wrapped\">'+e.map((e=>`\\n        <span class=\"effect-tag wrapped effect-${e.category}\" style=\"\\n          background: ${e.color}12;\\n          border: 1px solid ${e.color}66;\\n          color: ${e.color};\\n          padding: 4px 6px;\\n          border-radius: 8px;\\n          font-size: 11px;\\n          font-weight: 600;\\n          margin: 2px 0;\\n          display: block;\\n          white-space: normal;\\n          line-height: 1.4;\\n          word-break: break-word;\\n          overflow: visible;\\n        \">\\n          ${e.icon} ${e.text}\\n        </span>\\n      `)).join('')+'</div>'}getDamageModifierActionText(e,t,a){switch(e){case'+':return`${a}造成伤害+${t}`;case'-':if(t>0&&t<1){return`${a}造成伤害-${Math.round(100*t)}%`}return`${a}造成伤害-${t}`;case'*':if(t<1){return`${a}造成伤害-${Math.round(100*(1-t))}%`}return`${a}造成伤害×${t}`;case'/':return`${a}造成伤害÷${t}`;case'=':return`${a}造成伤害=${t}`;default:return`${a}造成伤害修饰${e}${t}`}}getLustDamageModifierActionText(e,t,a){switch(e){case'+':return`${a}欲望伤害+${t}`;case'-':return`${a}欲望伤害-${t}`;case'*':return`${a}欲望伤害×${t}`;case'/':return`${a}欲望伤害÷${t}`;case'=':return`${a}欲望伤害=${t}`;default:return`${a}欲望伤害修饰${e}${t}`}}getDamageTakenModifierActionText(e,t,a){switch(e){case'+':return`${a}受到伤害+${t}`;case'-':return`${a}受到伤害-${t}`;case'*':if(t>0&&t<1){return`${a}受到伤害-${Math.round(100*(1-t))}%`}if(t>1){return`${a}受到伤害+${Math.round(100*(t-1))}%`}return`${a}受到伤害×${t}`;case'/':return`${a}受到伤害÷${t}`;case'=':return`${a}受到伤害=${t}`;default:return`${a}受到伤害修饰${e}${t}`}}getLustDamageTakenActionText(e,t,a){switch(e){case'+':return`${a}受到欲望伤害+${t}`;case'-':return`${a}受到欲望伤害-${t}`;case'*':return`${a}受到欲望伤害×${t}`;case'/':return`${a}受到欲望伤害÷${t}`;case'=':return`${a}受到欲望伤害=${t}`;default:return`${a}受到欲望伤害修饰${e}${t}`}}getBlockModifierActionText(e,t,a){switch(e){case'+':return`${a}格挡+${t}`;case'-':return`${a}格挡-${t}`;case'*':return`${a}格挡×${t}`;case'/':return`${a}格挡÷${t}`;case'=':return`${a}格挡=${t}`;default:return`${a}格挡修饰${e}${t}`}}getAddCardActionText(e,t){const a=e.value;return'object'==typeof a&&null!==a&&'name'in a?`获得卡牌\"${a.name}\"(加入${t})`:'string'==typeof a?`获得卡牌\"${a}\"(加入${t})`:`获得卡牌(加入${t})`}getVariableDisplayName(e){switch(e){case'max_hp':return'最大生命值';case'max_lust':return'最大欲望值';case'max_energy':return'最大能量';case'current_hp':return'当前生命值';case'current_lust':return'当前欲望值';case'current_energy':return'当前能量';case'hand_size':return'手牌数';case'deck_size':return'抽牌堆数';case'discard_pile_size':return'弃牌堆数';case'cards_played_this_turn':return'本回合出牌数';default:return e}}getAttributeDisplayName(e){const t=this.attributeDisplayConfig[e];return t?t.name:e}parseEffectDescription(e){try{const t=this.parser.parseEffectString(e),a=[];for(const n of t){if(!n.isValid){a.push(n.raw||e);continue}const t=this.convertExpressionToTags(n,{isStatusDisplay:!0});t.length>0?a.push(t[0].text):a.push(n.raw||e)}return a.join(', ')}catch(t){return this.parseEffectDescriptionSimple(e)}}parseEffectDescriptionSimple(e){try{const t=this.splitEffectsByCommaSafe(e),a=[];for(const e of t){if(e.includes('ME.status apply')||e.includes('OP.status apply')){const t=e.match(/(ME|OP)\\.status apply (\\w+)(?:\\s+(\\d+))?/);if(t){const[,e,n,s='1']=t,i='ME'===e?'己方':'对方';a.push(`${i}获得${n} ${s}层`);continue}}if(e.includes('ME.')||e.includes('OP.')){const t=e.match(/(ME|OP)\\.(\\w+)\\s*([+\\-=])\\s*(.+)/);if(t){const[,e,n,s,i]=t,r='ME'===e?'己方':'对方',o=this.getAttributeDisplayName(n),c='+'===s?'增加':'-'===s?'减少':'设置为',l=this.getValueDisplayText(i);a.push(`${r}${o}${c}${l}`);continue}}const t=e.match(/(\\w+)\\s*([+\\-=])\\s*(.+)/);if(t){const[,e,n,s]=t,i=this.getAttributeDisplayName(e),r='+'===n?'增加':'-'===n?'减少':'设置为',o=this.getValueDisplayText(s);a.push(`己方${i}${r}${o}`)}else a.push(e)}return a.join(', ')}catch(t){return e}}splitEffectsByCommaSafe(e){const t=[];let a='',n=0,s=0,i=0;for(let r=0;r<e.length;r++){const o=e[r];'('===o?n++:')'===o?n=Math.max(0,n-1):'{'===o?s++:'}'===o?s=Math.max(0,s-1):'['===o?i++:']'===o&&(i=Math.max(0,i-1)),','===o&&0===n&&0===s&&0===i?(a.trim()&&t.push(a.trim()),a=''):a+=o}return a.trim()&&t.push(a.trim()),t}getValueDisplayText(e){return'max_hp'===e?'最大生命值':'max_lust'===e?'最大欲望值':'max_energy'===e?'最大能量':e}getGameActionTextForVariableReference(e,t){const a=e.value,n=e.target||'OP',s=e.operator,i=e.attribute,r=this.translateMathExpressionToChinese(a),o='ME'===n?'己方的':'对方的',c=this.getAttributeDisplayName(i);let l='';return l='+'===s||'add'===s?`${o}${c}+${r}`:'-'===s||'subtract'===s?`${o}${c}-${r}`:'*'===s||'multiply'===s?`${o}${c}×${r}`:'/'===s||'divide'===s?`${o}${c}÷${r}`:'='===s?`${o}${c}=${r}`:`${o}${r}`,l}translateMathExpressionToChinese(e){let t=e;return t=t.replace(/ME\\./g,'己方的'),t=t.replace(/OP\\./g,'对方的'),t=t.replace(/max_hp/g,'最大生命值'),t=t.replace(/max_lust/g,'最大欲望值'),t=t.replace(/max_energy/g,'最大能量'),t=t.replace(/current_hp|hp/g,'当前生命值'),t=t.replace(/current_lust|lust/g,'当前欲望值'),t=t.replace(/current_energy|energy/g,'当前能量'),t=t.replace(/block/g,'格挡值'),t=t.replace(/\\*/g,' × '),t=t.replace(/\\//g,' ÷ '),t=t.replace(/\\+/g,' + '),t=t.replace(/-/g,' - '),t}isVariableReference(e){return/^(max_hp|max_lust|max_energy|hp|lust|energy|block|current_hp|current_lust|current_energy)$/.test(e)||/^(ME|OP)\\.(max_hp|max_lust|max_energy|hp|lust|energy|block|current_hp|current_lust|current_energy)$/.test(e)||/[+\\-*/()]|ME\\.|OP\\.|max_hp|max_lust|max_energy|hp|lust|energy|block/.test(e)}getVariableActualValue(e,t){try{if(this.isMathExpression(e))return this.evaluateMathExpression(e,t);let n;if(window.GameStateManager&&(n=window.GameStateManager.getInstance()),!n)try{const e=a(113);n=e.GameStateManager?.getInstance()}catch(e){console.warn('无法通过require获取GameStateManager:',e)}if(!n)return console.warn('无法获取游戏状态管理器'),0;if(!n.getGameState())return console.warn('无法获取游戏状态'),0;let s;if(s='OP'===t?n.getEnemy():n.getPlayer(),!s)return console.warn('无法获取目标实体:',t),0;let i=0;switch(e){case'max_hp':i=s.maxHp||0;break;case'max_lust':i=s.maxLust||0;break;case'max_energy':i=s.maxEnergy||0;break;case'hp':case'current_hp':i=s.currentHp||s.hp||0;break;case'lust':case'current_lust':i=s.currentLust||s.lust||0;break;case'energy':case'current_energy':i=s.energy||0;break;case'block':i=s.block||0;break;default:console.warn('未知变量名:',e),i=0}return console.log(`获取变量实际值: ${e} (${t||'ME'}) = ${i}`),i}catch(e){return console.error('获取变量实际值失败:',e),0}}isMathExpression(e){return/[+\\-*/()]/.test(e)||e.includes('ME.')||e.includes('OP.')}evaluateMathExpression(e,t){try{let a=e;const n=/(ME|OP)\\.([a-zA-Z_][a-zA-Z0-9_]*)/g;let s;for(;null!==(s=n.exec(e));){const[e,t,n]=s,i=this.getSimpleVariableValue(n,t);a=a.replace(e,i.toString())}n.lastIndex=0;const i=/\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b/g,r=a.replace(i,((a,n)=>{if(/^\\d+$/.test(a))return a;if(e.includes(`ME.${n}`)||e.includes(`OP.${n}`))return a;return this.getSimpleVariableValue(n,t||'ME').toString()}));return this.safeEvaluate(r)}catch(t){return console.error('数学表达式计算失败:',t,e),0}}getSimpleVariableValue(e,t){try{let a,n;if(window.GameStateManager&&(a=window.GameStateManager.getInstance()),!a)return 0;if(n='OP'===t?a.getEnemy():a.getPlayer(),!n)return 0;switch(e){case'max_hp':return n.maxHp||0;case'max_lust':return n.maxLust||0;case'max_energy':return n.maxEnergy||0;case'hp':case'current_hp':return n.currentHp||n.hp||0;case'lust':case'current_lust':return n.currentLust||n.lust||0;case'energy':case'current_energy':return n.energy||0;case'block':return n.block||0;default:return 0}}catch(e){return 0}}safeEvaluate(e){try{if(!/^[\\d+\\-*/.() ]+$/.test(e))return console.warn('不安全的数学表达式:',e),0;const t=new Function('return '+e)();return'number'!=typeof t||isNaN(t)?0:Math.round(t)}catch(t){return console.error('数学表达式计算错误:',t,e),0}}getGameActionTextWithActualValue(e,t,a){const{attribute:n,operator:s,target:i}=e,r=a?.isPlayerCard??!1,o=i||(r?'ME':'OP'),c=this.getGameTargetPrefix(o,r),l=`${this.getVariableDisplayName(e.value)}(${t})`;return this.getAttributeActionText(n,s,l,c,e)}}}},t={};function a(n){var s=t[n];if(void 0!==s)return s.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,a),i.exports}a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{'undefined'!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:'Module'}),Object.defineProperty(e,'__esModule',{value:!0})};var n=a(113);class s{static logContainer=null;static maxLogs=50;static init(){if(0===$('#battle-log').length){const e='\\n        <div id=\"battle-log\" style=\"\\n          position: fixed;\\n          top: 20px;\\n          left: 20px;\\n          width: 300px;\\n          max-height: 200px;\\n          background: rgba(0, 0, 0, 0.9);\\n          border: 2px solid #444;\\n          border-radius: 8px;\\n          padding: 10px;\\n          overflow-y: auto;\\n          z-index: 1000;\\n          font-size: 12px;\\n          color: white;\\n          display: none;\\n        \">\\n          <div class=\"log-header\" style=\"\\n            font-weight: bold;\\n            margin-bottom: 5px;\\n            padding-bottom: 5px;\\n            border-bottom: 1px solid #666;\\n            color: #aaa;\\n            display: flex;\\n            justify-content: space-between;\\n            align-items: center;\\n          \">\\n            <span>战斗日志</span>\\n            <button id=\"close-battle-log\" style=\"\\n              background: none;\\n              border: none;\\n              color: #aaa;\\n              cursor: pointer;\\n              font-size: 14px;\\n              padding: 0;\\n              margin: 0;\\n            \">✕</button>\\n          </div>\\n          <div class=\"log-content\"></div>\\n        </div>\\n      ';$('body').append(e),$('#close-battle-log').on('click',(()=>{$('#battle-log').fadeOut(200)}))}this.logContainer=$('#battle-log .log-content')}static addLog(e,t='info',a){this.logContainer||this.init();const s=n.GameStateManager.getInstance().getGameState(),i=`[第${s?.currentTurn||1}回合]`;let r='#ffffff',o='';switch(t){case'damage':r='#ff6666',o='⚔️';break;case'heal':r='#66ff66',o='💚';break;case'action':r='#66aaff',o='🎯';break;case'system':r='#ffaa66',o='⚙️';break;default:r='#ffffff',o='ℹ️'}let c='';if(a){c=`<span class=\"log-source\" style=\"color: #aaa; font-size: 9px; margin-right: 4px;\">${{card:'🃏',relic:'🔮',ability:'⚡',status:'✨'}[a.type]}${a.name}</span>`}const l=$(`\\n      <div class=\"log-entry\" style=\"\\n        margin-bottom: 3px;\\n        padding: 2px 0;\\n        color: ${r};\\n        line-height: 1.3;\\n        border-left: 2px solid ${r};\\n        padding-left: 5px;\\n        margin-left: 3px;\\n        cursor: pointer;\\n      \" ${a?.details?`title=\"${a.details}\"`:''}>\\n        <span class=\"log-time\" style=\"color: #888; font-size: 10px;\">${i}</span>\\n        ${c}\\n        <span class=\"log-icon\">${o}</span>\\n        <span class=\"log-message\">${e}</span>\\n      </div>\\n    `);a?.details&&l.on('click',(function(){const e=$(this),t='.log-details';0===e.find(t).length?e.append(`\\n            <div class=\"log-details\" style=\"\\n              margin-top: 5px;\\n              padding: 5px;\\n              background: rgba(255,255,255,0.1);\\n              border-radius: 4px;\\n              font-size: 10px;\\n              color: #ccc;\\n            \">${a.details}</div>\\n          `):e.find(t).remove()})),this.logContainer.append(l);const d=this.logContainer.find('.log-entry');d.length>this.maxLogs&&d.first().remove();const f=$('#battle-log');f.scrollTop(f[0].scrollHeight),l.css({opacity:0}).animate({opacity:1},300)}static logPlayerAction(e,t){this.addLog(`玩家${e}: ${t}`,'action')}static logEnemyAction(e,t){this.addLog(`敌人使用了 ${e}: ${t}`,'action')}static logDamage(e,t,a,n){a!==n?this.addLog(`${e} 对 ${t} 造成 ${n} 点伤害 (原始伤害: ${a})`,'damage'):this.addLog(`${e} 对 ${t} 造成 ${a} 点伤害`,'damage')}static logHeal(e,t){this.addLog(`${e} 恢复了 ${t} 点生命值`,'heal')}static logBlock(e,t){this.addLog(`${e} 获得了 ${t} 点格挡`,'info')}static logStatusEffect(e,t,a,n){this.addLog(`${e} 获得了 ${t} ${a}层`,'info')}static logTurnStart(e){this.addLog(`=== 第 ${e} 回合开始 ===`,'system')}static logTurnEnd(){this.addLog('回合结束','system')}static logDrawCards(e){this.addLog(`抽取了 ${e} 张卡牌`,'info')}static logDiscardCards(e){this.addLog(`弃置了 ${e} 张手牌`,'info')}static logDiscardCardDetail(e,t,a){const n=`名称: ${e} | 费用: ${String(t)}${a?`\\n描述: ${a}`:''}`;this.addLog(`弃置了卡牌：${e}`,'action',{type:'card',name:e,details:n})}static logBattleResult(e){const t='victory'===e?'🎉 战斗胜利！':'💀 战斗失败...';this.addLog(t,'system')}static clear(){this.logContainer&&this.logContainer.empty()}static toggle(){const e=$('#battle-log');e.is(':visible')?e.fadeOut(200):e.fadeIn(200)}static logRelicEffect(e,t){this.addLog(`遗物 ${e} 触发: ${t}`,'info')}static logEnergyChange(e,t=!0){const a=t?'获得':'消耗';this.addLog(`${a}了 ${e} 点能量`,'info')}static logLustDamage(e,t,a){this.addLog(`${e} 对 ${t} 造成 ${a} 点欲望伤害 💗`,'damage')}static logStatusEffect(e,t,a,n,s=!0){const i=s?'获得':'失去',r=a>1?` (${a}层)`:'';this.addLog(`${e} ${i}了 ${t}${r}`,'info')}static logLustOverflow(e,t){this.addLog(`${e} 欲望溢出！触发 ${t} 💋`,'system')}static logTurnStart(e,t){const a=t?'玩家':'敌人';this.addLog(`第 ${e} 回合开始 - ${a}回合`,'system')}static logDrawCards(e){this.addLog(`抽取了 ${e} 张卡牌 🃏`,'info')}static logDiscardCards(e){this.addLog(`弃置了 ${e} 张卡牌`,'info')}static logBattleResult(e){e?this.addLog('🎉 战斗胜利！','system'):this.addLog('💀 战斗失败...','system')}static logCardEffect(e,t){this.addLog(`${e} 效果: ${t}`,'action')}static logBlockExpired(e){this.addLog(`格挡失效，失去 ${e} 点格挡`,'info')}static logDeath(e){this.addLog(`${e} 被击败了！`,'system')}}class i{static instance;constructor(){}static getInstance(){return i.instance||(i.instance=new i),i.instance}damageQueue=[];lastDamageTime=0;DAMAGE_INTERVAL=150;showDamageNumber(e,t,a='damage'){const n=Date.now();this.damageQueue.push({target:e,damage:t,type:a,timestamp:n}),this.processDamageQueue()}processDamageQueue(){if(0===this.damageQueue.length)return;const e=Date.now();if(e-this.lastDamageTime<this.DAMAGE_INTERVAL)return void setTimeout((()=>this.processDamageQueue()),this.DAMAGE_INTERVAL);const t=this.damageQueue.shift();t&&(this.lastDamageTime=e,this.createPhysicalDamageAnimation(t.target,t.damage,t.type),this.damageQueue.length>0&&setTimeout((()=>this.processDamageQueue()),this.DAMAGE_INTERVAL))}createPhysicalDamageAnimation(e,t,a){let n='player'===e?'.player-card .character-stats':'.enemy-card .character-stats';if('block'===a){const t='player'===e?'#block-stat-container':'#enemy-block-container';$(t).length&&(n=t)}const s=$(n);if(0===s.length)return;let i='#ff4444',r='-',o='';switch(a){case'damage':i='#ff4444',r='-',o='💥';break;case'heal':i='#44ff44',r='+',o='💚';break;case'lust':i='#ff69b4',r='+',o='💗';break;case'block':i='#4169e1',r='-',o='🛡︎'}const c=s.offset();if(!c)return;const l=c.left+Math.random()*s.outerWidth(),d=c.top+Math.random()*s.outerHeight(),f=$(`\\n      <div class=\"physics-damage\" style=\"\\n        position: absolute;\\n        left: ${l}px;\\n        top: ${d}px;\\n        color: ${i};\\n        font-size: ${Math.min(20+t/5,36)}px;\\n        font-weight: bold;\\n        text-shadow: 2px 2px 4px rgba(0,0,0,0.8);\\n        pointer-events: none;\\n        z-index: 1000;\\n        font-family: 'ZCOOL KuaiLe', 'Noto Sans SC', 'Microsoft YaHei', sans-serif !important;\\n      \">\\n        ${o} ${r}${t}\\n      </div>\\n    `);$('body').append(f);let u=l,g=d,h=200*(Math.random()-.5),p=-150-100*Math.random();const m=Date.now(),y=()=>{const e=Date.now()-m;if(e>3e3)return void f.remove();const t=.016;p+=8,h*=.98,u+=h*t,g+=p*t;const a=$(window).width(),n=$(window).height();(u<=0||u>=a-50)&&(h=.6*-h,u=Math.max(0,Math.min(a-50,u))),g>=n-50&&(p=.6*-p,g=n-50,Math.abs(p)<50&&(p=0));const s=Math.max(0,1-e/3e3);f.css({left:u+'px',top:g+'px',opacity:s}),requestAnimationFrame(y)};requestAnimationFrame(y)}showPlayerDamageEffect(e='damage'){const t=$('.player-card');switch(t.removeClass('damage-flash lust-flash both-flash'),e){case'damage':t.addClass('damage-flash');break;case'lust':t.addClass('lust-flash');break;case'both':t.addClass('both-flash')}setTimeout((()=>{t.removeClass('damage-flash lust-flash both-flash')}),600)}showEnemyDamageEffect(e='damage'){const t=$('.enemy-card');switch(t.removeClass('damage-flash lust-flash both-flash'),e){case'damage':t.addClass('damage-flash');break;case'lust':t.addClass('lust-flash');break;case'both':t.addClass('both-flash')}setTimeout((()=>{t.removeClass('damage-flash lust-flash both-flash')}),600)}showLustEffectFlash(){const e=$('\\n      <div class=\"lust-flash-overlay\" style=\"\\n        position: fixed;\\n        top: 0;\\n        left: 0;\\n        width: 100vw;\\n        height: 100vh;\\n        background: radial-gradient(circle, rgba(255,255,255,0.9) 0%, rgba(255,255,255,0.3) 50%, transparent 100%);\\n        z-index: 9999;\\n        pointer-events: none;\\n        opacity: 0;\\n      \"></div>\\n    ');$('body').append(e),e.animate({opacity:1},80).animate({opacity:.2},60).animate({opacity:1},80).animate({opacity:.2},60).delay(200).animate({opacity:1},100).animate({opacity:0},800,(function(){$(this).remove()})),$('body').addClass('screen-shake'),setTimeout((()=>{$('body').removeClass('screen-shake')}),500)}shakeElement(e,t=300){const a=$(e);0!==a.length&&(a.addClass('shake-animation'),setTimeout((()=>{a.removeClass('shake-animation')}),t))}updateHealthBarWithAnimation(e,t,a){const n=a>0?t/a*100:0;let s,i;'player'===e?(s='.player-card .hp-fill',i='.player-card #player-hp'):(s='.enemy-card .hp-fill',i='.enemy-card #enemy-hp');const r=$(s);r.stop(!0,!1).animate({width:`${n}%`},500),$(i).text(`${t}/${a}`),r.removeClass('hp-low hp-critical'),n<=25?r.addClass('hp-critical'):n<=50&&r.addClass('hp-low')}updateLustBarWithAnimation(e,t,a){const n=a>0?t/a*100:0;let s,i;'player'===e?(s='.player-card .lust-fill',i='.player-card #player-lust'):(s='.enemy-card .lust-fill',i='.enemy-card #enemy-lust');const r=$(s);r.stop(!0,!1).animate({width:`${n}%`},300),$(i).text(`${t}/${a}`),r.removeClass('lust-high lust-critical'),n>=100?r.addClass('lust-critical'):n>=75&&r.addClass('lust-high')}animateCardPlay(e){return new Promise((t=>{e.addClass('card-playing'),e.animate({opacity:.7,transform:'scale(1.1) translateY(-20px)'},300,(()=>{e.animate({opacity:0,transform:'scale(0.8) translateY(-40px)'},200,(()=>{e.removeClass('card-playing'),t()}))}))}))}showCardBlockedNotification(e,t){const a=$(`\\n      <div class=\"card-blocked-notification\" style=\"\\n        position: fixed;\\n        top: 50%;\\n        left: 50%;\\n        transform: translate(-50%, -50%);\\n        background: rgba(0, 0, 0, 0.9);\\n        color: #ff6b6b;\\n        padding: 20px 30px;\\n        border-radius: 10px;\\n        border: 2px solid #ff6b6b;\\n        font-size: 16px;\\n        font-weight: bold;\\n        z-index: 10000;\\n        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.8);\\n        font-family: 'ZCOOL KuaiLe', 'Noto Sans SC', 'Microsoft YaHei', sans-serif;\\n        text-align: center;\\n        min-width: 300px;\\n        opacity: 0;\\n      \">\\n        <div style=\"margin-bottom: 8px; font-size: 18px;\">🃏 卡牌无法使用</div>\\n        <div style=\"color: #ffd700; margin-bottom: 5px;\">${e}</div>\\n        <div style=\"color: #ffaa00; font-size: 14px;\">${t}</div>\\n      </div>\\n    `);$('body').append(a),a.animate({opacity:1},200),setTimeout((()=>{a.animate({opacity:0},300,(function(){$(this).remove()}))}),2e3)}showTurnBanner(e,t='#4299e1'){const a=$(`\\n      <div class=\"turn-banner\" style=\"\\n        position: fixed;\\n        top: 50%;\\n        left: 50%;\\n        transform: translate(-50%, -50%);\\n        background: ${t};\\n        color: white;\\n        padding: 20px 40px;\\n        border-radius: 10px;\\n        font-size: 24px;\\n        font-weight: bold;\\n        z-index: 2000;\\n        box-shadow: 0 8px 16px rgba(0,0,0,0.3);\\n        text-align: center;\\n      \">\\n        ${e}\\n      </div>\\n    `);$('body').append(a),a.css({opacity:0,transform:'translate(-50%, -50%) scale(0.5)'}).animate({opacity:1},200).css({transform:'translate(-50%, -50%) scale(1)'}),setTimeout((()=>{a.fadeOut(300,(function(){$(this).remove()}))}),1500)}showActionBanner(e,t='#38a169'){const a=$(`\\n      <div class=\"action-banner\" style=\"\\n        position: fixed;\\n        top: 40%;\\n        left: 50%;\\n        transform: translate(-50%, -50%);\\n        background: ${t};\\n        color: white;\\n        padding: 15px 30px;\\n        border-radius: 8px;\\n        font-size: 18px;\\n        font-weight: bold;\\n        z-index: 1500;\\n        box-shadow: 0 6px 12px rgba(0,0,0,0.3);\\n        text-align: center;\\n      \">\\n        ${e}\\n      </div>\\n    `);$('body').append(a),a.css({opacity:0,transform:'translate(-50%, -50%) scale(0.8)'}).animate({opacity:1},300).css({transform:'translate(-50%, -50%) scale(1)'}),setTimeout((()=>{a.fadeOut(400,(function(){$(this).remove()}))}),2e3)}showLustOverflowEffect(e,t){const a=$('\\n      <div style=\"\\n        position: fixed;\\n        top: 0;\\n        left: 0;\\n        width: 100%;\\n        height: 100%;\\n        background: rgba(255, 105, 180, 0.3);\\n        z-index: 3000;\\n        pointer-events: none;\\n        animation: lustFlash 2s ease-out;\\n      \"></div>\\n    ');$('body').append(a);const n=$(`\\n      <div style=\"\\n        position: fixed;\\n        top: 50%;\\n        left: 50%;\\n        transform: translate(-50%, -50%);\\n        background: linear-gradient(45deg, #ff1493, #ff69b4);\\n        color: white;\\n        padding: 20px 30px;\\n        border-radius: 15px;\\n        font-size: 20px;\\n        font-weight: bold;\\n        text-align: center;\\n        z-index: 3001;\\n        border: 4px solid #ff69b4;\\n        box-shadow: 0 12px 36px rgba(0,0,0,0.8);\\n        animation: lustPulse 2s infinite;\\n      \">\\n        <div style=\"font-size: 32px; margin-bottom: 10px;\">💋</div>\\n        <div>${t}</div>\\n      </div>\\n    `);$('body').append(n),setTimeout((()=>{a.remove(),n.remove()}),2e3)}async playVictoryAnimation(){this.showActionBanner('🎉 胜利！','#38a169')}async playDefeatAnimation(){this.showActionBanner('💀 失败...','#e53e3e')}showEnemyActionAnimation(e,t){$('.enemy-action-popup').remove();const a=$(`\\n      <div class=\"enemy-action-popup\">\\n        <div class=\"enemy-action-content\">\\n          <div class=\"enemy-action-name\">${e}</div>\\n          <div class=\"enemy-action-description\">${t}</div>\\n        </div>\\n      </div>\\n    `);$('body').append(a),a.css({opacity:0,transform:'translate(-50%, -50%) scale(0.8)'}).animate({opacity:1},300).css({transform:'translate(-50%, -50%) scale(1)'}),setTimeout((()=>{a.animate({opacity:0},300,(function(){$(this).remove()}))}),2e3),console.log(`⚔️ 显示敌人行动: ${e}`)}}var r=a(775);class o{static instance;animationManager;effectDisplay;constructor(){this.animationManager=i.getInstance(),this.effectDisplay=r.W.getInstance()}static getInstance(){return o.instance||(o.instance=new o),o.instance}showPlayerLustOverflow(e){console.log('💗 玩家欲望溢出:',e),this.animationManager.showLustOverflowEffect('player',e.name),this.showAutoLustOverflowPopup('player',e)}showEnemyLustOverflow(e){console.log('💔 敌人欲望溢出:',e),this.animationManager.showLustOverflowEffect('enemy',e.name),this.showAutoLustOverflowPopup('enemy',e)}showLustOverflowModal(e,t){$('.lust-overflow-modal').remove();const a=this.effectDisplay.parseEffectToTags(t.effect,{isPlayerCard:!1}),n=this.effectDisplay.createEffectTagsHTML(a),s=$(`\\n      <div class=\"lust-overflow-modal\">\\n        <div class=\"lust-overflow-overlay\"></div>\\n        <div class=\"lust-overflow-content\" style=\"border-color: ${'player'===e?'#ff1493':'#b71c1c'};\">\\n          <div class=\"lust-overflow-header\" style=\"background: ${'player'===e?'#ff69b4':'#dc143c'};\">\\n            <div class=\"overflow-icon\">💋</div>\\n            <h3>${'player'===e?'你':'敌人'}的欲望溢出！</h3>\\n            <button class=\"close-overflow-btn\">✕</button>\\n          </div>\\n          <div class=\"lust-overflow-body\">\\n            <div class=\"overflow-effect-name\">${t.name}</div>\\n            <div class=\"overflow-effect-description\">${t.description}</div>\\n            ${n?`<div class=\"overflow-effect-tags\">${n}</div>`:''}\\n          </div>\\n          <div class=\"lust-overflow-footer\">\\n            <button class=\"confirm-overflow-btn\">确认</button>\\n          </div>\\n        </div>\\n      </div>\\n    `);$('body').append(s),s.css({opacity:0}).animate({opacity:1},300),s.find('.close-overflow-btn, .confirm-overflow-btn, .lust-overflow-overlay').on('click',(()=>{this.closeLustOverflowModal()})),s.find('.lust-overflow-content').on('click',(e=>{e.stopPropagation()})),setTimeout((()=>{this.closeLustOverflowModal()}),3e3)}showAutoLustOverflowPopup(e,t){$('.auto-lust-overflow-popup').remove();const a='player'===e?'玩家':'敌人',n=$(`\\n      <div class=\"auto-lust-overflow-popup\">\\n        <div class=\"auto-lust-content\">\\n          <div class=\"auto-lust-header\">\\n            <div class=\"auto-lust-icon\">💗</div>\\n            <div class=\"auto-lust-title\">${a}欲望溢出！</div>\\n          </div>\\n          <div class=\"auto-lust-effect-name\">${t.name}</div>\\n          <div class=\"auto-lust-description\">${t.description}</div>\\n        </div>\\n      </div>\\n    `);$('body').append(n),n.css({opacity:0,transform:'translate(-50%, -50%) scale(0.8)'}).animate({opacity:1},300).css({transform:'translate(-50%, -50%) scale(1)'}),setTimeout((()=>{n.animate({opacity:0},300,(function(){$(this).remove()}))}),3e3),console.log(`💗 显示${a}欲望溢出弹窗: ${t.name}`)}closeLustOverflowModal(){const e=$('.lust-overflow-modal');e.length>0&&e.animate({opacity:0},200,(function(){$(this).remove()}))}updateLustOverflowDisplay(e,t){const a=$('player'===e?'.player-lust-overflow':'.enemy-lust-overflow');if(!a.length)return void this.createLustOverflowContainer(e);if(!t)return void a.hide();const n=this.effectDisplay.parseEffectToTags(t.effect,{isPlayerCard:!1}).slice(0,2).map((e=>`<span class=\"mini-effect-tag\" style=\"background: ${e.color}20; color: ${e.color}; border: 1px solid ${e.color};\">\\n        ${e.icon}\\n      </span>`)).join('');a.html(`\\n      <div class=\"lust-overflow-indicator\" title=\"${t.description}\">\\n        <div class=\"overflow-icon\">💋</div>\\n        <div class=\"overflow-name\">${t.name}</div>\\n        <div class=\"overflow-mini-tags\">${n}</div>\\n      </div>\\n    `).show(),a.off('click').on('click',(()=>{this.showLustOverflowModal(e,t)}))}createLustOverflowContainer(e){const t=$('player'===e?'.player-stats':'.enemy-stats');if(0===t.length)return void console.log(`${e}状态容器暂未准备好，跳过欲望溢出容器创建`);const a=$(`\\n      <div class=\"${'player'===e?'player-lust-overflow':'enemy-lust-overflow'} lust-overflow-container\" style=\"display: none;\">\\n        \\x3c!-- 欲望溢出效果将在这里显示 --\\x3e\\n      </div>\\n    `);t.append(a)}checkLustOverflow(e,t,a,n){t>=a&&n&&('player'===e?this.showPlayerLustOverflow(n):this.showEnemyLustOverflow(n))}resetLustOverflowDisplay(e){$('player'===e?'.player-lust-overflow':'.enemy-lust-overflow').hide().empty()}initializeLustOverflowSystem(){this.createLustOverflowContainer('player'),this.createLustOverflowContainer('enemy'),this.addLustOverflowStyles(),console.log('✅ 欲望溢出显示系统初始化完成')}addLustOverflowStyles(){if($('#lust-overflow-styles').length>0)return;$('head').append('\\n      <style id=\"lust-overflow-styles\">\\n        .lust-overflow-container {\\n          margin-top: 8px;\\n          padding: 6px;\\n          background: rgba(255, 105, 180, 0.1);\\n          border: 1px solid rgba(255, 105, 180, 0.3);\\n          border-radius: 6px;\\n          cursor: pointer;\\n          transition: all 0.3s ease;\\n        }\\n\\n        .lust-overflow-container:hover {\\n          background: rgba(255, 105, 180, 0.2);\\n          border-color: rgba(255, 105, 180, 0.5);\\n        }\\n\\n        .lust-overflow-indicator {\\n          display: flex;\\n          align-items: center;\\n          gap: 6px;\\n          font-size: 0.8em;\\n        }\\n\\n        .overflow-icon {\\n          font-size: 1.2em;\\n          filter: drop-shadow(0 0 4px rgba(255, 105, 180, 0.8));\\n        }\\n\\n        .overflow-name {\\n          font-weight: bold;\\n          color: #ff69b4;\\n          flex: 1;\\n        }\\n\\n        .overflow-mini-tags {\\n          display: flex;\\n          gap: 2px;\\n        }\\n\\n        .mini-effect-tag {\\n          padding: 1px 3px;\\n          border-radius: 4px;\\n          font-size: 0.7em;\\n          font-weight: bold;\\n        }\\n\\n        .lust-overflow-modal {\\n          position: fixed;\\n          top: 0;\\n          left: 0;\\n          width: 100%;\\n          height: 100%;\\n          z-index: 4000;\\n          display: flex;\\n          align-items: center;\\n          justify-content: center;\\n        }\\n\\n        .lust-overflow-overlay {\\n          position: absolute;\\n          top: 0;\\n          left: 0;\\n          width: 100%;\\n          height: 100%;\\n          background: rgba(0, 0, 0, 0.8);\\n          cursor: pointer;\\n        }\\n\\n        .lust-overflow-content {\\n          position: relative;\\n          background: linear-gradient(135deg, #2a1810, #3d2817);\\n          border: 3px solid #ff69b4;\\n          border-radius: 15px;\\n          width: 90%;\\n          max-width: 500px;\\n          box-shadow: 0 12px 36px rgba(0, 0, 0, 0.8);\\n          overflow: hidden;\\n        }\\n\\n        .lust-overflow-header {\\n          padding: 20px;\\n          text-align: center;\\n          color: white;\\n          position: relative;\\n        }\\n\\n        .lust-overflow-header h3 {\\n          margin: 10px 0 0 0;\\n          font-size: 1.5em;\\n          text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\\n        }\\n\\n        .close-overflow-btn {\\n          position: absolute;\\n          top: 10px;\\n          right: 15px;\\n          background: none;\\n          border: none;\\n          color: white;\\n          font-size: 20px;\\n          cursor: pointer;\\n          padding: 5px;\\n          border-radius: 50%;\\n          transition: background 0.3s ease;\\n        }\\n\\n        .close-overflow-btn:hover {\\n          background: rgba(255, 255, 255, 0.2);\\n        }\\n\\n        .lust-overflow-body {\\n          padding: 20px;\\n          color: white;\\n        }\\n\\n        .overflow-effect-name {\\n          font-size: 1.3em;\\n          font-weight: bold;\\n          color: #ff69b4;\\n          margin-bottom: 10px;\\n          text-align: center;\\n        }\\n\\n        .overflow-effect-description {\\n          font-size: 1em;\\n          line-height: 1.5;\\n          margin-bottom: 15px;\\n          text-align: center;\\n          opacity: 0.9;\\n        }\\n\\n        .overflow-effect-tags {\\n          margin-top: 15px;\\n          padding-top: 15px;\\n          border-top: 1px solid rgba(255, 105, 180, 0.3);\\n        }\\n\\n        .lust-overflow-footer {\\n          padding: 15px 20px;\\n          text-align: center;\\n          border-top: 1px solid rgba(255, 105, 180, 0.3);\\n        }\\n\\n        .confirm-overflow-btn {\\n          background: linear-gradient(135deg, #ff69b4, #ff1493);\\n          color: white;\\n          border: none;\\n          padding: 12px 30px;\\n          border-radius: 8px;\\n          font-size: 1em;\\n          font-weight: bold;\\n          cursor: pointer;\\n          transition: all 0.3s ease;\\n        }\\n\\n        .confirm-overflow-btn:hover {\\n          background: linear-gradient(135deg, #ff1493, #dc143c);\\n          transform: scale(1.05);\\n        }\\n      </style>\\n    ')}}class c{static instance;unifiedExecutor;constructor(){this.unifiedExecutor=u.getInstance()}static getInstance(){return c.instance||(c.instance=new c),c.instance}async executeEffect(e,t,a,n){try{await this.unifiedExecutor.executeEffectString(e,t,{targetType:a,...n})}catch(t){throw console.error('执行效果失败:',e,t),new Error(`未知效果: ${e}`)}}processStatusEffectsAtTurnStart(e){this.unifiedExecutor.processStatusEffectsAtTurnStart(e)}async processStatusEffectsAtTurnEnd(e){await this.unifiedExecutor.processStatusEffectsAtTurnEnd(e)}async processStatusEffectsAtBattleStart(e){await this.unifiedExecutor.processStatusEffectsAtBattleStart(e)}async processAbilitiesAtTurnStart(e){await this.unifiedExecutor.processAbilitiesAtTurnStart(e)}async processAbilitiesAtBattleStart(e){await this.unifiedExecutor.processAbilitiesAtBattleStart(e)}async processAbilitiesAtTurnEnd(e){await this.unifiedExecutor.processAbilitiesAtTurnEnd(e)}async processAbilitiesOnTakeDamage(e){await this.unifiedExecutor.processAbilitiesOnTakeDamage(e)}async processPassiveAbilities(e){await this.unifiedExecutor.processAbilitiesByTrigger(e,'passive')}async processAbilitiesByTrigger(e,t){await this.unifiedExecutor.processAbilitiesByTrigger(e,t)}async processStatusEffectsAtBattleStart(e){await this.unifiedExecutor.processStatusEffectsByTrigger(e,'battle_start')}applyStatusEffect(e,t,a,n){const s=`${e}.status apply ${t} ${a}${n?` @${n}`:''}`;this.unifiedExecutor.executeEffectString(s,!0)}}class l{static instance;gameStateManager;effectEngine;relicEffectManager;animationManager=null;constructor(){this.gameStateManager=n.GameStateManager.getInstance(),this.effectEngine=c.getInstance(),this.relicEffectManager=g.getInstance()}getAnimationManager(){return this.animationManager||(this.animationManager=i.getInstance()),this.animationManager}static getInstance(){return l.instance||(l.instance=new l),l.instance}initializeDeck(e){this.gameStateManager.getPlayer();const t=e.map(((e,t)=>({...e,id:e.id||`card_${Date.now()}_${t}`})));this.gameStateManager.updatePlayer({deck:[...t],drawPile:[...t],hand:[],discardPile:[],exhaustPile:[]}),this.shuffleDrawPile()}shuffleDrawPile(){const e=[...this.gameStateManager.getPlayer().drawPile].sort((()=>Math.random()-.5));this.gameStateManager.updatePlayer({drawPile:e})}drawCards(e){return this.gameStateManager.drawCardsFromPile(e)}drawStartingHand(){const e=this.gameStateManager.getPlayer();this.drawCards(e.drawPerTurn)}async playCard(e,t){const a=this.gameStateManager.getPlayer();if(!this.gameStateManager.getEnemy()){console.error('❌ 没有敌人，无法使用卡牌'),console.error('🔍 ===== 卡牌使用失败调试信息 ====='),console.error('📋 hasPlayer:',!!a),console.error('📋 gameState:',this.gameStateManager.getGameState());const e=getVariables({type:'message'});return console.error('📋 完整的MVU变量:',e),console.error('📋 variables?.stat_data:',e?.stat_data),console.error('📋 variables?.stat_data?.battle:',e?.stat_data?.battle),console.error('📋 variables?.stat_data?.battle?.enemy:',e?.stat_data?.battle?.enemy),console.error('📋 variables?.battle:',e?.battle),console.error('📋 variables?.battle?.enemy:',e?.battle?.enemy),console.error('🔍 ===== 卡牌使用失败调试信息结束 ====='),!1}if('player_turn'!==this.gameStateManager.getCurrentPhase())return console.log('不是玩家回合，无法使用卡牌'),!1;const n=a.hand.find((t=>t.id===e));if(!n)return console.error('卡牌未找到:',e),!1;const s=this.calculateCardEnergyCost(n,a);if(a.energy<s)return console.log('能量不足，无法使用卡牌'),this.getAnimationManager().showCardBlockedNotification(n.name,'能量不足'),this.clearCardInteractionStates(),!1;const i=this.getCardBlockReason(n,a);if(i)return console.log(`由于状态效果限制，无法使用此卡牌: ${i}`),this.getAnimationManager().showCardBlockedNotification(n.name,i),this.clearCardInteractionStates(),!1;if(n.discard_requirement){const t=n.discard_requirement;if(a.hand.length-1<t)return console.log(`手牌不足，无法满足弃牌需求: 需要${t}张，当前${a.hand.length-1}张`),this.getAnimationManager().showCardBlockedNotification(n.name,`需要弃掉${t}张牌`),this.clearCardInteractionStates(),!1;try{this.showCardHoverState(e),await this.discardCardsForRequirement(t,e),this.clearCardHoverState(e)}catch(t){return this.clearCardHoverState(e),this.clearCardInteractionStates(),console.log('弃牌选择被取消，卡牌使用中止'),!1}}try{const s=a.hand.filter((t=>t.id!==e)),i=a.energy,r=this.calculateActualEnergyCost(n,a);this.gameStateManager.updatePlayer({energy:a.energy-r,hand:s});let o=!1;return n.exhaust?(this.gameStateManager.moveCardToExhaust(n),o=!0):(this.gameStateManager.moveCardToDiscard(n),o=!0),await this.executeCardEffect(n,t,i),o||this.handleCardDisposal(n),await this.triggerPostCardPlayEffects(n),!0}catch(e){console.error('使用卡牌时发生错误:',e),this.gameStateManager.updatePlayer({energy:a.energy,hand:a.hand});let t='卡牌执行失败';return e instanceof Error&&(t=e.message.includes('未知效果')||e.message.includes('Unknown effect')?'AI生成了未知效果，无法执行':e.message.includes('效果解析失败')?'卡牌效果格式错误':e.message.includes('格式无效')?'AI生成的卡牌格式错误':e.message.length>50?'卡牌效果执行失败':e.message),this.getAnimationManager().showCardBlockedNotification(n.name,t),!1}}canPlayCard(e,t){return null===this.getCardBlockReason(e,t)}getCardBlockReason(e,t){if('Curse'===e.type)return'诅咒牌无法被打出';if(t.statusEffects.find((e=>'dominated'===e.id))&&'Attack'===e.type)return'被支配状态下无法使用攻击牌';return t.statusEffects.find((e=>'silenced'===e.id))&&'Skill'===e.type?'被沉默状态下无法使用技能牌':null}async executeCardEffect(e,t,a){try{if('Curse'===e.type)throw new Error('诅咒牌无法被打出');if('Event'===e.type)return void await this.handleEventCard(e);if(!e.effect||'string'!=typeof e.effect)throw new Error('效果解析失败: 卡牌效果格式无效');const t=u.getInstance();try{const n={energyBeforeCardPlay:a,cardContext:e};await t.executeEffectString(e.effect,!0,n)}finally{}}catch(e){throw e instanceof Error?e:new Error('卡牌效果执行失败')}}async handleEventCard(e){if(e.effect.includes('narrate:')){const t=e.effect.match(/narrate:\"([^\"]+)\"/);if(t){const a=t[1];await this.generateEventNarrative(a,e)}}}async generateEventNarrative(e,t){try{const a=`\\n作为一个成人向卡牌游戏的叙事AI，请基于以下信息生成一段简短但生动的叙事描述：\\n\\n**场景背景**: ${e}\\n**卡牌名称**: ${t.name}\\n**卡牌描述**: ${t.description}\\n\\n要求：\\n1. 使用第一人称(\"我\")的视角\\n2. 描述要简洁但生动，控制在100字以内\\n3. 符合成人向游戏的氛围，但不要过于露骨\\n4. 体现玩家的主动选择和行动\\n\\n请直接输出叙事内容，不要有额外说明：\\n      `,n=await generate({user_input:a,should_stream:!1});this.showNarrativeToast(n)}catch(e){console.error('❌ 生成事件叙事失败:',e),this.showNarrativeToast('叙事生成失败，请重试')}}showNarrativeToast(e){const t=$(`\\n      <div class=\"narrative-toast\">\\n        <div class=\"narrative-content\">${e}</div>\\n      </div>\\n    `);$('.card-game-container').append(t),t.fadeIn(500).delay(4e3).fadeOut(500,(()=>{t.remove()}))}handleCardDisposal(e){e.exhaust?this.gameStateManager.moveCardToExhaust(e):e.retain?this.gameStateManager.addCardToHand(e):this.gameStateManager.moveCardToDiscard(e)}discardCard(e){const t=this.gameStateManager.removeCardFromHand(e);if(t){this.triggerDiscardEffect(t);try{this.relicEffectManager.triggerOnCardDiscarded(t)}catch(e){console.warn('触发遗物弃牌检测失败:',e)}this.gameStateManager.moveCardToDiscard(t);const e=t.name||'未知卡牌',a='energy'===t.cost?'X':String(t.cost??0),n=t.description||'';s.logDiscardCardDetail(e,a,n)}}async triggerPostCardPlayEffects(e){await this.effectEngine.processAbilitiesByTrigger('player','card_played'),await this.relicEffectManager.triggerOnCardPlayed()}async discardHand(){const e=this.gameStateManager.getPlayer(),t=[];e.hand.filter((e=>e.ethereal)).forEach((e=>{this.gameStateManager.moveCardToExhaust(e)}));const a=e.hand.filter((e=>!e.retain&&!e.ethereal&&'Curse'!==e.type));for(const e of a)t.push(e),this.gameStateManager.moveCardToDiscard(e),console.log(`🗂️ 回合结束弃置卡牌: ${e.name} (不触发弃牌效果)`);const n=e.hand.filter((e=>(e.retain||'Curse'===e.type)&&!e.ethereal));this.gameStateManager.updatePlayer({hand:n})}addCardToHand(e){this.gameStateManager.addCardToHand(e)}addCardToDiscard(e){this.gameStateManager.moveCardToDiscard(e)}addCardToDeck(e){const t=[...this.gameStateManager.getPlayer().deck,e];this.gameStateManager.updatePlayer({deck:t})}getPlayableCards(){const e=this.gameStateManager.getPlayer();return e.hand.filter((t=>this.canAffordCard(t,e)&&this.canPlayCard(t,e)))}canAffordCard(e,t){const a=this.calculateCardEnergyCost(e,t);return t.energy>=a}getCardInHand(e){return this.gameStateManager.getPlayer().hand.find((t=>t.id===e))}getHandSize(){return this.gameStateManager.getPlayer().hand.length}getDeckSize(){return this.gameStateManager.getPlayer().drawPile.length}getDiscardSize(){return this.gameStateManager.getPlayer().discardPile.length}async triggerDiscardEffect(e){if(e.discard_effect)try{await this.effectEngine.executeEffect(e.discard_effect,!0)}catch(e){console.error('卡牌弃牌效果执行失败:',e)}if(await this.effectEngine.processAbilitiesByTrigger('player','on_discard'),e.effect&&e.effect.includes('on_discard:'))try{await this.effectEngine.executeEffect(e.effect,!0)}catch(e){console.error('旧格式弃牌效果执行失败:',e)}}async discardCardsForRequirement(e,t){const a=this.gameStateManager.getPlayer(),n=a.hand.filter((e=>e.id!==t));if(n.length<e)throw new Error('手牌不足，无法满足弃牌需求');const i=await this.showDiscardSelectionUI(n,e);if(i.length!==e)throw new Error('弃牌选择被取消');for(const e of i){await this.triggerDiscardEffect(e);try{await this.relicEffectManager.triggerOnCardDiscarded(e)}catch(e){console.warn('触发遗物弃牌检测失败:',e)}this.gameStateManager.moveCardToDiscard(e);const t=e.name||'未知卡牌',a='energy'===e.cost?'X':String(e.cost??0),n=e.description||'';s.logDiscardCardDetail(t,a,n)}const r=a.hand.filter((e=>e.id===t||!i.some((t=>t.id===e.id))));this.gameStateManager.updatePlayer({hand:r})}async showDiscardSelectionUI(e,t){return new Promise(((a,n)=>{const s=[],i=$(`\\n        <div class=\"discard-selection-modal\">\\n          <div class=\"modal-backdrop\"></div>\\n          <div class=\"modal-content\">\\n            <div class=\"modal-header\">\\n              <h3>选择要弃掉的卡牌</h3>\\n              <p>请选择 ${t} 张卡牌弃掉</p>\\n              <div class=\"selection-counter\">已选择: <span class=\"selected-count\">0</span> / ${t}</div>\\n            </div>\\n            <div class=\"modal-body\">\\n              <div class=\"discard-cards-container\">\\n                ${e.map((e=>`\\n                  <div class=\"discard-card\" data-card-id=\"${e.id}\">\\n                    <div class=\"card-emoji\">${e.emoji}</div>\\n                    <div class=\"card-name\">${e.name}</div>\\n                    <div class=\"card-cost\">${e.cost}</div>\\n                  </div>\\n                `)).join('')}\\n              </div>\\n            </div>\\n            <div class=\"modal-footer\">\\n              <button class=\"btn btn-secondary cancel-discard\">取消</button>\\n              <button class=\"btn btn-primary confirm-discard\" disabled>确认弃牌</button>\\n            </div>\\n          </div>\\n        </div>\\n      `);$('body').append(i),i.fadeIn(200),i.on('click','.discard-card',(function(){const a=$(this).data('card-id'),n=e.find((e=>e.id===a));if(n){if($(this).hasClass('selected')){$(this).removeClass('selected');const e=s.findIndex((e=>e.id===a));e>-1&&s.splice(e,1)}else s.length<t&&($(this).addClass('selected'),s.push(n));i.find('.selected-count').text(s.length),i.find('.confirm-discard').prop('disabled',s.length!==t)}})),i.on('click','.confirm-discard',(()=>{i.fadeOut(200,(()=>i.remove())),a(s)})),i.on('click','.cancel-discard, .modal-backdrop',(()=>{i.fadeOut(200,(()=>i.remove())),n(new Error('弃牌选择被取消'))}))}))}triggerRelicEffects(e,t){}onTurnStart(){const e=this.gameStateManager.getPlayer();this.drawCards(e.drawPerTurn)}async onTurnEnd(){await this.discardHand(),this.triggerRelicEffects('on_turn_end',{});try{const e=(this.gameStateManager.getPlayer().hand||[]).filter((e=>'Curse'===e.type&&'string'==typeof e.effect&&e.effect.trim().length>0));if(e.length>0){const t=u.getInstance();for(const a of e)await t.executeEffectString(a.effect,!0,{triggerType:'turn_end',cardContext:a}),s.addLog(`诅咒触发：${a.name}`,'action',{type:'card',name:a.name,details:a.description||''})}}catch(e){console.warn('诅咒牌回合结束触发失败:',e)}}clearCardInteractionStates(){$('.card').removeClass('card-hover'),$('.card-tooltip').fadeOut(200,(function(){$(this).remove()})),$('.card').removeClass('selected')}showCardHoverState(e){const t=$(`.card[data-card-id=\"${e}\"], .enhanced-card[data-card-id=\"${e}\"]`);t.addClass('card-pending-discard'),t.find('.pending-indicator').length||t.append('<div class=\"pending-indicator\">等待弃牌选择...</div>')}clearCardHoverState(e){const t=$(`.card[data-card-id=\"${e}\"], .enhanced-card[data-card-id=\"${e}\"]`);t.removeClass('card-pending-discard'),t.find('.pending-indicator').remove()}async discardCardsPassively(e,t=1){const a=[...this.gameStateManager.getPlayer().hand];if(0===a.length)return;let n=[];switch(e){case'random':const s=[...a].sort((()=>Math.random()-.5));n=s.slice(0,Math.min(t,a.length));break;case'leftmost':n=a.slice(0,Math.min(t,a.length));break;case'rightmost':n=a.slice(-Math.min(t,a.length));break;case'all':n=[...a];break;default:return void console.error('未知的弃牌类型:',e)}if(0===n.length)return;for(const e of n)await this.triggerDiscardEffect(e),this.gameStateManager.moveCardToDiscard(e);const s=a.filter((e=>!n.some((t=>t.id===e.id))));this.gameStateManager.updatePlayer({hand:s});const i={random:'随机',leftmost:'最左侧',rightmost:'最右侧',all:'所有'}[e];this.showDiscardNotification(`${i}弃牌`,`弃掉了 ${n.length} 张卡牌`)}showDiscardNotification(e,t){const a=$(`\\n      <div class=\"discard-notification\" style=\"\\n        position: fixed;\\n        top: 30%;\\n        left: 50%;\\n        transform: translate(-50%, -50%);\\n        background: rgba(255, 107, 107, 0.95);\\n        color: white;\\n        padding: 20px 30px;\\n        border-radius: 12px;\\n        border: 2px solid #ff6b6b;\\n        font-size: 16px;\\n        font-weight: bold;\\n        z-index: 10000;\\n        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.8);\\n        text-align: center;\\n        min-width: 250px;\\n        opacity: 0;\\n      \">\\n        <div style=\"margin-bottom: 8px; font-size: 18px;\">🗑️ ${e}</div>\\n        <div style=\"color: #ffe6e6; font-size: 14px;\">${t}</div>\\n      </div>\\n    `);$('body').append(a),a.animate({opacity:1},200),setTimeout((()=>{a.animate({opacity:0},300,(function(){$(this).remove()}))}),2e3)}async selectCards(e,t=1,a){let n=[...this.gameStateManager.getPlayer().hand];if(a&&(n=n.filter(a)),0===n.length)return[];let s=[];switch(e){case'choose':s=await this.showCardSelectionUI(n,t,'选择卡牌');break;case'leftmost':s=n.slice(0,Math.min(t,n.length));break;case'rightmost':s=n.slice(-Math.min(t,n.length));break;case'all':s=[...n];break;case'random':s=[...n].sort((()=>Math.random()-.5)).slice(0,Math.min(t,n.length));break;default:return console.error('未知的选择类型:',e),[]}return s}async showCardSelectionUI(e,t,a='选择卡牌',n=!0){return new Promise(((s,i)=>{const r=[],o=$(`\\n        <div class=\"card-selection-modal\">\\n          <div class=\"modal-backdrop\"></div>\\n          <div class=\"modal-content\">\\n            <div class=\"modal-header\">\\n              <h3>${a}</h3>\\n              <p>请选择 ${t} 张卡牌</p>\\n              <div class=\"selection-counter\">已选择: <span class=\"selected-count\">0</span> / ${t}</div>\\n            </div>\\n            <div class=\"modal-body\">\\n              <div class=\"selection-cards-container\">\\n                ${e.map((e=>`\\n                  <div class=\"selection-card\" data-card-id=\"${e.id}\">\\n                    <div class=\"card-emoji\">${e.emoji}</div>\\n                    <div class=\"card-name\">${e.name}</div>\\n                    <div class=\"card-cost\">${e.cost}</div>\\n                    <div class=\"card-description\">${e.description||''}</div>\\n                  </div>\\n                `)).join('')}\\n              </div>\\n            </div>\\n            <div class=\"modal-footer\">\\n              ${n?'<button class=\"btn btn-secondary cancel-selection\">取消</button>':''}\\n              <button class=\"btn btn-primary confirm-selection\" disabled>确认选择</button>\\n            </div>\\n          </div>\\n        </div>\\n      `);$('body').append(o),o.fadeIn(200),o.on('click','.selection-card',(function(){const a=$(this).data('card-id'),n=e.find((e=>e.id===a));if(n){if($(this).hasClass('selected')){$(this).removeClass('selected');const e=r.findIndex((e=>e.id===a));e>-1&&r.splice(e,1)}else r.length<t&&($(this).addClass('selected'),r.push(n));o.find('.selected-count').text(r.length),o.find('.confirm-selection').prop('disabled',r.length!==t)}})),o.on('click','.confirm-selection',(()=>{o.fadeOut(200,(()=>o.remove())),s(r)})),o.on('click','.cancel-selection, .modal-backdrop',(()=>{n&&(o.fadeOut(200,(()=>o.remove())),i(new Error('卡牌选择被取消')))}))}))}generateCardDescription(e){const t=e.split(','),a=[];return t.forEach((e=>{const t=e.trim();if(t.startsWith('damage:')){const e=t.split(':')[1];a.push(`造成${e}点伤害`)}else if(t.startsWith('block:')){const e=t.split(':')[1];a.push(`获得${e}点格挡`)}else if(t.startsWith('heal:')){const e=t.split(':')[1];a.push(`恢复${e}点生命值`)}else if(t.startsWith('draw:')){const e=t.split(':')[1];a.push(`抽${e}张牌`)}else if(t.startsWith('apply_status:')){const e=t.split(':'),n=e[2],s=e[3];a.push(`施加${s}层${this.getStatusName(n)}`)}})),a.join('，')}getStatusName(e){return{strength:'力量',dexterity:'敏捷',poison:'中毒',weak:'虚弱',vulnerable:'易伤',arousal:'兴奋',submission:'屈服',dominated:'支配',resilience:'韧性'}[e]||e}upgradeCard(e){const t={...e};return'number'==typeof e.cost&&e.cost>0&&(t.cost=Math.max(0,e.cost-1)),t.effect=this.enhanceEffect(e.effect),t.name=e.name+'+',t}enhanceEffect(e){return e.replace(/(\\d+)/g,(e=>(parseInt(e)+1).toString()))}calculateCardEnergyCost(e,t){return'energy'===e.cost?0:e.cost}calculateActualEnergyCost(e,t){return'energy'===e.cost?Math.max(0,t.energy):e.cost}}var d=a(624),f=a(220);class u{static instance;gameStateManager;animationManager;lustOverflowDisplay;parser;dynamicStatusManager;_relicEffectManager;_cardSystem;verbose=!1;executionContext={sourceIsPlayer:!1};constructor(){this.gameStateManager=n.GameStateManager.getInstance(),this.animationManager=i.getInstance(),this.lustOverflowDisplay=o.getInstance(),this.parser=f.h.getInstance(),this.dynamicStatusManager=d.b.getInstance()}get relicEffectManager(){return this._relicEffectManager||(this._relicEffectManager=g.getInstance()),this._relicEffectManager}get cardSystem(){return this._cardSystem||(this._cardSystem=l.getInstance()),this._cardSystem}static getInstance(){return u.instance||(u.instance=new u),u.instance}setCardPlayEnergy(e){this.executionContext.energyBeforeCardPlay=e}clearCardPlayEnergy(){this.executionContext.energyBeforeCardPlay=void 0}async executeEffectString(e,t,a){const n={...a||{}};n&&'object'==typeof n&&'sourceIsPlayer'in n&&delete n.sourceIsPlayer,this.executionContext={sourceIsPlayer:t,...n};try{const t=this.parser.parseEffectString(e).filter((e=>!!e.isValid||(console.warn('跳过无效表达式:',e.raw,e.errorMessage),!1))),a=this.sortExpressionsByPriority(t);for(const e of a)await this.executeExpression(e)}catch(t){throw console.error('执行效果字符串失败:',e,t),t}}async executeExpression(e){try{if(s.addLog(`执行效果: ${e.description||e.raw}`,'action'),e.isConditional)return void await this.executeConditionalExpression(e);if(e.prefix&&this.isValidTriggerPrefix(e.prefix)){if(this.executionContext.isRelicEffect){const t=(e.value?.toString?.()||'').match(/^([\\w_]+)\\((.*)\\)$/);if(t){const e=t[2];return this.verbose&&console.log('🔮 遗物上下文，直接执行触发内效果:',e),void await this.executeEffectString(e,this.executionContext.sourceIsPlayer,this.executionContext)}}this.verbose&&console.log('🔮 检测到触发条件效果，作为能力添加:',e.raw),s.addLog(`添加能力: ${e.raw}`,'system');const t=this.resolveAbilityTarget(e);return console.log(`🎯 能力目标解析: ${e.raw} -> ${t}`),void await this.addAbility(t,e.raw)}this.verbose&&console.log('🔍 检查属性定义:',e.attribute,'target:',e.target);const t=this.parser.getAttributeDefinition(e.attribute);if(!t)return console.warn('⚠️ 未知属性:',e.attribute),console.warn('🔍 完整表达式:',e),void s.addLog(`未知属性: ${e.attribute}`,'system');switch(t.category){case'basic':await this.executeBasicAttributeEffect(e);break;case'modifier':await this.executeModifierEffect(e);break;case'status':await this.executeStatusEffect(e);break;case'ability':await this.executeAbilityEffect(e);break;case'card':await this.executeCardEffect(e);break;case'special':await this.executeSpecialEffect(e);break;default:console.warn('未知属性类别:',t.category)}}catch(t){console.error('执行表达式失败:',e,t)}}async executeModifierEffect(e){const t=this.resolveTarget(e.target,e.attribute),a=this.getEntity(t);if(!a)return console.warn('⚠️ 目标实体不存在:',t),void s.addLog(`目标实体不存在: ${t}`,'system');const{attribute:n,operator:i,value:r}=e;let o;if('number'==typeof r)o=r;else if(e.isVariableReference)o=this.calculateDynamicValue(r,t);else if(o=parseFloat(r),isNaN(o))return console.warn('⚠️ 无效的数值:',r),void s.addLog(`无效的数值: ${r}`,'system');const c=this.getCurrentAttributeValue(a,n),l=this.calculateNewValue(c,i,o);await this.applyAttributeChange(t,n,l,a);const d='player'===t?'我方':'对方',f=this.getAttributeDisplayName(n);this.verbose&&console.log(`✅ 修饰符变化: ${t}.${n} ${i} ${o} = ${l}`),Math.abs(l-c)>=1&&s.addLog(`${d}的${f}: ${c} ${i} ${o} = ${l}`,'info')}async executeConditionalExpression(e){if(e.isConditional&&e.condition)try{let t;if(this.evaluateCondition(e.condition)){if(!e.trueEffect||''===e.trueEffect.trim())return;t=e.trueEffect}else{if(!e.falseEffect||''===e.falseEffect.trim())return;t=e.falseEffect}const a={...this.executionContext};delete a.triggerType,await this.executeEffectString(t,this.executionContext.sourceIsPlayer,a)}catch(e){console.error('条件表达式执行失败:',e)}else console.error('❌ 无效的条件表达式')}evaluateCondition(e){try{const t=this.executionContext.triggerType;this.executionContext.triggerType='condition_evaluation';let a=e;const n=/(ME|OP)\\.([a-zA-Z_][a-zA-Z0-9_]*)|([a-zA-Z_][a-zA-Z0-9_]*)/g;a=a.replace(n,((e,t,a,n)=>{let s,i;if(t&&a)s='ME'===t?this.executionContext.sourceIsPlayer?'player':'enemy':this.executionContext.sourceIsPlayer?'enemy':'player',i=a;else{if(!n)return e;i=n;s=['energy','max_energy','draw','discard','hand_size','deck_size','discard_pile_size','cards_played_this_turn'].includes(i)||this.executionContext.sourceIsPlayer?'player':'enemy'}const r=this.gameStateManager.getGameState(),o='player'===s?r.player:r.enemy;if(!o)return console.warn(`无法获取实体: ${s}`),'0';const c=this.getVariableValue(i,o);this.verbose&&console.log(`🔄 条件变量 ${e} -> ${c} (${'player'===s?'玩家':'敌人'})`);return(Number.isFinite(c)?c:0).toString()}));const s=this.evaluateConditionExpression(a);return this.verbose&&console.log(`计算条件: ${e} -> ${a} = ${s}`),this.executionContext.triggerType=t,s}catch(t){console.error('条件评估失败:',t,'条件:',e);const a=this.executionContext.triggerType;return this.executionContext.triggerType=a,!1}}evaluateConditionExpression(e){const t=e.replace(/\\s+/g,' ').trim().replace(/≥/g,'>=').replace(/≤/g,'<=').replace(/＝/g,'=').replace(/≠/g,'!=');if(!/^[0-9+\\-*/.()>=<!&| ]+$/.test(t))throw new Error(`不安全的条件表达式: ${e}`);try{let e=t;e=e.replace(/===/g,'§EQ3§').replace(/!==/g,'§NEQ3§'),e=e.replace(/==/g,'§EQ2§').replace(/!=/g,'§NEQ2§'),e=e.replace(/(?<![><!=])=(?![=])/g,'§EQ1§'),e=e.replace(/§EQ3§/g,'===').replace(/§NEQ3§/g,'!==').replace(/§EQ2§|§EQ1§/g,'===').replace(/§NEQ2§/g,'!==');const a=new Function(`\"use strict\"; return (${e})`)();if('boolean'!=typeof a)throw new Error(`条件表达式结果不是布尔值: ${a}`);return a}catch(e){return console.error('条件表达式求值失败:',e),!1}}clearDirectModifiers(e,t){const a=this.dynamicStatusManager.getStatusDefinition(t);if(!a||!e.modifiers)return;const n=['damage_modifier','damage_taken_modifier','lust_damage_modifier','lust_damage_taken_modifier','heal_modifier','block_modifier','draw','discard','energy_gain','card_play_limit'],s=[...a.triggers.apply||[],...a.triggers.tick||[]],i=[];for(const e of s)for(const t of n)e.includes(t)&&i.push(t);if(i.length>0){const a={...e.modifiers};let n=!1;for(const e of i)void 0!==a[e]&&(console.log(`🧹 清理直接修饰符: ${e} = ${a[e]} (来自状态: ${t})`),delete a[e],n=!0);if(n){const n={modifiers:a};e===this.gameStateManager.getPlayer()?this.gameStateManager.updatePlayer(n):this.gameStateManager.updateEnemy(n),console.log(`✅ 已清理状态 \"${t}\" 的直接修饰符`)}}}async executeBasicAttributeEffect(e){const t=this.resolveTarget(e.target,e.attribute);let a=this.getEntity(t);if(!a)return void console.warn('目标实体不存在:',t);console.log(`🎯 执行基础属性效果: ${e.raw}`),console.log(`   目标: ${t}, 属性: ${e.attribute}, 操作符: ${e.operator}, 值: ${e.value}`);const{attribute:n,operator:s,value:i}=e;let r;if('string'==typeof e.value)if(this.isMathExpression(e.value))r=this.calculateDynamicValue(e.value,t),console.log(`动态计算表达式 ${e.value}: ${r} (目标: ${t})`);else if(e.isVariableReference)if('string'==typeof e.value&&/^(ME|OP)\\./.test(e.value))r=this.calculateDynamicValue(e.value,t),console.log(`动态解析带前缀变量 ${e.value}: ${r} (目标: ${t})`);else{if(a=this.getEntity(t),!a)return void console.warn('无法获取最新实体状态:',t);r=this.resolveVariableReference(e.value,a),console.log(`动态解析变量引用 ${e.value}: ${r} (目标: ${t})`)}else{const a=parseFloat(e.value);if(isNaN(a)){if('string'!=typeof e.value||!this.isMathExpression(e.value))return void console.warn('无效的数值:',i);r=this.calculateDynamicValue(e.value,t),console.log(`动态计算表达式 ${e.value}: ${r} (目标: ${t})`)}r=a}else{const e='number'==typeof i?i:parseFloat(i);if(isNaN(e))return void console.warn('无效的数值:',i);r=e}if(a=this.getEntity(t),!a)return void console.warn('无法获取最新实体状态（计算currentValue时）:',t);const o=this.getCurrentAttributeValue(a,n),c='player'===t?'我方':'对方';if('hp'===n&&'-'===s){const e=this.getSourceEntity();e&&(r=this.applyComplexModifiers(e,'damage_modifier',r,'伤害修饰符')),r=this.applyComplexModifiers(a,'damage_taken_modifier',r,`${c}受伤害修饰符`)}else if('lust'===n&&'+'===s){const e=this.getSourceEntity();e&&(r=this.applyComplexModifiers(e,'lust_damage_modifier',r,'欲望伤害修饰符')),r=this.applyComplexModifiers(a,'lust_damage_taken_modifier',r,`${c}受欲望伤害修饰符`)}else'block'===n&&'+'===s&&(r=this.applyComplexModifiers(a,'block_modifier',r,`${c}格挡修饰符`));if('hp'===n&&'-'===s){const e=Math.max(0,Number(r)||0),n=a.block||0;if(e>0&&n>0){const a=Math.min(n,e),s=e-a;'player'===t?this.gameStateManager.updatePlayer({block:n-a}):this.gameStateManager.updateEnemy({block:n-a});try{this.animationManager.showDamageNumber(t,a,'block')}catch(e){console.warn('显示格挡抵消动画失败:',e)}r=s}}const l=this.calculateNewValue(o,s,r),d=e=>Math.round(10*e)/10,f=d(this.clampAttributeValue(n,l,a,t));console.log(`💻 计算结果: ${d(o)} ${s} ${d(r)} = ${d(l)}, 限制后: ${f}`),await this.applyAttributeChange(t,n,f,a),await this.triggerAttributeChangeEffects(t,n,f,o,a)}async executeStatusEffect(e){const t=this.resolveTarget(e.target,e.attribute);if('apply'===e.operator){let a,n=1;if('string'==typeof e.value&&e.value.includes(':')){const t=e.value.split(':');a=t[0],n=parseInt(t[1])||1}else a=e.value,n=1;const s=e.duration;await this.applyStatusEffect(t,a,n,s)}else if('remove'===e.operator){const a=e.value;'all_buffs'===a?await this.removeAllBuffs(t):'all_debuffs'===a?await this.removeAllDebuffs(t):await this.removeStatusEffect(t,a)}}async executeAbilityEffect(e){const t=e.target?this.resolveTarget(e.target,e.attribute):this.executionContext.sourceIsPlayer?'player':'enemy';if('add'===e.operator||'apply'===e.operator){const a=e.value;await this.addAbilityToTarget(t,a)}else if('remove'===e.operator){const a=e.value;await this.removeAbility(t,a)}else console.warn('未支持的能力操作符:',e.operator)}resolveAbilityTarget(e){if(e.target)return this.resolveTarget(e.target,e.attribute);const t=this.extractEffectFromAbility(e.raw);return t.includes('ME.')?this.executionContext.sourceIsPlayer?'player':'enemy':t.includes('OP.')?this.executionContext.sourceIsPlayer?'enemy':'player':this.executionContext.sourceIsPlayer?'player':'enemy'}async addAbility(e,t){return this.addAbilityNew(e,t)}async addAbilityNew(e,t){const a=this.getEntity(e);if(!a)return;let n;const i=t.match(/^([\\w_]+)\\((.+)\\)$/);if(!i)return void console.error('能力格式错误，应为 trigger(effects)');[,n]=i;const r={id:`ability_${Date.now()}_${Math.random().toString(36).slice(2,8)}`,trigger:n,effect:t},o=[...a.abilities||[],r];'player'===e?this.gameStateManager.updatePlayer({abilities:o}):this.gameStateManager.updateEnemy({abilities:o}),console.log(`✅ 添加能力: ${t} (${e})`),s.addLog(`获得能力: ${t}`,'info'),await this.processAbilitiesOnAbilityGain(e);const c=t.match(/^battle_start\\((.+)\\)$/);if(c){const e=c[1],t=this.executionContext;await this.executeEffectString(e,t.sourceIsPlayer,{...t,triggerType:'battle_start'})}}extractTriggerFromAbility(e){const t=e.match(/^([^:]+):/);if(t)return t[1].trim();const a=e.match(/^([\\w_]+)\\(/);return a?a[1]:'passive'}extractEffectFromAbility(e){const t=e.indexOf(':');return-1!==t?e.substring(t+1).trim():e}async executeCardEffect(e){const{attribute:t,value:a,selector:n}=e;let i;if('number'==typeof a)i=a;else if(e.isVariableReference&&'string'==typeof a)i=this.calculateDynamicValue(a,'player');else{const e=parseFloat(a);i=Number.isFinite(e)?e:0}switch(t){case'draw':{if('string'==typeof a&&/deck_size/.test(a)){const e=this.gameStateManager.getGameState()?.player?.drawPile?.length||0;(!Number.isFinite(i)||i<=0)&&(i=e/3)}let t=Math.max(0,Math.floor(i));if(0===t){const a=(e.raw||'').toString();/\\bdraw\\b\\s*[+\\-=*/]?\\s*0\\b/.test(a)||(t=1)}this.gameStateManager.drawCardsFromPile(t),this.verbose&&console.log(`抽取${t}张卡牌`);break}case'discard':n?await this.executeDiscardWithSelector(n,i):(await this.discardRandomCards(i),console.log(`弃置${i}张卡牌`));break;case'reduce_cost':n&&await this.executeReduceCostWithSelector(n,i);break;case'copy_card':n&&await this.executeCopyCardWithSelector(n);break;case'trigger_effect':n&&await this.executeTriggerEffectWithSelector(n);break;case'reduce_cost_all':await this.reduceCardsCost('all',i),console.log(`所有手牌费用减少${i}`);break;case'reduce_cost':e.selector?await this.executeReduceCostWithSelector(e.selector,i):(await this.reduceCardsCost('choose',i),console.log(`选择的卡牌费用减少${i}`));break;case'exile':{const t=e.selector||'hand.choose',a=await this.selectCardsWithSelector(t,1);if(a.length>0){const e=a[0];this.gameStateManager.updatePlayer({hand:this.gameStateManager.getPlayer().hand.filter((t=>t.id!==e.id))}),this.gameStateManager.moveCardToExhaust(e),s.addLog(`放逐了卡牌：${e.name}`,'action',{type:'card',name:e.name})}break}case'copy_card':e.selector?await this.executeCopyCardWithSelector(e.selector):(await this.copySelectedCard('choose'),console.log('复制了选择的卡牌'));break;case'trigger_effect':e.selector?await this.executeTriggerEffectWithSelector(e.selector):(await this.triggerCardEffectTwice('choose'),console.log('选择的卡牌效果触发两次'));break;case'exhaust':console.log(`消耗效果: ${i}`);break;case'add_to_hand':await this.handleAddCardToHand(e.target,e.value);break;case'add_to_deck':await this.handleAddCardToDeck(e.target,e.value);break;default:console.warn('未知卡牌效果:',t)}}async addAbilityToTarget(e,t){await this.addAbility(e,t);const a=this.executionContext.sourceIsPlayer?'玩家':'敌人',n='player'===e?'玩家':'敌人';(this.executionContext.sourceIsPlayer&&'enemy'===e||!this.executionContext.sourceIsPlayer&&'player'===e)&&(console.log(`🔄 跨目标能力添加: ${a} 为 ${n} 添加了能力: ${t}`),s.addLog(`${a} 为 ${n} 添加了能力`,'info'))}async executeSpecialEffect(e){const{attribute:t,value:a}=e;if('narrate'===t)await this.triggerNarrative(a);else console.warn('未知特殊效果:',t)}resolveTarget(e,t){if(console.log(`🎯 解析目标: targetFromExpression=${e}, attribute=${t}, sourceIsPlayer=${this.executionContext.sourceIsPlayer}`),this.executionContext.statusContext&&this.executionContext.triggerType){if('ME'===e){const e=this.gameStateManager.getPlayer(),t=this.gameStateManager.getEnemy(),a=this.executionContext.statusContext.id,n=e.statusEffects?.some((e=>e.id===a)),s=(t?.statusEffects?.some((e=>e.id===a)),n?'player':'enemy');return console.log(`🎯 状态效果中ME解析为: ${s} (状态持有者)`),s}if('OP'===e){const e=this.gameStateManager.getPlayer(),t=this.gameStateManager.getEnemy(),a=this.executionContext.statusContext.id,n=e.statusEffects?.some((e=>e.id===a)),s=(t?.statusEffects?.some((e=>e.id===a)),n?'enemy':'player');return console.log(`🎯 状态效果中OP解析为: ${s} (状态持有者的对手)`),s}}if('ME'===e){const e=this.executionContext.sourceIsPlayer?'player':'enemy';return console.log(`🎯 ME解析为: ${e}`),e}if('OP'===e){const e=this.executionContext.sourceIsPlayer?'enemy':'player';return console.log(`🎯 OP解析为: ${e}`),e}if(t&&this.isPlayerOnlyAttribute(t))return'player';if(this.executionContext.statusContext&&this.executionContext.triggerType){const e=this.gameStateManager.getPlayer(),a=this.gameStateManager.getEnemy(),n=this.executionContext.statusContext.id,s=e.statusEffects?.some((e=>e.id===n)),i=a?.statusEffects?.some((e=>e.id===n));if(s)return console.log(`🎯 状态效果 \"${t}\" 默认作用于玩家（状态持有者）`),'player';if(i)return console.log(`🎯 状态效果 \"${t}\" 默认作用于敌人（状态持有者）`),'enemy'}throw new Error(`效果 \"${t}\" 必须明确指定目标 (ME. 或 OP.)`)}isPlayerOnlyAttribute(e){return['energy','max_energy','draw','discard'].includes(e)}getEntity(e){return'player'===e?this.gameStateManager.getPlayer():this.gameStateManager.getEnemy()}getLatestEntity(e){const t=this.gameStateManager.getGameState();return t?'player'===e?t.player:t.enemy:(console.warn('无法获取游戏状态'),null)}getSourceEntity(){return this.executionContext.sourceIsPlayer?this.gameStateManager.getPlayer():this.gameStateManager.getEnemy()}resolveVariableReference(e,t){const a=this.gameStateManager.getPlayer();this.gameStateManager.getEnemy();let n;n=t===a||t.id===a.id?'player':'enemy';const s=this.getEntity(n);if(!s)return console.warn(`无法获取最新的实体状态: ${n}`),0;let i;switch(e){case'max_hp':i=s.maxHp||0,console.log(`🔄 动态获取${n}的最新max_hp: ${i}`);break;case'max_lust':i=s.maxLust||0,console.log(`🔄 动态获取${n}的最新max_lust: ${i}`);break;case'max_energy':i=s.maxEnergy||0,console.log(`🔄 动态获取${n}的最新max_energy: ${i}`);break;case'current_hp':i=s.hp||s.currentHp||0,console.log(`🔄 动态获取${n}的最新current_hp: ${i}`);break;case'current_lust':i=s.lust||s.currentLust||0,console.log(`🔄 动态获取${n}的最新current_lust: ${i}`);break;case'current_energy':i=s.energy||0,console.log(`🔄 动态获取${n}的最新current_energy: ${i}`);break;case'hp':i=s.hp||s.currentHp||0,console.log(`🔄 动态获取${n}的最新hp: ${i}`);break;case'lust':i=s.lust||s.currentLust||0,console.log(`🔄 动态获取${n}的最新lust: ${i}`);break;case'energy':i=s.energy||0,console.log(`🔄 动态获取${n}的最新energy: ${i}`);break;case'block':i=s.block||0,console.log(`🔄 动态获取${n}的最新block: ${i}`);break;default:console.warn(`未知的变量引用: ${e}`),i=0}return i}isValidTriggerPrefix(e){return['battle_start','turn_start','turn_end','card_played','on_discard','take_damage','take_heal','lust_increase','lust_decrease','deal_damage','deal_heal','deal_lust_increase','deal_lust_decrease','gain_buff','gain_debuff','lose_buff','lose_debuff','enemy_gain_buff','enemy_gain_debuff','enemy_lose_buff','enemy_lose_debuff','passive'].includes(e)}getCurrentAttributeValue(e,t){switch(t){case'hp':return e.currentHp;case'lust':return e.currentLust;case'energy':return e.energy||0;case'block':return e.block;case'max_hp':return e.maxHp;case'max_lust':return e.maxLust;case'max_energy':return e.maxEnergy||0;case'damage_modifier':case'lust_damage_modifier':case'lust_damage_taken_modifier':case'damage_taken_modifier':case'block_modifier':return this.calculateModifierFromStatusEffects(e,t);default:return 0}}getModifierBreakdown(e,t){let a=0,n=1;for(const s of e.statusEffects){const e=this.dynamicStatusManager.getStatusDefinition(s.id);if(!e)continue;const i=e.triggers.hold||[];for(const e of i){if(!e.includes(t))continue;const i=this.processStacksExpression(e,s.stacks),r=new RegExp(`ME\\\\.${t}\\\\s*([+\\\\-*/=])\\\\s*([\\\\d.]+)`,'i'),o=i.match(r);if(!o)continue;const c=o[1],l=parseFloat(o[2]);isNaN(l)||('+'===c||'-'===c?a+='+'===c?l:-l:'*'===c?n*=l:'/'===c?0!==l&&(n*=1/l):'='===c&&(a=l))}}const s=e.modifiers?.[t];return'number'==typeof s&&0!==s&&(a+=s),a=this.round1(a),n=this.round1(n),{add:a,mul:n}}calculateModifierFromStatusEffects(e,t){let a=0;for(const n of e.statusEffects){const e=this.dynamicStatusManager.getStatusDefinition(n.id);if(!e)continue;const s=e.triggers.hold||[];for(const e of s)if(e.includes(t)){const s=this.processStacksExpression(e,n.stacks),i=this.extractModifierValue(s,t);null!==i&&(a+=i,console.log(`🔢 状态${n.name}(${n.stacks}层)贡献${t}: ${i}`))}}const n=e.modifiers?.[t]||0;return 0!==n&&(a+=n,console.log(`🔢 直接修饰符${t}: ${n}`)),console.log(`📊 ${t}总计: ${a}`),a}analyzeModifierFromStatusEffects(e,t){let a=0,n=1;for(const s of e.statusEffects){const e=this.dynamicStatusManager.getStatusDefinition(s.id);if(!e)continue;const i=e.triggers.hold||[];for(const e of i){if(!e.includes(t))continue;const i=this.processStacksExpression(e,s.stacks),r=new RegExp(`ME\\\\.${t}\\\\s*([+\\\\-*/=])\\\\s*([\\\\d.]+)`,'i'),o=i.match(r);if(!o)continue;const c=o[1],l=parseFloat(o[2]);if(!isNaN(l))switch(c){case'+':a+=l;break;case'-':a-=l;break;case'*':n*=l;break;case'/':0!==l&&(n/=l)}}}const s=e.modifiers?.[t]||0;s&&(a+=s);const i=e=>Math.round(10*e)/10;return{add:i(a),mul:i(n)}}extractModifierValue(e,t){const a=new RegExp(`ME\\\\.${t}\\\\s*([+\\\\-*/=])\\\\s*([\\\\d.]+)`,'i'),n=e.match(a);if(n){const t=n[1],a=parseFloat(n[2]);switch(t){case'+':return a;case'-':return-a;case'*':return console.log(`⚠️ 乘法修饰符暂不支持直接转换: ${e}`),null;case'/':return console.log(`⚠️ 除法修饰符暂不支持直接转换: ${e}`),null;case'=':return console.log(`⚠️ 设置修饰符暂不支持直接转换: ${e}`),null;default:return null}}return null}applyComplexModifiers(e,t,a,n){let i=a,r=!1;for(const a of e.statusEffects){const e=this.dynamicStatusManager.getStatusDefinition(a.id);if(!e)continue;const o=e.triggers.hold||[];for(const e of o)if(e.includes(t)){const o=this.processStacksExpression(e,a.stacks),c=this.applyModifierFromEffect(o,t,i);if(null!==c){const e=i;i=c,r=!0,console.log(`🔧 ${n} - ${a.name}(${a.stacks}层): ${e} → ${i}`),Math.abs(i-e)>=1&&s.addLog(`${n} - ${a.name}: ${e} → ${i}`,'info')}}}const o=e.modifiers?.[t]||0;if(0!==o){const t=i;i+=o,r=!0,o<-50&&(console.error(`🚨 异常修饰符检测: ${n} - 直接修饰符: ${o}`),console.error('🚨 实体修饰符对象:',e.modifiers),console.error('🚨 实体状态效果:',e.statusEffects)),console.log(`🔧 ${n} - 直接修饰符: ${t} + ${o} = ${i}`),Math.abs(o)>=1&&s.addLog(`${n} - 直接修饰符: ${t} + ${o} = ${i}`,'info')}return r&&console.log(`📊 ${n}最终结果: ${a} → ${i}`),i}applyModifierFromEffect(e,t,a){const n=new RegExp(`ME\\\\.${t}\\\\s*([+\\\\-*/=])\\\\s*([\\\\d.]+)`,'i'),s=e.match(n);if(s){const e=s[1],t=parseFloat(s[2]);switch(e){case'+':return a+t;case'-':return a-t;case'*':return a*t;case'/':return 0!==t?a/t:a;case'=':return t;default:return null}}return null}calculateNewValue(e,t,a){switch(t){case'+':return e+a;case'-':return e-a;case'*':return e*a;case'/':return 0!==a?e/a:e;case'=':case'set':return a;default:return e}}clampAttributeValue(e,t,a,n){switch(e){case'hp':{const e=this.gameStateManager.getGameState(),s=(n?'player'===n:a?.id&&e?.player&&a.id===e.player.id)?e?.player:e?.enemy,i=s?.maxHp??a.maxHp;return Math.max(0,Math.min(t,i))}case'lust':{const e=this.gameStateManager.getGameState(),s=(n?'player'===n:a?.id&&e?.player&&a.id===e.player.id)?e?.player:e?.enemy,i=s?.maxLust??a.maxLust;return Math.max(0,Math.min(t,i))}case'energy':case'block':default:return Math.max(0,t);case'max_hp':case'max_lust':case'max_energy':return Math.max(1,t)}}async applyAttributeChange(e,t,a,n){let s;switch(t){case'hp':s=n.currentHp;break;case'lust':s=n.currentLust;break;case'energy':s=n.energy;break;case'block':s=n.block;break;case'max_hp':s=n.maxHp;break;case'max_lust':s=n.maxLust;break;case'max_energy':s=n.maxEnergy;break;default:s='unknown'}console.log(`🔧 应用属性变化: ${e}.${t} = ${a} (原值: ${s})`);const i={};switch(t){case'hp':i.currentHp=a;break;case'lust':i.currentLust=a;break;case'energy':i.energy=a;break;case'block':i.block=a;break;case'max_hp':i.maxHp=a;break;case'max_lust':i.maxLust=a;break;case'max_energy':i.maxEnergy=a;break;case'damage_modifier':case'lust_damage_modifier':case'lust_damage_taken_modifier':case'damage_taken_modifier':case'heal_modifier':case'block_modifier':case'draw':case'discard':case'energy_gain':case'card_play_limit':i.modifiers||(i.modifiers=n.modifiers?{...n.modifiers}:{}),i.modifiers[t]=a,console.log(`设置修饰符 ${t} = ${a}`)}'player'===e?(this.gameStateManager.updatePlayer(i),'energy'===t&&this.refreshUIAfterEnergyChange()):this.gameStateManager.updateEnemy(i)}refreshUIAfterEnergyChange(){try{setTimeout((()=>{const e=this.gameStateManager.getGameState();if(e&&e.player){const t=e.player.energy||0,a=e.player.maxEnergy||3;$('#player-energy').text(`${t}/${a}`),this.updateHandCardsAfterEnergyChange(e.player)}}),10)}catch(e){console.warn('刷新UI失败:',e)}}updateHandCardsAfterEnergyChange(e){try{if(!e.hand)return;e.hand.forEach((t=>{const a=$(`.card[data-card-id=\"${t.id}\"]`);if(a.length>0){let n=!1;n='energy'===t.cost?e.energy>=0:e.energy>=(t.cost||0),n?(a.removeClass('unaffordable').addClass('clickable'),a.find('.card-cost').removeClass('insufficient-energy')):(a.removeClass('clickable').addClass('unaffordable'),a.find('.card-cost').addClass('insufficient-energy'))}}))}catch(e){console.warn('更新手牌显示失败:',e)}}async triggerAttributeChangeEffects(e,t,a,n,s){const i=a-n,r=this.getEntity(e);r?('hp'===t&&i<0?(this.animationManager.showDamageNumber(e,Math.abs(i),'damage'),this.animationManager.updateHealthBarWithAnimation(e,a,r.maxHp),'player'===e?this.animationManager.showPlayerDamageEffect('damage'):this.animationManager.showEnemyDamageEffect('damage')):'hp'===t&&i>0?(this.animationManager.showDamageNumber(e,i,'heal'),this.animationManager.updateHealthBarWithAnimation(e,a,r.maxHp)):'lust'===t&&(this.animationManager.showDamageNumber(e,Math.abs(i),i>0?'lust':'heal'),this.animationManager.updateLustBarWithAnimation(e,a,r.maxLust),i>0&&'player'===e&&await this.relicEffectManager.triggerOnLustIncrease(),a>=r.maxLust&&await this.handleLustOverflow(e)),this.logAttributeChange(e,t,i,a),'hp'===t&&a<=0&&await this.handleEntityDeath(e)):console.warn('无法获取最新实体状态用于动画:',e)}async applyStatusEffect(e,t,a,n){const i=this.dynamicStatusManager.getStatusDefinition(t);if(!i)return console.warn('⚠️ 未找到状态定义:',t),void s.addLog(`未找到状态定义: ${t}`,'system');const r={id:t,name:i.name,type:i.type,description:i.description,emoji:i.emoji,stacks:Math.min(a,i.maxStacks||999)};this.gameStateManager.addStatusEffect(e,r);const o='player'===e?'玩家':'敌人';console.log(`✨ 对${o}施加${a}层${i.name}`),s.logStatusEffect(o,i.name,a,0,!0);const c=this.dynamicStatusManager.getStatusTriggerEffects(t,'apply');if(c.length>0){console.log(`🎯 触发${i.name}的应用时效果:`,c),s.addLog(`${i.name}触发应用时效果`,'action');for(const t of c){const a='player'===e;await this.executeEffectString(t,a,{triggerType:'apply',statusContext:r})}}}async handleLustOverflow(e){'player'===e?await this.handlePlayerClimax():await this.handleEnemyClimax()}async handlePlayerClimax(){const e=this.gameStateManager.getEnemy();e&&e.lustEffect&&(console.log('玩家达到欲望上限，触发高潮惩罚！'),this.animationManager.showLustEffectFlash(),s.logLustOverflow('玩家',e.lustEffect.name||'欲望爆发'),this.lustOverflowDisplay.showPlayerLustOverflow({name:e.lustEffect.name||'欲望爆发',description:e.lustEffect.description||'玩家欲望达到上限，触发敌人的特殊效果',effect:e.lustEffect.effect||''}),await this.executeEffectString(e.lustEffect.effect,!1),this.gameStateManager.updatePlayer({currentLust:0}))}async handleEnemyClimax(){const e=this.gameStateManager.getGameState(),t=e?.battle?.player_lust_effect;t&&(console.log('敌人达到欲望上限，触发玩家主导效果！'),this.animationManager.showLustEffectFlash(),s.logLustOverflow('敌人',t.name||'榨精支配'),this.lustOverflowDisplay.showEnemyLustOverflow({name:t.name||'榨精支配',description:t.description||'敌人欲望达到上限，触发玩家的特殊效果',effect:t.effect||''}),await this.executeEffectString(t.effect,!0),this.gameStateManager.updateEnemy({currentLust:0}))}async handleEntityDeath(e){console.log(`💀 ${'player'===e?'玩家':'敌人'}死亡，战斗结束！`),'player'===e?(this.gameStateManager.setGameOver('enemy'),await this.handleBattleEnd('defeat')):(this.gameStateManager.setGameOver('player'),await this.handleBattleEnd('victory'))}async handleBattleEnd(e){console.log(`🏆 战斗结束: ${e}`),await this.saveBattleResultToMVU(e),await this.triggerBattleEndNarrative(e),setTimeout((()=>{this.clearEnemyFromMVU()}),1e3)}async saveBattleResultToMVU(e){try{const t=this.gameStateManager.getGameState(),a=t.player,n=t.enemy,s=a.statusEffects.map((e=>({name:e.name,stacks:e.stacks,type:e.type,description:e.description}))),i=(a.abilities||[]).map((e=>({effect:e.effect,description:e.description||'无描述'})));let r=100,o=0;try{const e=getVariables({type:'message'}),t=e?.stat_data?.battle;t?.core&&(r=t.core.hp||100,o=t.core.lust||0)}catch(e){console.warn('无法获取初始状态数据:',e)}const c={result:e,player:{initialHp:r,finalHp:a.currentHp,maxHp:a.maxHp,initialLust:o,finalLust:a.currentLust,maxLust:a.maxLust,statusEffects:s,abilities:i,remainingEnergy:a.energy,handSize:a.hand.length,deckSize:a.drawPile.length,discardSize:a.discardPile.length},enemy:n?{name:n.name,finalHp:n.currentHp,maxHp:n.maxHp,finalLust:n.currentLust,maxLust:n.maxLust,statusEffects:n.statusEffects.map((e=>({name:e.name,stacks:e.stacks,type:e.type})))}:null,battleStats:{turnCount:t.currentTurn,totalTurns:t.currentTurn,timestamp:Date.now()}};try{await insertOrAssignVariables({battle_result:JSON.stringify(c)},{type:'character'}),console.log('✅ 详细战斗结果已保存到MVU变量')}catch(e){console.error('❌ 保存战斗结果到MVU变量失败:',e)}}catch(e){console.error('❌ 保存战斗结果失败:',e)}}clearEnemyFromMVU(){try{updateVariablesWith((e=>{const t=e?.stat_data?.battle,a=e?.battle,n=[];t&&'object'==typeof t&&t.enemy&&n.push(t.enemy),a&&'object'==typeof a&&a.enemy&&n.push(a.enemy);return n.forEach((e=>{e&&'object'==typeof e&&(e.name='',e.emoji='',e.max_hp=0,e.hp=0,e.max_lust=100,e.lust=0,e.description='',e.actions=[],e.abilities=[],e.status_effects=[],e.lust_effect=e.lust_effect&&'object'==typeof e.lust_effect?e.lust_effect:{},e.lust_effect||(e.lust_effect={}),e.lust_effect.name='',e.lust_effect.description='',e.lust_effect.effect='',e.action_mode=e.action_mode||'random',e.action_config&&'object'==typeof e.action_config?Object.keys(e.action_config).forEach((t=>delete e.action_config[t])):e.action_config={})})),console.log('✅ 已清空 MVU 的 battle.enemy 字段（保留结构）'),e}),{type:'message'})}catch(e){console.error('❌ 清除战斗临时数据失败:',e)}}async handleAddCardToHand(e,t){try{const e=this.ensureCompleteCardData(t);this.gameStateManager.addCardToHand(e),console.log(`✅ 加入手牌: ${e.name}`),s.addLog(`获得卡牌：${e.name}`,'info',{type:'card',name:e.name,details:e.description||''})}catch(e){console.error('❌ 加入手牌失败:',e)}}async handleAddCardToDeck(e,t){try{const e=this.ensureCompleteCardData(t);this.gameStateManager.addCardToDeck(e),console.log(`✅ 加入抽牌堆: ${e.name}`),s.addLog(`获得卡牌: ${e.name} (加入抽牌堆)`,'info')}catch(e){console.error('❌ 加入抽牌堆失败:',e)}}ensureCompleteCardData(e){if(e&&'object'==typeof e&&e.name&&e.effect)return{id:e.id||`generated_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,name:e.name,emoji:e.emoji||'🃏',type:e.type||'Skill',rarity:e.rarity||'Common',cost:e.cost??1,effect:e.effect,description:e.description||'由效果生成的卡牌',...e};const t='string'==typeof e?e:e?.name||'未知卡牌';return{id:`generated_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,name:t,emoji:'🃏',type:'Skill',rarity:'Common',cost:1,effect:'',description:'由效果生成的基础卡牌'}}async removeAllBuffs(e){const t=this.getEntity(e);if(!t)return;const a=t.statusEffects.filter((e=>{const t=this.dynamicStatusManager.getStatusDefinition(e.id);return t&&'buff'===t.type}));for(const t of a)await this.removeStatusEffect(e,t.id);a.length>0&&(console.log(`✅ 移除了${e}的所有增益状态`),s.addLog('移除了所有增益状态','info'))}async removeAllDebuffs(e){const t=this.getEntity(e);if(!t)return;const a=t.statusEffects.filter((e=>{const t=this.dynamicStatusManager.getStatusDefinition(e.id);return t&&'debuff'===t.type}));for(const t of a)await this.removeStatusEffect(e,t.id);a.length>0&&(console.log(`✅ 移除了${e}的所有减益状态`),s.addLog('移除了所有减益状态','info'))}async removeStatusEffect(e,t){const a=this.getEntity(e);if(!a)return;const n=a.statusEffects.findIndex((e=>e.id===t));if(n>=0){const i=a.statusEffects[n];a.statusEffects.splice(n,1),console.log(`✅ 移除了${e}的状态: ${i.name}`),s.addLog(`移除了状态: ${i.name}`,'info');const r=this.dynamicStatusManager.getStatusTriggerEffects(t,'remove');for(const t of r){const a=t.replace(/stacks/g,i.stacks.toString()),n='player'===e;await this.executeEffectString(a,n,{triggerType:'remove',statusContext:i})}}}async triggerBattleEndNarrative(e,t){try{const a=this.gameStateManager.getGameState(),n=a.player,i=a.enemy,r=t?'战斗终止':'victory'===e?'胜利':'失败';let o=`战斗结束！结果：${r}\\n\\n`;if(t&&(o+=`【叙事】\\n${t}\\n\\n`),o+='【玩家状态】\\n',o+=`- 生命值：${n.currentHp}/${n.maxHp}\\n`,o+=`- 欲望值：${n.currentLust}/${n.maxLust}\\n`,o+=`- 剩余能量：${n.energy}\\n`,n.statusEffects.length>0){o+='- 状态效果：';const e=n.statusEffects.map((e=>{const t=e.stacks>1?`${e.stacks}层`:'';return`${e.name}${t}`})).join('、');o+=e+'\\n'}if(i&&(o+='\\n【敌人状态】\\n',o+=`- ${i.name}：生命值${i.currentHp}/${i.maxHp}，欲望值${i.currentLust}/${i.maxLust}\\n`,i.statusEffects.length>0)){o+='- 状态效果：';const e=i.statusEffects.map((e=>{const t=e.stacks>1?`${e.stacks}层`:'';return`${e.name}${t}`})).join('、');o+=e+'\\n'}o+='\\n【战斗统计】\\n',o+=`- 持续回合：${a.currentTurn}回合\\n`,o+=`- 手牌剩余：${n.hand.length}张\\n`,o+=`- 抽牌堆：${n.drawPile.length}张\\n`,o+=`- 弃牌堆：${n.discardPile.length}张\\n`;const c=n.discardPile.filter((e=>'Event'===e.type));c.length>0&&(o+='\\n【叙事卡牌使用】\\n',c.forEach((e=>{o+=`- 使用了叙事卡牌：${e.name} - ${e.description}\\n`}))),o+='\\n请根据以上详细的战斗结果信息生成后续剧情，体现战斗过程对角色状态的影响。',c.length>0&&(o+='特别注意融入叙事卡牌的使用效果和影响。'),await this.showBattleEndDialog(e,o,r),console.log('✅ 已显示战斗结束弹窗'),s.addLog(`战斗结束：${r}`,'system')}catch(e){console.error('❌ 触发战斗结束叙事失败:',e)}}async showBattleEndDialog(e,t,a){try{const n=`\\n        <div style=\"text-align: center; padding: 20px;\">\\n          <h2 style=\"margin-bottom: 15px;\">${'战斗终止'===a?'🕊️':'victory'===e?'🎉':'💀'} 战斗结束！</h2>\\n          <h3 style=\"color: ${'victory'===e?'#4CAF50':'#f44336'}; margin-bottom: 20px;\">\\n            结果：${a||('victory'===e?'胜利':'失败')}\\n          </h3>\\n          <p style=\"margin-bottom: 20px; font-size: 14px; color: #666;\">\\n            点击确定将发起新的对话来描述后续剧情\\n          </p>\\n        </div>\\n      `,s=$(`\\n        <div class=\"battle-end-dialog\" style=\"\\n          position: fixed;\\n          top: 0;\\n          left: 0;\\n          width: 100%;\\n          height: 100%;\\n          background: rgba(0, 0, 0, 0.8);\\n          display: flex;\\n          justify-content: center;\\n          align-items: center;\\n          z-index: 10000;\\n        \">\\n          <div style=\"\\n            background: white;\\n            border-radius: 12px;\\n            max-width: 500px;\\n            width: 90%;\\n            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\\n          \">\\n            ${n}\\n            <div style=\"text-align: center; padding: 20px; border-top: 1px solid #eee;\">\\n              <button id=\"battle-end-confirm\" style=\"\\n                background: #4CAF50;\\n                color: white;\\n                border: none;\\n                padding: 12px 24px;\\n                border-radius: 6px;\\n                font-size: 16px;\\n                cursor: pointer;\\n                margin-right: 10px;\\n              \">确定</button>\\n            </div>\\n          </div>\\n        </div>\\n      `);return $('body').append(s),$('body').css('overflow','hidden'),$('#gameContainer, .game-interface').css('pointer-events','none'),new Promise((e=>{$('#battle-end-confirm').on('click',(async()=>{try{s.remove(),$('body').css('overflow',''),$('#gameContainer, .game-interface').css('pointer-events',''),await triggerSlash(`/send ${t}`),await triggerSlash('/trigger'),console.log('✅ 已触发详细战斗结束叙事')}catch(e){console.error('❌ 触发战斗结束叙事失败:',e)}e()})),$('#battle-end-skip').on('click',(()=>{s.remove(),$('body').css('overflow',''),$('#gameContainer, .game-interface').css('pointer-events',''),console.log('ℹ️ 用户跳过了战斗结束叙事'),e()}))}))}catch(e){console.error('❌ 显示战斗结束弹窗失败:',e)}}async executeDiscardWithSelector(e,t){this.verbose&&console.log(`🎯 使用选择器 ${e} 弃掉${t}张卡牌`);try{const a=await this.cardSystem.selectCards(e,t);for(const e of a)this.cardSystem.discardCard(e.id),this.verbose&&console.log(`弃掉卡牌: ${e.name}`);this.verbose&&console.log(`使用选择器 ${e} 弃掉了${a.length}张卡牌`)}catch(e){console.error('选择器弃牌失败:',e)}}async discardRandomCards(e){let t=[...this.gameStateManager.getPlayer().hand];const a=this.executionContext.currentCard;a&&(t=t.filter((e=>e.id!==a.id)),console.log(`🚫 排除当前正在使用的卡牌: ${a.name}`));const n=t.sort((()=>Math.random()-.5)),s=Math.min(Number(e)||0,n.length);console.log(`🎲 随机弃牌: 需要弃置${e}张，实际弃置${s}张`);const i=n.slice(0,s);for(const e of i)this.cardSystem.discardCard(e.id)}async triggerNarrative(e){try{await this.saveBattleResultToMVU('victory'),await this.triggerBattleEndNarrative('victory',e),console.log('✅ 已触发叙事(携带详细战斗数据):',e)}catch(e){console.error('❌ 触发叙事失败:',e)}}async reduceCardsCost(e,t){let a=await this.cardSystem.selectCards(e,'all'===e?999:1);if(a=a.filter((e=>'Curse'!==e.type&&'energy'!==e.cost&&Number(e.cost)>0)),0===a.length)return void s.addLog('无可减费目标，效果跳过','info');for(const e of a){const a=Number(e.cost)||0,n=Math.max(0,a-t);e.cost=n,console.log(`${e.name} 费用从 ${a} 减少到 ${n}`),s.addLog(`减少费用：${e.name} ${a} → ${n}`,'info',{type:'card',name:e.name})}const n=this.gameStateManager.getPlayer().hand;this.gameStateManager.updatePlayer({hand:n})}async copySelectedCard(e){const t=await this.cardSystem.selectCards(e,1);if(0===t.length)return void console.log('没有卡牌可复制');const a=t[0],n={...a,id:`${a.id}_copy_${Date.now()}`},s=[...this.gameStateManager.getPlayer().hand,n];this.gameStateManager.updatePlayer({hand:s}),console.log(`复制了卡牌: ${a.name}`)}async triggerCardEffectTwice(e){const t=await this.cardSystem.selectCards(e,1);if(0===t.length)return void console.log('没有卡牌可触发');const a=t[0];a.doubleEffect=!0,console.log(`${a.name} 下次使用时效果将触发两次`)}async executeDiscardWithSelectorV2(e,t=1){}async executeReduceCostWithSelector(e,t){const a=/(?:^|\\.)all$/.test(e)||'all'===e;let n='hand',i=e;const r=e.match(/^(hand|draw|discard)\\.(.+)$/);r&&(n=r[1],i=r[2]);const o=this.gameStateManager.getPlayer(),c=e=>'Curse'!==e?.type&&'energy'!==e?.cost&&Number(e?.cost)>0,l=('hand'===n?o.hand:'draw'===n?o.drawPile:o.discardPile).filter(c);if(/\\brandom(\\d+)?\\b/.test(i)){if(0===l.length)return void s.addLog('无可减费目标，效果跳过','info');const e=i.match(/random(\\d+)/),a=Math.max(1,Math.min(e?parseInt(e[1],10):1,l.length)),n=[...l].sort((()=>Math.random()-.5)).slice(0,a);for(const e of n){const a=Number(e.cost)||0,n=Math.max(0,a-t);e.cost=n,console.log(`${e.name} 费用从 ${a} 减少到 ${n}`),s.addLog(`减少费用：${e.name} ${a} → ${n}`,'info',{type:'card',name:e.name})}return void this.gameStateManager.updatePlayer({hand:this.gameStateManager.getPlayer().hand})}if(/\\ball\\b/.test(i)||a){if(0===l.length)return void s.addLog('无可减费目标，效果跳过','info');for(const e of l){const a=Number(e.cost)||0,n=Math.max(0,a-t);e.cost=n,console.log(`${e.name} 费用从 ${a} 减少到 ${n}`),s.addLog(`减少费用：${e.name} ${a} → ${n}`,'info',{type:'card',name:e.name})}return void this.gameStateManager.updatePlayer({hand:this.gameStateManager.getPlayer().hand})}if(/\\bchoose\\b/.test(i)){if(0===l.length)return void s.addLog('无可减费目标，效果跳过','info');let e=[];try{e=await this.showCardSelectionUI(l,1,'选择要减费的卡牌')}catch{e=[]}if(0===e.length)return;const a=e[0],n=Number(a.cost)||0,i=Math.max(0,n-t);return a.cost=i,console.log(`${a.name} 费用从 ${n} 减少到 ${i}`),s.addLog(`减少费用：${a.name} ${n} → ${i}`,'info',{type:'card',name:a.name}),void this.gameStateManager.updatePlayer({hand:this.gameStateManager.getPlayer().hand})}let d=await this.selectCardsWithSelector(e,a?999:1);if(d=d.filter(c),0!==d.length){for(const e of d){const a=Number(e.cost)||0,n=Math.max(0,a-t);e.cost=n,console.log(`${e.name} 费用从 ${a} 减少到 ${n}`),s.addLog(`减少费用：${e.name} ${a} → ${n}`,'info',{type:'card',name:e.name})}this.gameStateManager.updatePlayer({hand:this.gameStateManager.getPlayer().hand}),console.log(`使用选择器 ${e} 减少了${d.length}张卡牌的费用`)}else s.addLog('无可减费目标，效果跳过','info')}async executeCopyCardWithSelector(e){const t=await this.selectCardsWithSelector(e,1);if(0===t.length)return void console.log('没有卡牌可复制');const a=t[0],n={...a,id:`${a.id}_copy_${Date.now()}`};this.gameStateManager.getPlayer();this.gameStateManager.addCardToHand(n),console.log(`使用选择器 ${e} 复制了卡牌: ${a.name}`)}async executeTriggerEffectWithSelector(e){const t=await this.selectCardsWithSelector(e,1);if(0===t.length)return void console.log('没有卡牌可触发');const a=t[0];a.doubleEffect=!0,console.log(`使用选择器 ${e} 标记了 ${a.name} 下次使用时效果将触发两次`)}async selectCardsWithSelector(e,t){const a=this.gameStateManager.getPlayer();let n='hand',s=e;const i=e.match(/^(hand|draw|discard)\\.(.+)$/);i&&(n=i[1],s=i[2]);let r=[];if('hand'===n&&(r=[...a.hand]),'draw'===n&&(r=[...a.drawPile]),'discard'===n&&(r=[...a.discardPile]),0===r.length)return[];const o=s.split('+'),c=[];for(const e of o){const n=e.trim();let s=[];if('all_cards'!==n){switch(n){case'random':{const e=r.filter((e=>'Curse'!==e.type&&'energy'!==e.cost&&Number(e.cost)>0)),t=e.length>0?e:r;if(t.length>0){const e=Math.floor(Math.random()*t.length);s=[t[e]]}break}case'leftmost':r.length>0&&(s=[r[0]]);break;case'rightmost':r.length>0&&(s=[r[r.length-1]]);break;case'all':s=r.filter((e=>'Curse'!==e.type&&'energy'!==e.cost&&Number(e.cost)>0));break;case'choose':try{s=await this.showCardSelectionUI(r,t,'选择要操作的卡牌')}catch(e){console.log('用户取消了卡牌选择'),s=[]}0===s.length&&toastr?.info?.('无可选目标');break;default:{const e=n.match(/^(leftmost|rightmost|random)(\\d+)$/);if(e){const[,t,a]=e,n=Math.min(parseInt(a,10),r.length);if('leftmost'===t)s=r.slice(0,n);else if('rightmost'===t)s=r.slice(-n);else if('random'===t){const e=[...r].sort((()=>Math.random()-.5));s=e.slice(0,n)}}else n.startsWith('random')&&/random\\d+$/.test(n);break}}for(const e of s)c.some((t=>t.id===e.id))||c.push(e);r=r.filter((e=>!s.some((t=>t.id===e.id))))}else{const e=[...a.hand,...a.drawPile,...a.discardPile];for(const t of e)c.some((e=>e.id===t.id))||c.push(t)}}return c.slice(0,t)}async showCardSelectionUI(e,t,a='选择卡牌',n=!0){return new Promise(((s,i)=>{if(!e||0===e.length)return toastr?.info?.('无可选目标'),s([]);const r=[],o=$(`\\n        <div class=\"card-selection-modal\">\\n          <div class=\"modal-backdrop\"></div>\\n          <div class=\"modal-content\">\\n            <div class=\"modal-header\">\\n              <h3>${a}</h3>\\n              <p>请选择 ${t} 张卡牌</p>\\n              <div class=\"selection-counter\">已选择: <span class=\"selected-count\">0</span> / ${t}</div>\\n            </div>\\n            <div class=\"modal-body\">\\n              <div class=\"selection-cards-container\">\\n                ${e.map((e=>`\\n                  <div class=\"selection-card\" data-card-id=\"${e.id}\">\\n                    <div class=\"card-emoji\">${e.emoji}</div>\\n                    <div class=\"card-name\">${e.name}</div>\\n                    <div class=\"card-cost\">${e.cost}</div>\\n                    <div class=\"card-description\">${e.description||''}</div>\\n                  </div>\\n                `)).join('')}\\n              </div>\\n            </div>\\n            <div class=\"modal-footer\">\\n              ${n?'<button class=\"btn btn-secondary cancel-selection\">取消</button>':''}\\n              <button class=\"btn btn-primary confirm-selection\" disabled>确认选择</button>\\n            </div>\\n          </div>\\n        </div>\\n      `);$('body').append(o),o.fadeIn(200),o.on('click','.selection-card',(function(){const a=$(this).data('card-id'),n=e.find((e=>e.id===a));if(n){if($(this).hasClass('selected')){$(this).removeClass('selected');const e=r.findIndex((e=>e.id===a));e>-1&&r.splice(e,1)}else r.length<t&&($(this).addClass('selected'),r.push(n));o.find('.selected-count').text(r.length),o.find('.confirm-selection').prop('disabled',r.length!==t)}})),o.on('click','.confirm-selection',(()=>{o.fadeOut(200,(()=>o.remove())),s(r)})),o.on('click','.cancel-selection, .modal-backdrop',(()=>{n&&(o.fadeOut(200,(()=>o.remove())),i(new Error('卡牌选择被取消')))}))}))}isMathExpression(e){return/[+\\-*/()]/.test(e)&&/[a-zA-Z_]/.test(e)}calculateDynamicValue(e,t){try{let a=e;const n=/(ME|OP)\\.([a-zA-Z_][a-zA-Z0-9_]*)|([a-zA-Z_][a-zA-Z0-9_]*)/g;a=a.replace(n,((e,a,n,s)=>{let i,r;if(a&&n)i='ME'===a?this.executionContext.sourceIsPlayer?'player':'enemy':this.executionContext.sourceIsPlayer?'enemy':'player',r=n;else{if(!s)return e;if(r=s,'stacks'===r){const e=this.executionContext?.statusContext?.stacks||0;return console.log(`🔄 解析stacks变量: ${e}`),e.toString()}i=['energy','max_energy','draw','discard','hand_size','deck_size','discard_pile_size','cards_played_this_turn'].includes(r)?'player':t}const o=this.gameStateManager.getGameState(),c='player'===i?o.player:o.enemy;if(!c)return console.warn(`无法获取实体: ${i}`),'0';const l=this.getVariableValue(r,c),d=this.getVariableDisplayName(r);this.verbose&&console.log(`🔄 解析最新变量 ${e} -> ${l} (${'player'===i?'玩家':'敌人'}的${d})`);return(Number.isFinite(l)?l:0).toString()}));const s=this.evaluateMathExpression(a);return this.verbose&&console.log(`计算表达式: ${e} -> ${a} = ${s}`),s}catch(t){return console.error('动态变量计算失败:',t,'表达式:',e),0}}getVariableDisplayName(e){return{hp:'生命值',max_hp:'最大生命值',lust:'欲望值',max_lust:'最大欲望值',energy:'当前能量',max_energy:'最大能量',block:'格挡',damage_modifier:'伤害修正',lust_damage_modifier:'欲望伤害修正',damage_taken_modifier:'受伤修正',lust_damage_taken_modifier:'欲望受伤修正',heal_modifier:'治疗修正',block_modifier:'格挡修正',draw:'抽牌',discard:'弃牌',energy_gain:'能量获得',card_play_limit:'出牌限制',hand_size:'手牌数',cards_played_this_turn:'本回合出牌数',deck_size:'抽牌堆数',discard_pile_size:'弃牌堆数'}[e]||e}getVariableValue(e,t){switch(e){case'hp':return t.hp||t.currentHp||0;case'max_hp':return t.maxHp||0;case'lust':return t.lust||t.currentLust||0;case'max_lust':return t.maxLust||0;case'energy':return this.getEnergyValue(t);case'max_energy':return this.getMaxEnergyValue(t);case'block':return t.block||0;case'damage_modifier':case'lust_damage_modifier':case'damage_taken_modifier':case'lust_damage_taken_modifier':case'heal_modifier':case'block_modifier':case'draw':case'discard':case'energy_gain':case'card_play_limit':return(t.modifiers||{})[e]||0;case'hand_size':if(void 0!==t.hand)return t.hand.length||0;return this.gameStateManager.getPlayer().hand.length||0;case'cards_played_this_turn':const a=this.gameStateManager.getGameState();return a?.cardsPlayedThisTurn||0;case'deck_size':if(void 0!==t.drawPile)return t.drawPile.length||0;return this.gameStateManager.getPlayer().drawPile.length||0;case'discard_pile_size':if(void 0!==t.discardPile)return t.discardPile.length||0;return this.gameStateManager.getPlayer().discardPile.length||0;default:return console.warn(`未知变量: ${e}`),0}}getEnergyValue(e){const t=void 0!==e.energy?e:this.gameStateManager.getPlayer();if(!t)return 0;const a=this.executionContext;if(void 0!==a.energyBeforeCardPlay&&a.cardContext)return console.log(`[Debug] 卡牌效果中使用打出前能量: ${a.energyBeforeCardPlay}`),a.energyBeforeCardPlay;if('condition_evaluation'===a.triggerType){const e=t.energy||0;return console.log(`[Debug] 条件判断中使用当前能量: ${e}`),e}const n=t.energy||0;return console.log(`[Debug] 默认使用当前能量: ${n}`),n}getMaxEnergyValue(e){const t=void 0!==e.maxEnergy?e:this.gameStateManager.getPlayer();return t?.maxEnergy||0}evaluateMathExpression(e){const t=e.replace(/\\s+/g,'');if(!/^[0-9+\\-*/.()]+$/.test(t))throw new Error(`不安全的表达式: ${e}`);try{const e=new Function(`\"use strict\"; return (${t})`)();if('number'!=typeof e||!isFinite(e))throw new Error(`表达式结果无效: ${e}`);return Math.round(e)}catch(e){return console.error('数学表达式求值失败:',e),0}}logAttributeChange(e,t,a,n){const i='player'===e?'玩家':'敌人',r=this.getAttributeDisplayName(t);a>0?s.addLog(`${i}的${r}增加${a}点，当前${n}`,'info'):a<0&&s.addLog(`${i}的${r}减少${Math.abs(a)}点，当前${n}`,'info')}getAttributeDisplayName(e){const t=this.parser.getAttributeDefinition(e);return t?t.displayName:e}sortExpressionsByPriority(e){const t={max_hp:10,max_lust:11,max_energy:12,conditional:15,hp:20,lust:21,energy:22,block:23,damage_modifier:30,damage_taken_modifier:31,lust_damage_modifier:32,lust_damage_taken_modifier:33,block_modifier:34,status:40,ability:50,draw:60,discard:61,add_to_hand:62,add_to_deck:63,exhaust:64,reduce_cost:65,copy_card:66,trigger_effect:67,narrate:70};return e.sort(((e,a)=>(t[e.attribute]||999)-(t[a.attribute]||999)))}loadDynamicStatusDefinitions(){this.dynamicStatusManager.forceReload()}getDynamicStatusDefinition(e){return this.dynamicStatusManager.getStatusDefinition(e)}async processStatusEffectsAtTurnStart(e){await this.processStatusEffectsByTrigger(e,'turn_start')}async processStatusEffectsAtBattleStart(e){await this.processStatusEffectsByTrigger(e,'battle_start')}async processStatusEffectsAtTurnEnd(e){await this.processStatusEffectsByTrigger(e,'tick'),await this.processStatusEffectsByTrigger(e,'turn_end'),await this.applyStatusStacksDecay(e)}async processAbilitiesAtTurnStart(e){await this.processAbilitiesByTrigger(e,'turn_start')}async processAbilitiesAtBattleStart(e){await this.processAbilitiesByTrigger(e,'battle_start')}async processAbilitiesAtTurnEnd(e){await this.processAbilitiesByTrigger(e,'turn_end')}async processAbilitiesOnTakeDamage(e){await this.processAbilitiesByTrigger(e,'take_damage')}async processAbilitiesOnTakeHeal(e){await this.processAbilitiesByTrigger(e,'take_heal')}async processAbilitiesOnDealDamage(e){await this.processAbilitiesByTrigger(e,'deal_damage')}async processAbilitiesOnDealHeal(e){await this.processAbilitiesByTrigger(e,'deal_heal')}async processAbilitiesOnLustIncrease(e){await this.processAbilitiesByTrigger(e,'lust_increase')}async processAbilitiesOnLustDecrease(e){await this.processAbilitiesByTrigger(e,'lust_decrease')}async processAbilitiesOnDealLustIncrease(e){await this.processAbilitiesByTrigger(e,'deal_lust_increase')}async processAbilitiesOnDealLustDecrease(e){await this.processAbilitiesByTrigger(e,'deal_lust_decrease')}async processAbilitiesOnGainBuff(e){await this.processAbilitiesByTrigger(e,'gain_buff')}async processAbilitiesOnGainDebuff(e){await this.processAbilitiesByTrigger(e,'gain_debuff')}async processAbilitiesOnLoseBuff(e){await this.processAbilitiesByTrigger(e,'lose_buff')}async processAbilitiesOnLoseDebuff(e){await this.processAbilitiesByTrigger(e,'lose_debuff')}async processAbilitiesOnEnemyGainBuff(e){await this.processAbilitiesByTrigger(e,'enemy_gain_buff')}async processAbilitiesOnEnemyGainDebuff(e){await this.processAbilitiesByTrigger(e,'enemy_gain_debuff')}async processAbilitiesOnEnemyLoseBuff(e){await this.processAbilitiesByTrigger(e,'enemy_lose_buff')}async processAbilitiesOnEnemyLoseDebuff(e){await this.processAbilitiesByTrigger(e,'enemy_lose_debuff')}async processAbilitiesOnAbilityGain(e){await this.processAbilitiesByTrigger(e,'ability_gain')}async processStatusEffectsByTrigger(e,t){const a=this.getEntity(e);if(!a)return;const n=[...a.statusEffects];for(const a of n){if(!['apply','remove','tick','stack'].includes(t))continue;const n=this.dynamicStatusManager.getStatusTriggerEffects(a.id,t);for(const s of n){const n=this.processStacksExpression(s,a.stacks),i='player'===e;await this.executeEffectString(n,i,{triggerType:t,statusContext:a})}}}async processAbilitiesByTrigger(e,t){const a=this.getEntity(e);if(!a||!a.abilities)return;const n=[...a.abilities];for(const a of n){if(!a.effect){console.warn(`能力格式错误，缺少效果: ${JSON.stringify(a)}`);continue}let n,i;const r=a.effect.match(/^([\\w_]+)\\((.+)\\)$/);if(r){{const[,e,t]=r;n=e,i=t}n===t&&(console.log(`🔥 触发能力: ${t}(${i}) (${e})`),await this.executeEffectString(i,'player'===e,{triggerType:t,abilityContext:a}),s.addLog(`触发能力: ${t}(${i})`,'info'))}else console.warn(`能力格式错误，应使用新格式 trigger(effects): ${a.effect}`)}}async applyStatusStacksDecay(e){const t=this.getEntity(e);if(!t)return;const a=t.statusEffects.map((e=>{const t={...e},a=this.dynamicStatusManager.getStatusDefinition(e.id);if(a&&void 0!==a.stacks_change){const e=a.stacks_change;if('number'==typeof e)(e>0||e<0)&&(t.stacks=Math.max(0,t.stacks+e));else if('string'==typeof e&&e.startsWith('x')){const a=parseFloat(e.substring(1));isNaN(a)||(t.stacks=Math.floor(t.stacks*a))}}return t})).filter((e=>e.stacks>0));'player'===e?this.gameStateManager.updatePlayer({statusEffects:a}):this.gameStateManager.updateEnemy({statusEffects:a});const n=t.statusEffects.filter((e=>!a.some((t=>t.id===e.id))));for(const a of n){console.log(`✅ 状态效果结束: ${a.name} (${e})`),s.addLog(`状态效果结束: ${a.name}`,'info');try{const n=this.dynamicStatusManager.getStatusTriggerEffects(a.id,'remove');for(const t of n){const n=t.replace(/stacks/g,a.stacks.toString()),s='player'===e;await this.executeEffectString(n,s,{triggerType:'remove',statusContext:a})}this.clearDirectModifiers(t,a.id)}catch(e){console.error('处理状态移除效果失败:',e)}}}async addAbilityNewImpl(e,t){const a=this.getEntity(e);if(!a)return;let n;const i=t.match(/^([\\w_]+)\\((.+)\\)$/);if(!i)return void console.error('能力格式错误，应为 trigger(effects)');[,n]=i;const r={id:`ability_${Date.now()}_${Math.random().toString(36).slice(2,8)}`,trigger:n,effect:t},o=[...a.abilities||[],r];'player'===e?this.gameStateManager.updatePlayer({abilities:o}):this.gameStateManager.updateEnemy({abilities:o}),console.log(`✅ 添加能力: ${t} (${e})`),s.addLog(`获得能力: ${t}`,'info'),await this.processAbilitiesOnAbilityGain(e);const c=t.match(/^battle_start\\((.+)\\)$/);if(c){console.log(`🚀 检测到战斗开始能力，立即触发: ${t}`);const e=c[1],a=this.executionContext;await this.executeEffectString(e,a.sourceIsPlayer,{...a,triggerType:'battle_start'})}}async removeAbility(e,t){const a=this.getEntity(e);if(!a)return;let n,i=0;n=(a.abilities||[]).filter((e=>{const a=e.effect===t;return a&&i++,!a})),i>0?('player'===e?this.gameStateManager.updatePlayer({abilities:n}):this.gameStateManager.updateEnemy({abilities:n}),console.log(`✅ 移除能力: ${t} (${e})`),s.addLog(`失去能力: ${t}`,'info')):console.log(`⚠️ 未找到要移除的能力: ${t} (${e})`)}processStacksExpression(e,t){let a=e.replace(/stacks/g,t.toString());return a=a.replace(/(\\d+(?:\\.\\d+)?)\\s*([*\\/])\\s*(\\d+(?:\\.\\d+)?)/g,((e,t,a,n)=>{const s=parseFloat(t),i=parseFloat(n);let r;switch(a){case'*':r=s*i;break;case'/':r=s/i;break;default:return e}return r.toFixed(2).replace(/\\.?0+$/,'')})),a}}class g{static instance;gameStateManager;effectExecutor;constructor(){this.gameStateManager=n.GameStateManager.getInstance(),this.effectExecutor=u.getInstance()}static getInstance(){return g.instance||(g.instance=new g),g.instance}async triggerOnTurnStart(){const e=this.gameStateManager.getPlayer().relics||[];console.log('🔮 检查回合开始时的遗物效果...'),console.log(`🔮 玩家共有 ${e.length} 个遗物:`,e.map((e=>`${e.name}: ${e.effect}`)));for(const t of e)t.effect&&t.effect.includes('turn_start(')?(console.log(`🔮 触发回合开始遗物: ${t.name}`),await this.triggerRelicEffect(t,'turn_start')):t.effect&&console.log(`🔮 跳过遗物 ${t.name}: 不包含turn_start触发`)}async triggerOnTurnEnd(){const e=this.gameStateManager.getPlayer().relics||[];console.log('🔮 检查回合结束时的遗物效果...');for(const t of e)t.effect&&t.effect.includes('turn_end(')&&await this.triggerRelicEffect(t,'turn_end')}async triggerOnBattleStart(){const e=this.gameStateManager.getPlayer().relics||[];console.log('🔮 检查战斗开始时的遗物效果...');for(const t of e)t.effect&&t.effect.includes('battle_start(')&&await this.triggerRelicEffect(t,'battle_start')}async triggerPassiveEffects(){const e=this.gameStateManager.getPlayer().relics||[];console.log('🔮 检查被动遗物效果...');for(const t of e)t.effect&&t.effect.includes('passive(')&&await this.triggerRelicEffect(t,'passive')}async triggerOnLustIncrease(){const e=this.gameStateManager.getPlayer().relics||[];console.log('🔮 检查欲望增加时的遗物效果...');for(const t of e)t.effect&&t.effect.includes('lust_increase(')&&(console.log(`🔮 触发欲望增加遗物: ${t.name}`),await this.triggerRelicEffect(t,'lust_increase'))}triggerOnTakeDamage(e){(this.gameStateManager.getPlayer().relics||[]).forEach((t=>{t.effect&&t.effect.includes('on_take_damage:')&&this.triggerRelicEffect(t,'on_take_damage',{damage:e})}))}triggerOnDealDamage(e){(this.gameStateManager.getPlayer().relics||[]).forEach((t=>{t.effect&&t.effect.includes('on_deal_damage:')&&this.triggerRelicEffect(t,'on_deal_damage',{damage:e})}))}async triggerOnCardPlayed(){const e=this.gameStateManager.getPlayer().relics||[];console.log('🔮 检查打出卡牌时的遗物效果...');for(const t of e)t.effect&&t.effect.includes('card_played(')&&await this.triggerRelicEffect(t,'card_played')}async triggerRelicEffect(e,t,a){try{console.log(`🔮 触发遗物效果: ${e.name} (${t})`),console.log(`🔍 遗物效果字符串: ${e.effect}`),this.showRelicTriggerFeedback(e);const a=this.extractTriggeredSegments(e.effect,t);if(a.length>0){for(const n of a){let a=this.convertLegacyIfSyntax(n);console.log(`🎯 执行遗物新格式效果: ${a}`),await this.effectExecutor.executeEffectString(a,!0,{isRelicEffect:!0,relicContext:e,triggerType:t}),console.log(`✅ 遗物 ${e.name} 成功触发效果: ${a}`)}return}console.log(`⚠️ 遗物 ${e.name} 不包含 ${t}(...) 触发片段，跳过`)}catch(t){console.error(`❌ 遗物效果执行失败: ${e.name}`,t)}}hasRelicWithTrigger(e){return(this.gameStateManager.getPlayer().relics||[]).some((t=>t.effect&&t.effect.includes(`${e}:`)))}getRelicsWithTrigger(e){return(this.gameStateManager.getPlayer().relics||[]).filter((t=>t.effect&&t.effect.includes(`${e}:`)))}async triggerOnCardDiscarded(e){const t=this.gameStateManager.getPlayer().relics||[];console.log('🔮 检查卡牌弃掉时的遗物效果...');for(const e of t)e.effect.includes('card_discarded(')&&(console.log(`🔮 遗物 ${e.name} 有卡牌弃掉触发效果`),await this.triggerRelicEffect(e,'card_discarded'))}convertLegacyIfSyntax(e){let t=e;return t=t.replace(/if\\(([^)]+)\\)\\(([^)]+(?:\\([^)]*\\)[^)]*)*)\\)/g,((e,t,a)=>(console.log(`🔄 转换旧if语法: ${e} -> if[${t}][${a}]`),`if[${t}][${a}]`))),t}extractTriggeredSegments(e,t){const a=[],n=new RegExp(`${t}\\\\(`,'g');let s;for(;null!==(s=n.exec(e));){let n=s.index+t.length+1,i=1,r='';for(;n<e.length&&i>0;){const t=e[n];'('===t?i++:')'===t&&i--,i>0&&(r+=t),n++}0===i&&a.push(r.trim())}return a}showRelicTriggerFeedback(e){console.log(`💫 遗物 ${e.name} 发动！`);const t=$(`.relic-item[data-relic-id=\"${e.id}\"]`);t.length>0&&(t.addClass('relic-triggered'),setTimeout((()=>{t.removeClass('relic-triggered')}),1e3))}}class h{static instance;gameStateManager;cardSystem;effectEngine;animationManager;relicEffectManager;constructor(){this.gameStateManager=n.GameStateManager.getInstance(),this.cardSystem=l.getInstance(),this.effectEngine=c.getInstance(),this.animationManager=i.getInstance(),this.relicEffectManager=g.getInstance(),this.setupEventListeners()}static getInstance(){return h.instance||(h.instance=new h),h.instance}setupEventListeners(){}async initializeBattle(e){console.log('初始化战斗:',e.name),this.gameStateManager.setEnemy(e);const t=this.gameStateManager.getPlayer();this.gameStateManager.updatePlayer({energy:t.maxEnergy}),this.gameStateManager.setCurrentTurn(0),this.cardSystem.drawStartingHand(),this.setEnemyNextAction(),this.gameStateManager.setPhase('player_turn')}async startPlayerTurn(){console.log('玩家回合开始');const e=this.gameStateManager.getPlayer();this.gameStateManager.updatePlayer({energy:e.maxEnergy}),this.effectEngine.processStatusEffectsAtTurnStart('player'),await this.effectEngine.processAbilitiesAtTurnStart('player'),await this.relicEffectManager.triggerOnTurnStart(),this.cardSystem.onTurnStart(),this.gameStateManager.isGameOver()||console.log('等待玩家操作...')}async endPlayerTurn(){console.log('玩家回合结束'),'function'==typeof this.cardSystem.onTurnEnd&&this.cardSystem.onTurnEnd(),await this.effectEngine.processStatusEffectsAtTurnEnd('player'),this.gameStateManager.incrementTurn(),await this.executeEnemyTurn(),await this.startNewTurn()}async executeEnemyTurn(){console.log('敌人回合开始');const e=this.gameStateManager.getEnemy();if(e&&(this.effectEngine.processStatusEffectsAtTurnStart('enemy'),await this.effectEngine.processAbilitiesAtTurnStart('enemy'),!this.gameStateManager.isGameOver())){if(this.gameStateManager.getGameState().currentTurn>1&&e.nextAction)console.log(`🎯 执行预定行动: ${e.nextAction.name}`),await this.executeEnemyAction();else if(e.actions&&e.actions.length>0){const t=this.filterMetadata(e.actions);if(t.length>0){const a=t[Math.floor(Math.random()*t.length)];e.nextAction={name:a.name,description:a.description,effect:a.effect,weight:a.weight||1},await this.executeEnemyAction()}}else await this.executeDefaultEnemyAction();this.setEnemyNextAction();try{const{EnemyIntentManager:e}=a(331),t=this.gameStateManager.getEnemy();t&&e.updateEnemyIntentDisplay(t)}catch(e){console.warn('刷新敌人意图显示失败:',e)}this.gameStateManager.isGameOver()||(this.gameStateManager.updateEnemy({block:0}),await this.effectEngine.processStatusEffectsAtTurnEnd('enemy'))}}async startNewTurn(){this.gameStateManager.clearTemporaryModifiers(),this.gameStateManager.setPhase('player_turn');const e=this.gameStateManager.getPlayer();this.gameStateManager.updatePlayer({block:0}),this.gameStateManager.updatePlayer({energy:e.maxEnergy}),'function'==typeof this.cardSystem.onTurnStart&&this.cardSystem.onTurnStart(),this.effectEngine.processStatusEffectsAtTurnStart('player'),await this.effectEngine.processAbilitiesAtTurnStart('player'),await this.relicEffectManager.triggerOnTurnStart(),console.log(`🔄 开始第 ${this.gameStateManager.getGameState().currentTurn} 回合`)}async executeEnemyAction(){const e=this.gameStateManager.getEnemy();if(!e||!e.nextAction)return;const t=e.nextAction;console.log(`敌人执行行动: ${t.name}`);try{this.animationManager.showEnemyActionAnimation(t.name,t.description),await this.effectEngine.executeEffect(t.effect,!1,'player')}catch(e){console.error('执行敌人行动时发生错误:',e)}try{if(this.gameStateManager.getEnemy()){this.setEnemyNextAction();const{EnemyIntentManager:e}=a(331);e.updateEnemyIntentDisplay(this.gameStateManager.getEnemy())}}catch(e){console.warn('刷新敌人意图显示失败:',e)}}async executeDefaultEnemyAction(){const e=this.gameStateManager.getEnemy();if(!e)return;const t=Math.floor(8*Math.random())+5;await this.effectEngine.executeEffect(`damage:${t}`,!1,'player'),console.log(`${e.name} 执行默认攻击，造成 ${t} 点伤害`)}filterMetadata(e){return e.filter((e=>e&&'object'==typeof e&&e.name&&e.effect&&!e.isMetadata))}setEnemyNextAction(){const e=this.gameStateManager.getEnemy();if(!e||!e.actions||0===e.actions.length)return;const t=this.filterMetadata(e.actions);if(0===t.length)return;let a=null;const n=e.actionMode||'random',s=e.actionConfig||{};switch(n){case'random':default:a=this.selectRandomAction(t);break;case'probability':a=this.selectProbabilityAction(t,s);break;case'sequence':a=this.selectSequenceAction(t,s);break;case'sequence_then_probability':a=this.selectSequenceThenProbabilityAction(t,s)}if(a){const e=this.generateEnemyIntent(a);this.gameStateManager.updateEnemy({nextAction:a,intent:e}),console.log(`🎯 设置敌人下一行动 (${n}): ${a.name}`)}}selectRandomAction(e){return e[Math.floor(Math.random()*e.length)]}selectProbabilityAction(e,t){let a=0;const n=e.map((e=>{const n=t[e.name]||1;return a+=n,{action:e,weight:n}}));let s=Math.random()*a;for(const{action:e,weight:t}of n)if(s-=t,s<=0)return e;return e[0]}selectSequenceAction(e,t){const a=t.sequence||e.map((e=>e.name));if(!a||0===a.length)return this.selectRandomAction(e);const n=a[(this.gameStateManager.getGameState().currentTurn-1)%a.length];return e.find((e=>e.name===n))||this.selectRandomAction(e)}selectSequenceThenProbabilityAction(e,t){const a=t&&t.sequence||[],n=(this.gameStateManager.getEnemy(),this.gameStateManager.getGameState().currentTurn);if(Array.isArray(a)&&a.length>0&&n<=a.length){const t=a[n-1],s=e.find((e=>e.name===t));if(s)return s}const s=t&&t.probability||t||{};return this.selectProbabilityAction(e,s)}generateEnemyIntent(e){const t=e.effect.toLowerCase();if(t.includes('damage:')){const e=t.match(/damage:(\\d+)/),a=e?parseInt(e[1]):0;return{type:'attack',value:a,description:`即将攻击 ${a} 点伤害`,emoji:'⚔️'}}if(t.includes('block:')){const e=t.match(/block:(\\d+)/),a=e?parseInt(e[1]):0;return{type:'defend',value:a,description:`即将获得 ${a} 点格挡`,emoji:'🛡️'}}if(t.includes('apply_status:'))return{type:'debuff',description:'即将施加负面效果',emoji:'💜'};if(t.includes('lust_damage:')){const e=t.match(/lust_damage:(\\d+)/),a=e?parseInt(e[1]):0;return{type:'special',value:a,description:`即将造成 ${a} 点欲望伤害`,emoji:'💕'}}return{type:'special',description:'即将执行特殊行动',emoji:'❓'}}showEnemyActionFeedback(e){const t=$(`\\n      <div class=\"enemy-action-feedback\">\\n        <div class=\"action-name\">${e.name}</div>\\n        <div class=\"action-description\">${e.description}</div>\\n      </div>\\n    `);$('.card-game-container').append(t),t.fadeIn(300).delay(2e3).fadeOut(500,(()=>{t.remove()}))}async handleGameOver(){const e=this.gameStateManager.getGameState();console.log('游戏结束, 胜利者:',e.winner),await this.saveGameStatistics('player'===e.winner),this.cleanup()}async saveGameStatistics(e){try{const t=getVariables({type:'character'}).fishRPG_stats||{gamesPlayed:0,wins:0,losses:0,totalTurns:0,totalDamageDealt:0,totalDamageTaken:0},a=this.gameStateManager.getGameState();t.gamesPlayed++,t.totalTurns+=a.currentTurn,e?t.wins++:t.losses++,await insertOrAssignVariables({fishRPG_stats:JSON.stringify(t)},{type:'character'}),console.log('游戏统计已保存')}catch(e){console.error('保存游戏统计失败:',e)}}resetBattle(){this.gameStateManager.resetGame(),console.log('战斗已重置')}cleanup(){console.log('清理战斗资源')}delay(e){return new Promise((t=>setTimeout(t,e)))}canPlayerAct(){const e=this.gameStateManager.getGameState();return'player_turn'===e.phase&&!e.isGameOver}getPlayableCards(){return this.cardSystem.getPlayableCards()}async playCard(e,t){if(!this.canPlayerAct())return console.log('当前无法使用卡牌'),!1;const a=await this.cardSystem.playCard(e,t);if(a){const e=this.gameStateManager.getEnemy();e&&e.currentHp<=0&&this.gameStateManager.setGameOver('player')}return a}forceEndTurn(){this.canPlayerAct()&&this.endPlayerTurn()}getBattleInfo(){const e=this.gameStateManager.getGameState(),t=this.getPlayableCards();return{currentPhase:e.phase,currentTurn:e.currentTurn,isGameOver:e.isGameOver,winner:e.winner,player:e.player,enemy:e.enemy,playableCardsCount:t.length,canPlayerAct:this.canPlayerAct()}}updateEnemyAI(e){const t=this.gameStateManager.getPlayer();e.actions.forEach((e=>{e.effect.includes('damage:')&&t.block>10?e.weight*=.7:e.effect.includes('block:')&&t.currentHp<.3*t.maxHp&&(e.weight*=1.3)})),this.gameStateManager.updateEnemy({actions:e.actions})}adjustDifficulty(e){const t=this.gameStateManager.getEnemy();if(!t)return;const a={...t,maxHp:Math.floor(t.maxHp*e),currentHp:Math.floor(t.currentHp*e),actions:t.actions.map((t=>({...t,effect:this.adjustActionEffect(t.effect,e)})))};this.gameStateManager.updateEnemy(a),console.log(`难度已调整为 ${e}x`)}adjustActionEffect(e,t){return e.replace(/(\\d+)/g,(e=>{const a=parseInt(e);return Math.floor(a*t).toString()}))}}class p{static instance;static effectDisplay=r.W.getInstance();constructor(){}static getInstance(){return p.instance||(p.instance=new p),p.instance}showPile(e,t,a){this.closePileViewer();const n=a||this.getPileTitle(e),s=this.createPileViewer(n,t);$('body').append(s),s.css({opacity:0}).animate({opacity:1},300)}closePileViewer(){const e=$('.pile-viewer');e.length>0&&e.animate({opacity:0},200,(function(){$(this).remove()}))}createPileViewer(e,t){const a=t.map((e=>this.createCardHTML(e))).join(''),n=$(`\\n      <div class=\"pile-viewer\">\\n        <div class=\"pile-viewer-overlay\"></div>\\n        <div class=\"pile-viewer-content\">\\n          <div class=\"pile-viewer-header\">\\n            <h3>${e} (${t.length}张)</h3>\\n            <button class=\"close-btn\" type=\"button\">✕</button>\\n          </div>\\n          <div class=\"pile-viewer-body\">\\n            ${a||'<div class=\"empty-pile\">牌堆为空</div>'}\\n          </div>\\n        </div>\\n      </div>\\n    `);return n.find('.close-btn, .pile-viewer-overlay').on('click',(()=>{this.closePileViewer()})),n.find('.pile-viewer-content').on('click',(e=>{e.stopPropagation()})),n}createCardHTML(e){const t=p.effectDisplay.parseEffectToTags(e.effect,{isPlayerCard:!0}),a=p.effectDisplay.createCompactEffectTagsHTML(t),n='Corrupt'===e.type?'Skill':e.type;return`\\n      <div class=\"card enhanced-card rarity-${'Corrupt'===e.type?'Corrupt':e.rarity} card-type-${n}\" data-card-id=\"${e.id}\">\\n        <div class=\"card-header\">\\n          <div class=\"card-cost\">${e.cost}</div>\\n          <div class=\"card-rarity-gem\"></div>\\n        </div>\\n        <div class=\"card-artwork\">\\n          <div class=\"card-emoji\">${e.emoji}</div>\\n          ${e.retain?'<div class=\"card-keyword retain\">保留</div>':''}\\n          ${e.exhaust?'<div class=\"card-keyword exhaust\">消耗</div>':''}\\n          ${e.ethereal?'<div class=\"card-keyword ethereal\">空灵</div>':''}\\n        </div>\\n        <div class=\"card-body\">\\n          <div class=\"card-name\">${e.name}</div>\\n          <div class=\"card-description\">${e.description}</div>\\n          ${a}\\n        </div>\\n      </div>\\n    `}getPileTitle(e){switch(e){case'draw':return'抽牌堆';case'discard':return'弃牌堆';case'exhaust':return'消耗堆';default:return'牌堆'}}setupPileClickEvents(){$(document).on('click','.deck-stat[data-pile=\"draw\"], .draw-pile-indicator',(e=>{e.preventDefault(),this.handlePileClick('draw')})),$(document).on('click','.deck-stat[data-pile=\"discard\"], .discard-pile-indicator',(e=>{e.preventDefault(),this.handlePileClick('discard')})),$(document).on('click','.deck-stat[data-pile=\"exhaust\"], .exhaust-pile-indicator',(e=>{e.preventDefault(),this.handlePileClick('exhaust')})),console.log('✅ 牌堆点击事件已设置')}handlePileClick(e){const t=new CustomEvent('requestPileData',{detail:{pileType:e}});document.dispatchEvent(t)}showPileByType(e,t){const a=t.getPlayer();if(!a)return void console.warn('无法获取玩家数据');let n=[],s='';switch(e){case'draw':n=a.drawPile||[],s='抽牌堆';break;case'discard':n=a.discardPile||[],s='弃牌堆';break;case'exhaust':n=a.exhaustPile||[],s='消耗堆'}this.showPile(e,n,s),console.log(`📚 显示${s}: ${n.length}张卡牌`)}}class m{static updatePileStats(e,t,a=0){$('.deck-stat[data-pile=\"draw\"] .deck-count, .draw-pile-count').text(e),$('.deck-stat[data-pile=\"discard\"] .deck-count, .discard-pile-count').text(t),$('.deck-stat[data-pile=\"exhaust\"] .deck-count, .exhaust-pile-count').text(a),$('.deck-stat[data-pile=\"draw\"]').toggleClass('clickable',e>0),$('.deck-stat[data-pile=\"discard\"]').toggleClass('clickable',t>0),$('.deck-stat[data-pile=\"exhaust\"]').toggleClass('clickable',a>0),console.log(`📊 更新牌堆统计: 抽牌堆${e}, 弃牌堆${t}, 消耗堆${a}`)}static createPileStatsHTML(){return'\\n      <div class=\"deck-info\">\\n        <div class=\"deck-stat clickable\" data-pile=\"draw\" title=\"点击查看抽牌堆\">\\n          <div class=\"deck-icon\">🃏</div>\\n          <div class=\"deck-label\">抽牌堆</div>\\n          <div class=\"deck-count\">0</div>\\n        </div>\\n        <div class=\"deck-stat clickable\" data-pile=\"discard\" title=\"点击查看弃牌堆\">\\n          <div class=\"deck-icon\">🗂️</div>\\n          <div class=\"deck-label\">弃牌堆</div>\\n          <div class=\"deck-count\">0</div>\\n        </div>\\n        <div class=\"deck-stat clickable\" data-pile=\"exhaust\" title=\"点击查看消耗堆\">\\n          <div class=\"deck-icon\">💨</div>\\n          <div class=\"deck-label\">消耗堆</div>\\n          <div class=\"deck-count\">0</div>\\n        </div>\\n      </div>\\n    '}}class y{static effectDisplay=r.W.getInstance();static translateCardType(e){return{Attack:'攻击',Skill:'技能',Power:'能力',Event:'事件',Curse:'诅咒'}[e]||e}static translateRarity(e){return{Common:'普通',Uncommon:'罕见',Rare:'稀有',Epic:'史诗',Legendary:'传说',Corrupt:'腐化',Corrupted:'腐化'}[e]||e}static async refreshBattleUI(e){try{if(!e)return void console.error('无法获取游戏状态');const t=e.enemy,a=e.player;if(t&&this.updateEnemyDisplay(t),a&&this.updatePlayerDisplay(a),this.updateOtherElements(e),e.player&&e.player.hand&&this.updateHandCardsDisplay(e.player.hand),e.player){const t=e.player.drawPile?.length||0,a=e.player.discardPile?.length||0,n=e.player.exhaustPile?.length||0;m.updatePileStats(t,a,n)}this.updateDeckCounts(e),this.updateAbilitiesDisplay(e.player.abilities||[],e.enemy?.abilities||[]),console.log('✅ 战斗UI刷新完成')}catch(e){console.error('❌ 刷新战斗UI失败:',e)}}static updateEnemyDisplay(e){$('#enemy-name').text(e.name||'未知敌人'),$('.enemy-emoji').text(e.emoji||'👹');const t=e.maxHp>0?e.currentHp/e.maxHp*100:0;$('.enemy-card .hp-fill').css('width',`${t}%`),$('#enemy-hp').text(`${e.currentHp}/${e.maxHp}`);const a=e.maxLust>0?e.currentLust/e.maxLust*100:0;$('.enemy-card .lust-fill').css('width',`${a}%`),$('#enemy-lust').text(`${e.currentLust}/${e.maxLust}`);const n=e.block||0;$('#enemy-block').text(n);const s=$('#enemy-block-container');n>0?s.show():s.hide(),this.updateStatusEffects('enemy',e.statusEffects||[]),this.updateLustEffectDisplay('enemy',e.lustEffect)}static updatePlayerDisplay(e){const t=e.currentHp||0,a=e.maxHp||100,s=e.currentLust||0,i=e.maxLust||100,r=e.energy||0,o=e.block||0,c=a>0?t/a*100:0;$('.player-card .hp-fill').css('width',`${c}%`),$('#player-hp').text(`${t}/${a}`);const l=i>0?s/i*100:0;$('.player-card .lust-fill').css('width',`${l}%`),$('#player-lust').text(`${s}/${i}`),$('#player-energy').text(`${r}/${e.maxEnergy||3}`),$('#player-block').text(o);const d=$('#block-stat-container');o>0?d.show():d.hide(),this.updateRelicsDisplay(e.relics||[]),this.updateStatusEffects('player',e.statusEffects||[]);const f=n.GameStateManager.getInstance(),u=f.gameState?.battle?.player_lust_effect;this.updateLustEffectDisplay('player',u)}static updateOtherElements(e){$('#battle-scene').show(),$('#setup-scene').hide(),$('#turn-number').text(e.currentTurn||1);const t=this.getPhaseText(e.phase);$('#game-phase').text(t)}static getPhaseText(e){switch(e){case'setup':return'准备阶段';case'player_turn':return'玩家回合';case'enemy_turn':return'敌人回合';case'game_over':return'游戏结束';default:return'未知阶段'}}static updateHandCardsDisplay(e){try{const t=$('.player-hand');if(t.empty(),!e||!Array.isArray(e))return void console.log('没有手牌数据或手牌为空');const a=this.filterMetadata(e);a.forEach(((e,a)=>{if(e&&e.name){const n=this.createEnhancedCardElement(e,a);t.append(n)}}));try{const e=a.length,n=t.width()||0,s=110,i=10,r=16,o=s+10;let c;if(s+(e-1)*o<=n)c=o;else if(c=Math.floor((n-s)/Math.max(1,e-1)),c=Math.max(r,Math.min(c,o)),e>i){const e=Math.floor((n-s)/(i-1));c=Math.min(c,e)}t.attr('data-count',String(e)),t.css('--card-offset',c+'px');t.children('.enhanced-card').each(((e,t)=>{const a=e*c;$(t).css({left:`${a}px`})}))}catch(e){console.warn('手牌重叠布局计算失败:',e)}console.log(`✅ 更新手牌显示完成，显示了 ${a.length} 张卡牌`)}catch(e){console.error('❌ 更新手牌显示失败:',e)}}static createEnhancedCardElement(e,t){let a=e.type||'Skill',s=e.rarity||'Common';'Corrupt'===a&&(a='Skill',s='Corrupt');const i={id:e.id||e.originalId||`card_${t}`,name:e.name||'未知卡牌',cost:e.cost||0,type:a,rarity:s,emoji:e.emoji||'🃏',effect:e.effect||'',description:e.description||'',retain:e.retain||!1,exhaust:e.exhaust||!1,ethereal:e.ethereal||!1},r=n.GameStateManager.getInstance().getGameState(),o=r.player?.energy||0;let c,l;'Curse'===i.type?(c=0,l='—'):'energy'===i.cost?(c=Math.max(0,o),l='X'):(c=i.cost??0,l=c.toString());const d='Curse'!==i.type&&o>=c,f='player_turn'===r.phase,u=$(`\\n      <div class=\"card enhanced-card rarity-${i.rarity} card-type-${i.type} ${f&&(d||'Curse'===i.type)?'clickable':'unaffordable'}\"\\n           data-card-id=\"${i.id}\">\\n        <div class=\"card-header\">\\n          <div class=\"card-cost ${d?'':'insufficient-energy'}\">${l}</div>\\n          <div class=\"card-rarity-gem\"></div>\\n          <div class=\"card-type-indicator\">${this.translateCardType(i.type)}</div>\\n        </div>\\n        <div class=\"card-artwork\">\\n          <div class=\"card-emoji\">${i.emoji}</div>\\n          ${i.retain?'<div class=\"card-keyword retain\">保留</div>':''}\\n          ${i.exhaust?'<div class=\"card-keyword exhaust\">消耗</div>':''}\\n          ${i.ethereal?'<div class=\"card-keyword ethereal\">空灵</div>':''}\\n        </div>\\n        <div class=\"card-body\">\\n          <div class=\"card-name\">${i.name}</div>\\n          <div class=\"card-description\">${i.description}</div>\\n        </div>\\n        <div class=\"card-glow\"></div>\\n      </div>\\n    `);return u.on('mouseenter',(()=>{u.addClass('card-hover'),this.showCardTooltip(u,i)})).on('mouseleave',(()=>{u.removeClass('card-hover'),this.hideCardTooltip()})).on('click',(()=>{this.hideCardTooltip()})),u}static showCardTooltip(e,t){const a=y.effectDisplay.parseEffectToTags(t.effect,{isPlayerCard:!0}),n=y.effectDisplay.createWrappedEffectTagsHTML(a),s=$(`\\n      <div class=\"card-tooltip\">\\n        <div class=\"tooltip-header\">${t.name}</div>\\n        <div class=\"tooltip-meta\">\\n          <span class=\"tooltip-cost\">💎${t.cost}</span>\\n          <span class=\"tooltip-type\">${this.translateCardType(t.type)}</span>\\n          <span class=\"tooltip-rarity\">${this.translateRarity(t.rarity)}</span>\\n        </div>\\n        ${n?`<div class=\"tooltip-effects\">${n}</div>`:''}\\n        <div class=\"tooltip-description\">${t.description}</div>\\n        ${t.retain||t.exhaust||t.ethereal?`\\n          <div class=\"tooltip-keywords\">\\n            ${t.retain?'<span class=\"keyword\">保留</span>':''}\\n            ${t.exhaust?'<span class=\"keyword\">消耗</span>':''}\\n            ${t.ethereal?'<span class=\"keyword\">空灵</span>':''}\\n          </div>\\n        `:''}\\n      </div>\\n    `);$('body').append(s);const i=e.offset();if(i){const t=$(window),a=t.width()||0,n=t.height()||0,r=e.outerWidth()||0,o=e.outerHeight()||0,c=320,l=220,d=a-(i.left+r),f=i.left,u=i.top;let g=0,h=0;d>=c+12?(g=i.left+r+8,h=Math.max(8,Math.min(i.top,n-l-8))):f>=c+12?(g=i.left-c-8,h=Math.max(8,Math.min(i.top,n-l-8))):u>=l+12?(g=Math.max(8,Math.min(i.left+r/2-c/2,a-c-8)),h=i.top-l-8):(g=Math.max(8,Math.min(i.left+r/2-c/2,a-c-8)),h=i.top+o+8),s.css({position:'absolute',left:g,top:h,width:c,zIndex:1e3})}s.fadeIn(200)}static hideCardTooltip(){$('.card-tooltip').fadeOut(200,(function(){$(this).remove()}))}static filterMetadata(e){return Array.isArray(e)?e.filter((e=>'$__META_EXTENSIBLE__$'!==e&&'[]'!==e&&null!=e&&''!==e)):[]}static updateDeckCounts(e){if(!e?.player)return void console.warn('⚠️ updateDeckCounts: 没有找到玩家数据');const t=e.player,a=t.drawPile?.length||0;$('#draw-pile-count').text(a);const n=t.discardPile?.length||0;$('#discard-pile-count').text(n);const s=t.exhaustPile?.length||0;$('#exhaust-pile-count').text(s),console.log(`牌堆计数更新 - 抽牌堆: ${a}, 弃牌堆: ${n}, 消耗堆: ${s}`),console.log('牌堆状态:',{hand:t.hand?.length||0,drawPile:t.drawPile?.length||0,discardPile:t.discardPile?.length||0,exhaustPile:t.exhaustPile?.length||0})}static updateRelicsDisplay(e){const t=$('.relic-grid');if(0===t.length)return void console.warn('遗物容器不存在');if(!e||0===e.length)return void t.html('<div class=\"no-relics\">暂无遗物</div>');const a=e.map((e=>`\\n        <div class=\"relic-container\"\\n             data-relic-id=\"${e.id}\"\\n             data-relic-name=\"${e.name||'未知遗物'}\"\\n             data-relic-description=\"${e.description||'无描述'}\"\\n             data-relic-effect=\"${e.effect||'无效果'}\">\\n          <button class=\"relic-toggle\">${e.emoji||'📿'} ${e.name||'未知遗物'}</button>\\n        </div>\\n      `)).join('');t.html(a),t.find('.relic-toggle').on('click',(function(){const e=$(this).closest('.relic-container'),t=e.hasClass('expanded');if($('.relic-container').removeClass('expanded'),$('.relic-details').remove(),!t){e.addClass('expanded');const t=e.data('relic-name'),a=e.data('relic-description'),n=e.data('relic-effect'),s=y.effectDisplay.parseEffectToTags(n||'',{isPlayerCard:!0,isStatusDisplay:!0}),i=`\\n          <div class=\"relic-details\">\\n            <div class=\"relic-name\">${t}</div>\\n            <div class=\"relic-description\">${a}</div>\\n            <div class=\"relic-effects\">${y.effectDisplay.createEffectTagsHTML(s)}</div>\\n          </div>\\n        `;e.append(i)}})),console.log(`🔮 更新遗物显示: ${e.length} 个遗物`,e)}static updateStatusEffects(e,t){const a='player'===e?'#player-status-effects':'#enemy-status-effects';let n=$(a);if(0===n.length)return void console.warn(`状态效果容器不存在: ${a}`);console.log(`🎭 更新${e}状态效果:`,t);const s=t.map((t=>{console.log('🔍 处理状态效果:',t);const a=d.b.getInstance().getStatusDefinition(t.id),n=a?.emoji||'⚡',s=a?.name||t.name||t.id,i=t.stacks||1,r=t.duration;let o=`${n} ${s}`;i>0&&(o+=` ${i}`);const c=y.calculateStatusEffectValue(t,a);return null!==c&&(o+=c),r&&r>0&&(o+=` (${r})`),`\\n          <div class=\"status-effect-item clickable\"\\n               data-status-id=\"${t.id}\"\\n               data-target=\"${e}\">\\n            ${o}\\n          </div>\\n        `})).join('');n.html(s),n.find('.status-effect-item').off('click').on('click',(function(){const e=$(this).data('status-id'),a=$(this).data('target');t.find((t=>t.id===e))&&y.showStatusDetail(e,a)})),console.log(`🎭 更新${e}状态效果: ${t.length} 个`)}static calculateStatusEffectValue(e,t){if(!t||!t.triggers.tick)return null;const a=e.stacks||1;for(const e of t.triggers.tick){const t=e.replace(/stacks/g,a.toString()),n=[{regex:/ME\\.damage_modifier\\s*\\+\\s*([\\d.]+)/,prefix:'+'},{regex:/ME\\.damage_modifier\\s*-\\s*([\\d.]+)/,prefix:'-'},{regex:/ME\\.lust_damage_modifier\\s*\\+\\s*([\\d.]+)/,prefix:'+'},{regex:/ME\\.lust_damage_modifier\\s*-\\s*([\\d.]+)/,prefix:'-'},{regex:/ME\\.block_modifier\\s*\\+\\s*([\\d.]+)/,prefix:'+'},{regex:/ME\\.block_modifier\\s*-\\s*([\\d.]+)/,prefix:'-'},{regex:/ME\\.damage_taken_modifier\\s*\\+\\s*([\\d.]+)/,prefix:'+'},{regex:/ME\\.damage_taken_modifier\\s*-\\s*([\\d.]+)/,prefix:'-'},{regex:/ME\\.lust_damage_taken_modifier\\s*\\+\\s*([\\d.]+)/,prefix:'+'},{regex:/ME\\.lust_damage_taken_modifier\\s*-\\s*([\\d.]+)/,prefix:'-'}];for(const e of n){const a=t.match(e.regex);if(a){const t=parseFloat(a[1]);return` ${e.prefix}${t}`}}const s=t.match(/ME\\.\\w+\\s*\\*\\s*([\\d.]+)/);if(s){return` ×${parseFloat(s[1])}`}const i=t.match(/ME\\.\\w+\\s*\\/\\s*([\\d.]+)/);if(i){return` ÷${parseFloat(i[1])}`}const r=t.match(/ME\\.\\w+\\s*=\\s*([\\d.]+)/);if(r){return` =${parseFloat(r[1])}`}}return null}static updateAbilitiesDisplay(e,t){const a=document.getElementById('player-abilities');a&&(e.length>0?a.innerHTML=e.map((e=>this.createAbilityHTML(e))).join(''):a.innerHTML='');const n=document.getElementById('enemy-abilities');n&&(t.length>0?n.innerHTML=t.map((e=>this.createAbilityHTML(e))).join(''):n.innerHTML='')}static createAbilityHTML(e){const t=e.effect||'无效能力',a=y.effectDisplay.parseEffectToTags(t,{isPlayerCard:!1,isStatusDisplay:!0}),n=y.effectDisplay.createEffectTagsHTML(a);return`\\n      <div class=\"ability-item\" data-ability-id=\"${e.id}\">\\n        ${n||'<div class=\"ability-error\">无效能力</div>'}\\n      </div>\\n    `}static showStatusDetail(e,t){console.log(`显示状态详情: ${e} (${t})`);const a=d.b.getInstance().getStatusDefinition(e),s=n.GameStateManager.getInstance().getGameState(),i='player'===t?s.player:s.enemy,r=i?.statusEffects?.find((t=>t.id===e));if(!a||!r)return void console.warn(`未找到状态定义或当前状态: ${e}`);let o='';if(a.triggers){const e=[];if(Object.entries(a.triggers).forEach((([t,a])=>{a&&a.length>0&&a.forEach((a=>{const n=a.replace(/stacks/g,r.stacks.toString());e.push(`${t}: ${n}`)}))})),e.length>0){const t=[],a={};e.forEach((e=>{const[t,...n]=e.split(':'),s=n.join(':').trim();a[t]||(a[t]=[]),a[t].push(s)})),Object.entries(a).forEach((([e,a])=>{const n=a.join(', '),s=y.effectDisplay.parseTriggeredEffectToTags(e,n,{isPlayerCard:!1,isStatusDisplay:!0});t.push(...s)})),o=y.effectDisplay.createEffectTagsHTML(t)}}$('.status-detail-modal').remove();const c=$(`\\n      <div class=\"status-detail-modal\">\\n        <div class=\"status-detail-overlay\"></div>\\n        <div class=\"status-detail-content\">\\n          <div class=\"status-detail-header\">\\n            <div class=\"status-detail-icon\">${a.emoji||'⚡'}</div>\\n            <div class=\"status-detail-name\">${a.name}</div>\\n            <button class=\"close-status-detail\">&times;</button>\\n          </div>\\n          <div class=\"status-detail-body\">\\n            <div class=\"status-description\">${a.description}</div>\\n              <div class=\"status-stats\">\\n              <div>层数: ${r.stacks||1}</div>\\n              <div>类型: ${'buff'===a.type?'增益':'debuff'===a.type?'减益':'中性'}</div>\\n            </div>\\n            ${o?`<div class=\"status-effects\"><h4>效果:</h4>${o}</div>`:''}\\n          </div>\\n        </div>\\n      </div>\\n    `);$('body').append(c),c.css({opacity:0}).animate({opacity:1},200),c.find('.close-status-detail, .status-detail-overlay').on('click',(()=>{c.animate({opacity:0},200,(function(){$(this).remove()}))}))}static updateLustEffectDisplay(e,t){const a=$('enemy'===e?'#enemy-lust-effect':'#player-lust-effect');if(t&&t.name){let e='';try{const a=y.effectDisplay.parseEffectToTags(t.effect||'',{isPlayerCard:!1});e=y.effectDisplay.createEffectTagsHTML(a)}catch(e){console.warn('欲望效果解析失败，降级为展示描述:',t.effect,e)}const n=`\\n        <div class=\"lust-effect-container\">\\n          <button class=\"lust-effect-toggle\">欲望效果</button>\\n          <div class=\"lust-effect-details\">\\n            <div class=\"lust-effect-name\">${t.name}</div>\\n            <div class=\"lust-effect-description\">${t.description||''}</div>\\n            ${e?`<div class=\"lust-effect-tags\">${e}</div>`:''}\\n          </div>\\n        </div>\\n      `;a.html(n),a.find('.lust-effect-toggle').on('click',(function(){const e=$(this).closest('.lust-effect-container'),t=e.hasClass('expanded');$('.lust-effect-container').removeClass('expanded'),t||e.addClass('expanded')}))}else a.html('<div class=\"no-lust-effect\">无特殊效果</div>')}}class b{static instance;constructor(){this.initializeCardEffects()}static getInstance(){return b.instance||(b.instance=new b),b.instance}initializeCardEffects(){$(document).on('mousemove','.enhanced-card.rarity-Rare, .enhanced-card.rarity-Epic, .enhanced-card.rarity-Legendary',(e=>{this.handleCardMouseMove(e)})),$(document).on('mouseleave','.enhanced-card.rarity-Rare, .enhanced-card.rarity-Epic, .enhanced-card.rarity-Legendary',(e=>{this.handleCardMouseLeave(e)})),$(document).on('mouseenter','.enhanced-card.rarity-Rare, .enhanced-card.rarity-Epic, .enhanced-card.rarity-Legendary',(e=>{this.handleCardMouseEnter(e)}))}handleCardMouseMove(e){const t=e.currentTarget,a=t.getBoundingClientRect(),n=e.clientX-a.left,s=e.clientY-a.top,i=a.width/2,r=a.height/2,o=(s-r)/r*-20,c=(n-i)/i*20;t.style.transform=`perspective(1000px) rotateX(${o}deg) rotateY(${c}deg) translateZ(10px)`}handleCardMouseEnter(e){const t=e.currentTarget;t.style.boxShadow='0 25px 50px rgba(0, 0, 0, 0.5)',t.style.zIndex='10'}handleCardMouseLeave(e){const t=e.currentTarget;t.style.transform='perspective(1000px) rotateX(0deg) rotateY(0deg) translateZ(0px)',t.style.boxShadow='',t.style.zIndex=''}}class v{static instance;activeParticles=new Map;constructor(){this.initializeParticleEffects()}static getInstance(){return v.instance||(v.instance=new v),v.instance}initializeParticleEffects(){this.startLegendaryParticles(),$(document).on('mouseenter','.enhanced-card.rarity-Epic',(e=>{this.startEpicHoverParticles($(e.currentTarget))})),$(document).on('mouseleave','.enhanced-card.rarity-Epic',(e=>{this.stopEpicHoverParticles($(e.currentTarget))})),$(document).on('mouseenter','.enhanced-card.rarity-Legendary',(e=>{this.startLegendaryVortexEffect($(e.currentTarget))})),$(document).on('mouseleave','.enhanced-card.rarity-Legendary',(e=>{this.stopLegendaryVortexEffect($(e.currentTarget))})),this.setupCardCleanup()}setupCardCleanup(){setInterval((()=>{Array.from(this.activeParticles.keys()).forEach((e=>{const t=e.replace('-regular','').replace('-vortex',''),a=$(`.enhanced-card[data-card-id=\"${t}\"]`);if(!a.length||!a.is(':visible')){const t=this.activeParticles.get(e);t&&(t.forEach((e=>clearInterval(e))),this.activeParticles.delete(e))}}))}),1e3)}startLegendaryParticles(){$(document).on('DOMNodeInserted','.enhanced-card.rarity-Legendary',(e=>{this.startSingleLegendaryParticles($(e.target))})),$('.enhanced-card.rarity-Legendary').each(((e,t)=>{this.startSingleLegendaryParticles($(t))}))}startSingleLegendaryParticles(e){const t=e.attr('data-card-id')||'legendary-regular-'+Date.now();if(this.activeParticles.has(t+'-regular'))return;const a=setInterval((()=>{this.createLegendaryParticle(e)}),200);this.activeParticles.set(t+'-regular',[a])}createLegendaryParticle(e){if(!e.length||!e.is(':visible')||!e.offset())return;const t=e.offset();if(!t)return;const a=$('\\n      <div class=\"legendary-particle\" style=\"\\n        position: fixed;\\n        width: 4px;\\n        height: 4px;\\n        background: radial-gradient(circle, #fbbf24, #f59e0b);\\n        border-radius: 50%;\\n        pointer-events: none;\\n        z-index: 1000;\\n        box-shadow: 0 0 6px #f59e0b;\\n      \"></div>\\n    '),n=Math.random()*Math.PI*2,s=Math.min(e.outerWidth(),e.outerHeight())/2,i=t.left+e.outerWidth()/2,r=t.top+e.outerHeight()/2,o=i+Math.cos(n)*s,c=r+Math.sin(n)*s;a.css({left:o+'px',top:c+'px'}),$('body').append(a);const l=2e3+1e3*Math.random(),d=50+30*Math.random();a.animate({left:o+Math.cos(n)*d+'px',top:c+Math.sin(n)*d+'px',opacity:0},l,(function(){$(this).remove()}))}startEpicHoverParticles(e){const t=e.attr('data-card-id')||'epic-'+Date.now(),a=setInterval((()=>{this.createEpicParticle(e)}),100);this.activeParticles.set(t,[a])}stopEpicHoverParticles(e){const t=e.attr('data-card-id')||'epic-'+Date.now(),a=this.activeParticles.get(t);a&&(a.forEach((e=>clearInterval(e))),this.activeParticles.delete(t))}createEpicParticle(e){const t=e.offset();if(!t)return;const a=$('\\n      <div class=\"epic-particle\" style=\"\\n        position: fixed;\\n        width: 3px;\\n        height: 3px;\\n        background: radial-gradient(circle, #ef4444, #dc2626);\\n        border-radius: 50%;\\n        pointer-events: none;\\n        z-index: 1000;\\n        box-shadow: 0 0 4px #dc2626;\\n      \"></div>\\n    '),n=t.left+Math.random()*e.outerWidth(),s=t.top+Math.random()*e.outerHeight();a.css({left:n+'px',top:s+'px'}),$('body').append(a);const i=1e3+500*Math.random(),r=40*(Math.random()-.5),o=-20-20*Math.random();a.animate({left:n+r+'px',top:s+o+'px',opacity:0},i,(function(){$(this).remove()}))}startLegendaryVortexEffect(e){const t=e.attr('data-card-id')||'legendary-vortex-'+Date.now();this.stopLegendaryRegularParticles(e);const a=setInterval((()=>{this.createVortexParticle(e)}),50);this.activeParticles.set(t+'-vortex',[a])}stopLegendaryVortexEffect(e){const t=e.attr('data-card-id')||'legendary-vortex-'+Date.now(),a=this.activeParticles.get(t+'-vortex');a&&(a.forEach((e=>clearInterval(e))),this.activeParticles.delete(t+'-vortex')),this.restartLegendaryRegularParticles(e)}stopLegendaryRegularParticles(e){const t=e.attr('data-card-id')||'legendary-regular-'+Date.now(),a=this.activeParticles.get(t+'-regular');a&&(a.forEach((e=>clearInterval(e))),this.activeParticles.delete(t+'-regular'))}restartLegendaryRegularParticles(e){const t=e.attr('data-card-id')||'legendary-regular-'+Date.now(),a=setInterval((()=>{this.createLegendaryParticle(e)}),200);this.activeParticles.set(t+'-regular',[a])}createVortexParticle(e){if(!e.length||!e.is(':visible')||!e.offset())return;const t=e.offset();if(!t)return;const a=$('\\n      <div class=\"vortex-particle\" style=\"\\n        position: fixed;\\n        width: 3px;\\n        height: 3px;\\n        background: radial-gradient(circle, #fbbf24, #f59e0b);\\n        border-radius: 50%;\\n        pointer-events: none;\\n        z-index: 1000;\\n        box-shadow: 0 0 8px #f59e0b;\\n      \"></div>\\n    '),n=t.left+e.outerWidth()/2,s=t.top+e.outerHeight()/2,i=.8*Math.max(e.outerWidth(),e.outerHeight()),r=Math.random()*Math.PI*2,o=n+Math.cos(r)*i,c=s+Math.sin(r)*i;a.css({left:o+'px',top:c+'px'}),$('body').append(a);let l=0;const d=()=>{l+=16;const e=l/1500;if(e>=1)return void a.remove();const t=i*(1-e),o=r+3*Math.PI*2*e,c=n+Math.cos(o)*t,f=s+Math.sin(o)*t,u=1-e;a.css({left:c+'px',top:f+'px',opacity:u}),requestAnimationFrame(d)};requestAnimationFrame(d)}}class x{isVisible=!1;gameStateManager;effectExecutor;constructor(e){this.gameStateManager=e,this.effectExecutor=u.getInstance(),this.initializeUI(),this.setupEventListeners()}initializeUI(){$('body').append('\\n      <div id=\"modifier-display-panel\" class=\"modifier-display-panel\" style=\"display: none;\">\\n        <div class=\"modifier-panel-header\">\\n          <h3>当前修饰符</h3>\\n          <button id=\"modifier-panel-close\" class=\"close-btn\">×</button>\\n        </div>\\n        <div class=\"modifier-panel-content\">\\n          <div id=\"modifier-list\" class=\"modifier-list\">\\n            \\x3c!-- 修饰符列表将在这里动态生成 --\\x3e\\n          </div>\\n        </div>\\n      </div>\\n    '),this.addStyles()}setupEventListeners(){$(document).off('click','#modifier-display-btn'),$(document).on('click','#modifier-display-btn',(()=>{this.toggleDisplay()})),$('#modifier-panel-close').on('click',(()=>{this.hideDisplay()})),$(document).on('click',(e=>{!this.isVisible||$(e.target).closest('#modifier-display-panel').length||$(e.target).closest('#modifier-display-btn').length||this.hideDisplay()}))}toggleDisplay(){this.isVisible?this.hideDisplay():this.showDisplay()}showDisplay(){this.updateModifierList(),$('#modifier-display-panel').fadeIn(200),this.isVisible=!0}hideDisplay(){$('#modifier-display-panel').fadeOut(200),this.isVisible=!1}updateModifierList(){const e=this.gameStateManager.getPlayer(),t=this.gameStateManager.getEnemy();if(!e&&!t)return void $('#modifier-list').html('<div class=\"no-modifiers\">暂无修饰符</div>');let a='';if(e){const t=this.getAllEntityModifiers(e);if(Object.values(t).some((e=>0!==e))){a+='<div class=\"modifier-section\"><h4>玩家修饰符</h4>';for(const[e,n]of Object.entries(t)){if(0===n)continue;e.endsWith('__add')||e.endsWith('__mul');a+=`\\n            <div class=\"modifier-item ${n>0?'positive':'negative'}\">\\n              <span class=\"modifier-name\">${this.getModifierDisplayName(e)}</span>\\n              <span class=\"modifier-value\">${this.formatModifierValue(n,e.endsWith('__mul'))}</span>\\n            </div>\\n          `}a+='</div>'}}if(t){const e=this.getAllEntityModifiers(t);if(Object.values(e).some((e=>0!==e))){a+='<div class=\"modifier-section\"><h4>敌人修饰符</h4>';for(const[t,n]of Object.entries(e)){if(0===n)continue;t.endsWith('__add')||t.endsWith('__mul');a+=`\\n            <div class=\"modifier-item ${n>0?'positive':'negative'}\">\\n              <span class=\"modifier-name\">${this.getModifierDisplayName(t)}</span>\\n              <span class=\"modifier-value\">${this.formatModifierValue(n,t.endsWith('__mul'))}</span>\\n            </div>\\n          `}a+='</div>'}}''===a&&(a='<div class=\"no-modifiers\">暂无修饰符</div>'),$('#modifier-list').html(a)}getAllEntityModifiers(e){const t=['damage_modifier','damage_taken_modifier','lust_damage_modifier','lust_damage_taken_modifier','block_modifier','heal_modifier','draw','discard','energy_gain','card_play_limit'],a={};for(const n of t){const t=this.effectExecutor.analyzeModifierFromStatusEffects(e,n);a[`${n}__add`]=t.add,a[`${n}__mul`]=1!==t.mul?t.mul:0}return a}getModifierDisplayName(e){return{damage_modifier__add:'伤害修饰（加减）',damage_modifier__mul:'伤害修饰（乘除）',damage_taken_modifier__add:'受伤修饰（加减）',damage_taken_modifier__mul:'受伤修饰（乘除）',lust_damage_modifier__add:'欲望伤害修饰（加减）',lust_damage_modifier__mul:'欲望伤害修饰（乘除）',lust_damage_taken_modifier__add:'受欲望伤害修饰（加减）',lust_damage_taken_modifier__mul:'受欲望伤害修饰（乘除）',block_modifier:'格挡修饰',heal_modifier:'治疗修饰',draw:'抽牌修饰',discard:'弃牌修饰',energy_gain:'能量获得修饰',card_play_limit:'卡牌使用限制修饰'}[e]||e}formatModifierValue(e,t=!1){const a=e=>Math.round(10*e)/10;if(t)return 0===e?'×0':`×${a(e)}`;const n=a(e);return n>0?`+${n}`:`${n}`}addStyles(){$('head').append('\\n      <style>\\n        .modifier-display-btn {\\n          position: fixed;\\n          bottom: 20px; /* 挪到战斗日志按钮旁边 */\\n          left: 140px;\\n          width: 80px;\\n          height: 32px;\\n          border: 2px solid #667eea;\\n          border-radius: 6px;\\n          background: rgba(30, 30, 30, 0.9);\\n          color: #667eea;\\n          font-size: 12px;\\n          cursor: pointer;\\n          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\\n          transition: all 0.3s ease;\\n          z-index: 500; /* 降低层级，避免遮挡手牌 */\\n          display: flex;\\n          align-items: center;\\n          justify-content: center;\\n        }\\n\\n        .modifier-display-btn:hover {\\n          background: rgba(102, 126, 234, 0.1);\\n          border-color: #8b5cf6;\\n          color: #8b5cf6;\\n          transform: translateY(-2px);\\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);\\n        }\\n\\n        .modifier-btn-text {\\n          font-weight: 500;\\n          letter-spacing: 0.5px;\\n        }\\n\\n        .modifier-display-panel {\\n          position: fixed;\\n          top: 50%;\\n          left: 50%;\\n          transform: translate(-50%, -50%);\\n          width: 400px;\\n          max-height: 500px;\\n          background: rgba(30, 30, 30, 0.95);\\n          border: 2px solid #667eea;\\n          border-radius: 12px;\\n          box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);\\n          z-index: 2000;\\n          backdrop-filter: blur(10px);\\n        }\\n\\n        .modifier-panel-header {\\n          display: flex;\\n          justify-content: space-between;\\n          align-items: center;\\n          padding: 16px 20px;\\n          border-bottom: 1px solid #444;\\n        }\\n\\n        .modifier-panel-header h3 {\\n          margin: 0;\\n          color: #fff;\\n          font-size: 18px;\\n        }\\n\\n        .close-btn {\\n          background: none;\\n          border: none;\\n          color: #ccc;\\n          font-size: 24px;\\n          cursor: pointer;\\n          padding: 0;\\n          width: 30px;\\n          height: 30px;\\n          display: flex;\\n          align-items: center;\\n          justify-content: center;\\n          border-radius: 50%;\\n          transition: all 0.2s ease;\\n        }\\n\\n        .close-btn:hover {\\n          background: rgba(255, 255, 255, 0.1);\\n          color: #fff;\\n        }\\n\\n        .modifier-panel-content {\\n          padding: 20px;\\n          max-height: 400px;\\n          overflow-y: auto;\\n        }\\n\\n        .modifier-list {\\n          display: flex;\\n          flex-direction: column;\\n          gap: 12px;\\n        }\\n\\n        .modifier-section {\\n          border: 1px solid #444;\\n          border-radius: 8px;\\n          padding: 12px;\\n          background: rgba(255, 255, 255, 0.02);\\n        }\\n\\n        .modifier-section h4 {\\n          margin: 0 0 8px 0;\\n          color: #e5e7eb;\\n          font-size: 14px;\\n          font-weight: 600;\\n          border-bottom: 1px solid #555;\\n          padding-bottom: 4px;\\n        }\\n\\n        .modifier-item {\\n          display: flex;\\n          justify-content: space-between;\\n          align-items: center;\\n          padding: 12px 16px;\\n          border-radius: 8px;\\n          background: rgba(255, 255, 255, 0.05);\\n          border-left: 4px solid;\\n        }\\n\\n        .modifier-item.positive {\\n          border-left-color: #4ade80;\\n        }\\n\\n        .modifier-item.negative {\\n          border-left-color: #f87171;\\n        }\\n\\n        .modifier-name {\\n          color: #e5e7eb;\\n          font-weight: 500;\\n        }\\n\\n        .modifier-value {\\n          font-weight: bold;\\n          font-size: 16px;\\n        }\\n\\n        .modifier-item.positive .modifier-value {\\n          color: #4ade80;\\n        }\\n\\n        .modifier-item.negative .modifier-value {\\n          color: #f87171;\\n        }\\n\\n        .no-modifiers {\\n          text-align: center;\\n          color: #9ca3af;\\n          font-style: italic;\\n          padding: 20px;\\n        }\\n      </style>\\n    ')}refresh(){this.isVisible&&this.updateModifierList()}}class w{static instance;static effectDisplay=r.W.getInstance();constructor(){}static getInstance(){return w.instance||(w.instance=new w),w.instance}showStatusDetail(e,t){const a=t.getPlayer(),n=t.getEnemy();if(!a)return void console.warn('无法获取玩家数据');let s='',i='',r=0,o=0;switch(e){case'health':s='❤️ 生命值',r=a.currentHp||0,o=a.maxHp||100,i=`\\n          <div class=\"stat-detail-item\">\\n            <strong>当前生命值：</strong> ${r} / ${o}\\n          </div>\\n          <div class=\"stat-detail-description\">\\n            生命值降到0时战斗失败。可以通过治疗效果恢复生命值。\\n          </div>\\n        `;break;case'lust':s='💗 欲望值',r=a.currentLust||0,o=a.maxLust||100;t.getGameState();const c=n?.lustEffect;let l='';if(c){const e=parseEffectToTags(c.effect||''),t=createEffectTagsHTML(e);l=`\\n            <div class=\"lust-overflow-info\">\\n              <h4>💋 欲望溢出效果</h4>\\n              <div class=\"overflow-effect-name\">${c.name||'欲望爆发'}</div>\\n              <div class=\"overflow-effect-description\">${c.description||'欲望达到上限时触发的效果'}</div>\\n              ${t}\\n            </div>\\n          `}i=`\\n          <div class=\"stat-detail-item\">\\n            <strong>当前欲望值：</strong> ${r} / ${o}\\n          </div>\\n          <div class=\"stat-detail-description\">\\n            欲望值达到上限时会触发特殊效果。某些攻击会造成欲望伤害。\\n          </div>\\n          ${l}\\n        `;break;case'energy':s='⚡ 能量',r=a.energy||0,o=a.maxEnergy||3,i=`\\n          <div class=\"stat-detail-item\">\\n            <strong>当前能量：</strong> ${r} / ${o}\\n          </div>\\n          <div class=\"stat-detail-description\">\\n            使用卡牌需要消耗能量。每回合开始时恢复到最大值。\\n          </div>\\n        `;break;case'block':s='🛡️ 格挡',r=a.block||0,i=`\\n          <div class=\"stat-detail-item\">\\n            <strong>当前格挡：</strong> ${r}\\n          </div>\\n          <div class=\"stat-detail-description\">\\n            格挡可以减少受到的伤害。每回合结束时格挡值清零。\\n          </div>\\n        `;break;case'cards':s='🃏 卡牌信息';i=`\\n          <div class=\"stat-detail-item\">\\n            <strong>手牌：</strong> ${a.hand?.length||0} 张\\n          </div>\\n          <div class=\"stat-detail-item\">\\n            <strong>抽牌堆：</strong> ${a.drawPile?.length||0} 张\\n          </div>\\n          <div class=\"stat-detail-item\">\\n            <strong>弃牌堆：</strong> ${a.discardPile?.length||0} 张\\n          </div>\\n          <div class=\"stat-detail-item\">\\n            <strong>消耗堆：</strong> ${a.exhaustPile?.length||0} 张\\n          </div>\\n          <div class=\"stat-detail-description\">\\n            点击抽牌堆或弃牌堆可以查看其中的卡牌。\\n          </div>\\n        `;break;case'relics':s='📿 遗物';const d=a.relics||[];if(0===d.length)i='\\n            <div class=\"stat-detail-description\">\\n              当前没有遗物。\\n            </div>\\n          ';else{i=`\\n            <div class=\"relics-list\">\\n              ${d.map((e=>{const t=w.effectDisplay.parseEffectToTags(e.effect||'',{isPlayerCard:!0,isStatusDisplay:!0}),a=w.effectDisplay.createEffectTagsHTML(t);return`\\n              <div class=\"relic-item\">\\n                <div class=\"relic-header\">\\n                  <span class=\"relic-emoji\">${e.emoji||'📿'}</span>\\n                  <span class=\"relic-name\">${e.name}</span>\\n                </div>\\n                <div class=\"relic-description\">${e.description}</div>\\n                ${a}\\n              </div>\\n            `})).join('')}\\n            </div>\\n          `}break;default:s='❓ 未知状态',i=`\\n          <div class=\"stat-detail-description\">\\n            无法识别的状态类型：${e}\\n          </div>\\n        `}this.showModal(s,i)}showModal(e,t){this.closeStatusDetail();const a=$(`\\n      <div class=\"status-detail-modal\">\\n        <div class=\"status-detail-overlay\"></div>\\n        <div class=\"status-detail-content\">\\n          <div class=\"status-detail-header\">\\n            <h3>${e}</h3>\\n            <button class=\"close-status-detail-btn\">✕</button>\\n          </div>\\n          <div class=\"status-detail-body\">\\n            ${t}\\n          </div>\\n        </div>\\n      </div>\\n    `);$('body').append(a),a.css({opacity:0}).animate({opacity:1},300),a.find('.close-status-detail-btn, .status-detail-overlay').on('click',(()=>{this.closeStatusDetail()})),a.find('.status-detail-content').on('click',(e=>{e.stopPropagation()}))}closeStatusDetail(){const e=$('.status-detail-modal');e.length>0&&e.animate({opacity:0},200,(function(){$(this).remove()}))}setupStatusClickEvents(){$(document).on('click','.player-stats .hp-stat, .health-indicator',(e=>{e.preventDefault(),this.handleStatusClick('health')})),$(document).on('click','.player-stats .lust-stat, .lust-indicator',(e=>{e.preventDefault(),this.handleStatusClick('lust')})),$(document).on('click','.player-stats .energy-stat, .energy-indicator',(e=>{e.preventDefault(),this.handleStatusClick('energy')})),$(document).on('click','.player-stats .block-stat, .block-indicator',(e=>{e.preventDefault(),this.handleStatusClick('block')})),$(document).on('click','.player-stats .cards-stat, .cards-indicator',(e=>{e.preventDefault(),this.handleStatusClick('cards')})),$(document).on('click','.player-stats .relics-stat, .relics-indicator',(e=>{e.preventDefault(),this.handleStatusClick('relics')})),console.log('✅ 状态栏点击事件已设置')}handleStatusClick(e){const t=new CustomEvent('requestStatusDetail',{detail:{statType:e}});document.dispatchEvent(t)}showStatusByType(e,t){this.showStatusDetail(e,t),console.log(`📊 显示状态详情: ${e}`)}initializeStatusDetailSystem(){this.addStatusDetailStyles(),console.log('✅ 状态详情系统初始化完成')}addStatusDetailStyles(){if($('#status-detail-styles').length>0)return;$('head').append('\\n      <style id=\"status-detail-styles\">\\n        .status-detail-modal {\\n          position: fixed;\\n          top: 0;\\n          left: 0;\\n          width: 100%;\\n          height: 100%;\\n          z-index: 3000;\\n          display: flex;\\n          align-items: center;\\n          justify-content: center;\\n        }\\n\\n        .status-detail-overlay {\\n          position: absolute;\\n          top: 0;\\n          left: 0;\\n          width: 100%;\\n          height: 100%;\\n          background: rgba(0, 0, 0, 0.7);\\n          cursor: pointer;\\n        }\\n\\n        .status-detail-content {\\n          position: relative;\\n          background: linear-gradient(135deg, #2a1810, #3d2817);\\n          border: 2px solid #4a5568;\\n          border-radius: 12px;\\n          width: 90%;\\n          max-width: 600px;\\n          max-height: 80vh;\\n          overflow-y: auto;\\n          box-shadow: 0 12px 36px rgba(0, 0, 0, 0.8);\\n        }\\n\\n        .status-detail-header {\\n          padding: 20px;\\n          background: linear-gradient(135deg, #4a5568, #2d3748);\\n          color: white;\\n          position: relative;\\n          border-radius: 10px 10px 0 0;\\n        }\\n\\n        .status-detail-header h3 {\\n          margin: 0;\\n          font-size: 1.4em;\\n          text-align: center;\\n        }\\n\\n        .close-status-detail-btn {\\n          position: absolute;\\n          top: 15px;\\n          right: 20px;\\n          background: none;\\n          border: none;\\n          color: white;\\n          font-size: 18px;\\n          cursor: pointer;\\n          padding: 5px;\\n          border-radius: 50%;\\n          transition: background 0.3s ease;\\n        }\\n\\n        .close-status-detail-btn:hover {\\n          background: rgba(255, 255, 255, 0.2);\\n        }\\n\\n        .status-detail-body {\\n          padding: 20px;\\n          color: white;\\n        }\\n\\n        .stat-detail-item {\\n          margin-bottom: 12px;\\n          padding: 8px 12px;\\n          background: rgba(255, 255, 255, 0.05);\\n          border-radius: 6px;\\n          border-left: 3px solid #4299e1;\\n        }\\n\\n        .stat-detail-description {\\n          margin-top: 15px;\\n          padding: 12px;\\n          background: rgba(255, 255, 255, 0.03);\\n          border-radius: 6px;\\n          font-size: 0.9em;\\n          color: #a0aec0;\\n          line-height: 1.5;\\n        }\\n\\n        .lust-overflow-info {\\n          margin-top: 20px;\\n          padding: 15px;\\n          background: rgba(255, 105, 180, 0.1);\\n          border: 1px solid rgba(255, 105, 180, 0.3);\\n          border-radius: 8px;\\n        }\\n\\n        .lust-overflow-info h4 {\\n          margin: 0 0 10px 0;\\n          color: #ff69b4;\\n        }\\n\\n        .overflow-effect-name {\\n          font-weight: bold;\\n          color: #ff69b4;\\n          margin-bottom: 8px;\\n        }\\n\\n        .overflow-effect-description {\\n          margin-bottom: 10px;\\n          color: #e2e8f0;\\n          font-size: 0.9em;\\n        }\\n\\n        .relics-list {\\n          display: flex;\\n          flex-direction: column;\\n          gap: 15px;\\n        }\\n\\n        .relic-item {\\n          padding: 12px;\\n          background: rgba(255, 255, 255, 0.05);\\n          border-radius: 8px;\\n          border: 1px solid rgba(255, 255, 255, 0.1);\\n        }\\n\\n        .relic-header {\\n          display: flex;\\n          align-items: center;\\n          gap: 10px;\\n          margin-bottom: 8px;\\n        }\\n\\n        .relic-emoji {\\n          font-size: 1.5em;\\n        }\\n\\n        .relic-name {\\n          font-weight: bold;\\n          color: #e2e8f0;\\n          font-size: 1.1em;\\n        }\\n\\n        .relic-description {\\n          color: #a0aec0;\\n          font-size: 0.9em;\\n          line-height: 1.4;\\n          margin-bottom: 10px;\\n        }\\n      </style>\\n    ')}}class E{battleManager;cardSystem;effectEngine;gameStateManager;animationManager;pileViewer;statusDetailViewer;lustOverflowDisplay;modifierDisplay;relicEffectManager;refreshTimer=null;constructor(){this.battleManager=h.getInstance(),this.cardSystem=l.getInstance(),this.effectEngine=c.getInstance(),this.gameStateManager=n.GameStateManager.getInstance(),this.animationManager=i.getInstance(),this.pileViewer=p.getInstance(),this.statusDetailViewer=w.getInstance(),this.lustOverflowDisplay=o.getInstance(),this.modifierDisplay=new x(this.gameStateManager),this.relicEffectManager=g.getInstance()}async initialize(){try{console.log('🎮 Fish RPG 战斗系统启动'),s.init(),this.statusDetailViewer.initializeStatusDetailSystem(),b.getInstance(),v.getInstance(),d.b.getInstance().refreshFromMVU(),this.setupEventListeners(),await this.loadBattleData();const e=this.gameStateManager.getEnemy();if(!e||!e.name){const e='无法进行战斗：敌人变量注册错误，请尝试重新生成';return void this.showNoEnemyDialog(e)}await this.refreshUI(),this.lustOverflowDisplay.initializeLustOverflowSystem(),await this.triggerBattleStartEffects(),await this.refreshUI(),console.log('✅ Fish RPG 战斗系统初始化完成'),this.validateSystemState()}catch(e){console.error('❌ 初始化失败:',e)}}showNoEnemyDialog(e){const t=document.getElementById('no-enemy-dialog'),a=document.getElementById('no-enemy-message');a&&(a.textContent=e),t&&(t.style.display='block');const n=document.getElementById('no-enemy-refresh');n?.addEventListener('click',(()=>location.reload()))}validateSystemState(){const e=this.gameStateManager.getGameState();if(e.enemy&&e.enemy.name)console.log('🔍 系统状态验证:',{player:{hand:e.player?.hand?.length||0,drawPile:e.player?.drawPile?.length||0,discardPile:e.player?.discardPile?.length||0,energy:e.player?.energy||0,hp:`${e.player?.currentHp||0}/${e.player?.maxHp||0}`,lust:`${e.player?.currentLust||0}/${e.player?.maxLust||0}`},enemy:{name:e.enemy?.name||'None',hasActions:(e.enemy?.actions?.length||0)>0,hasNextAction:!!e.enemy?.nextAction,hasLustEffect:!!e.enemy?.lustEffect,hp:`${e.enemy?.currentHp||0}/${e.enemy?.maxHp||0}`,lust:`${e.enemy?.currentLust||0}/${e.enemy?.maxLust||0}`},phase:e.phase,turn:e.currentTurn}),console.log('🔧 模块状态:',{battleManager:!!this.battleManager,cardSystem:!!this.cardSystem,effectEngine:!!this.effectEngine,animationManager:!!this.animationManager,pileViewer:!!this.pileViewer,statusDetailViewer:!!this.statusDetailViewer,lustOverflowDisplay:!!this.lustOverflowDisplay});else{console.error('❌ 系统验证失败：敌人数据缺失');const e='\\n        <div class=\"error-banner\" style=\"\\n          background: linear-gradient(135deg, #ff4444, #cc0000);\\n          color: white;\\n          padding: 20px;\\n          border-radius: 10px;\\n          margin: 20px;\\n          text-align: center;\\n          box-shadow: 0 4px 6px rgba(0,0,0,0.3);\\n          animation: pulse 2s infinite;\\n        \">\\n          <h2 style=\"margin: 0 0 10px 0;\">⚠️ 战斗初始化失败</h2>\\n          <p style=\"margin: 5px 0;\">无法加载敌人数据！</p>\\n          <p style=\"margin: 5px 0; font-size: 14px;\">请确保AI已正确生成 battle.enemy 变量</p>\\n          <button onclick=\"location.reload()\" style=\"\\n            background: white;\\n            color: #cc0000;\\n            border: none;\\n            padding: 10px 20px;\\n            border-radius: 5px;\\n            cursor: pointer;\\n            font-weight: bold;\\n            margin-top: 10px;\\n          \">刷新页面</button>\\n        </div>\\n        <style>\\n          @keyframes pulse {\\n            0% { transform: scale(1); }\\n            50% { transform: scale(1.02); }\\n            100% { transform: scale(1); }\\n          }\\n        </style>\\n      ';[document.querySelector('.enemy-container'),document.querySelector('.battle-log-content'),document.querySelector('.player-container')].forEach((t=>{t&&(t.innerHTML=e)}))}}setupEventListeners(){$(document).on('click','.card.clickable:not(.disabled), .enhanced-card.clickable:not(.disabled)',(async e=>{e.preventDefault(),e.stopPropagation();const t=$(e.currentTarget).data('card-id');if(console.log('🃏 卡牌点击事件:',t),t){const e=this.gameStateManager.getPlayer().hand.find((e=>e.id===t));if(e&&'Curse'===e.type)return void i.getInstance().showCardBlockedNotification(e.name||'诅咒','诅咒牌无法被打出');await this.playCard(t)}else console.warn('⚠️ 卡牌没有ID:',e.currentTarget)})),$('.end-turn-button').on('click',(async()=>{await this.endTurn()})),$(document).on('click','#battle-log-btn',(()=>{$('#battle-log').fadeToggle(200)})),$('#exit-battle-btn').on('click',(async()=>{await this.exitBattle()})),$('#use-item-btn').on('click',(()=>{this.showItemModal()})),$(document).on('click','.item-use-btn',(async e=>{const t=$(e.currentTarget).data('item-id');t&&await this.useItem(t)})),$(document).on('click','#close-item-modal',(()=>{$('#item-use-modal').hide()})),this.pileViewer.setupPileClickEvents(),this.statusDetailViewer.setupStatusClickEvents(),document.addEventListener('requestPileData',(e=>{const{pileType:t}=e.detail;this.pileViewer.showPileByType(t,this.gameStateManager)})),document.addEventListener('requestStatusDetail',(e=>{const{statType:t}=e.detail;this.statusDetailViewer.showStatusByType(t,this.gameStateManager)})),$('#draw-pile-btn').on('click',(()=>{console.log('查看抽牌堆')})),$('#discard-pile-btn').on('click',(()=>{console.log('查看弃牌堆')})),console.log('✅ 事件监听器设置完成');const e=this.gameStateManager,t=()=>{this.refreshTimer||(this.refreshTimer=setTimeout((async()=>{this.refreshTimer=null;try{await this.refreshUI()}catch(e){console.error('自动刷新UI失败:',e)}}),30))};['cards_drawn','hand_updated','card_added_to_hand','card_added_to_deck','discard_updated','deck_shuffled','player_updated','enemy_updated','state_loaded','turn_incremented','phase_changed'].forEach((a=>{e.addEventListener(a,(()=>{t()}))}))}async loadBattleData(){try{await this.gameStateManager.loadFromSillyTavern()||console.log('未找到保存的游戏状态，使用默认状态')}catch(e){console.error('加载战斗数据失败:',e)}}async triggerBattleStartEffects(){try{console.log('🚀 触发战斗开始时的效果...'),await this.effectEngine.processStatusEffectsAtBattleStart('player'),await this.effectEngine.processStatusEffectsAtBattleStart('enemy'),await this.effectEngine.processAbilitiesAtBattleStart('player'),await this.effectEngine.processAbilitiesAtBattleStart('enemy'),await this.effectEngine.processPassiveAbilities('player'),await this.effectEngine.processPassiveAbilities('enemy'),await this.effectEngine.processAbilitiesByTrigger('player','ability_gain'),await this.effectEngine.processAbilitiesByTrigger('enemy','ability_gain'),await this.relicEffectManager.triggerOnBattleStart(),await this.relicEffectManager.triggerPassiveEffects(),console.log('✅ 战斗开始时效果触发完成')}catch(e){console.error('❌ 触发战斗开始时效果失败:',e)}}async refreshUI(){try{const e=this.gameStateManager.getGameState();console.log('🔄 刷新UI - 当前游戏状态:',{player:e?.player?{hp:e.player.currentHp,energy:e.player.energy,handSize:e.player.hand?.length||0,deckSize:e.player.drawPile?.length||0,hand:e.player.hand?.map((e=>({id:e.id,name:e.name})))||[]}:null,enemy:e?.enemy?{name:e.enemy.name,hp:e.enemy.currentHp}:null,phase:e?.phase}),e?(await y.refreshBattleUI(e),this.modifierDisplay.refresh()):console.warn('⚠️ 没有游戏状态数据')}catch(e){console.error('刷新UI失败:',e)}}async playCard(e){try{const t=$(`.card[data-card-id=\"${e}\"], .enhanced-card[data-card-id=\"${e}\"]`);t.length>0&&await this.animationManager.animateCardPlay(t);const a=this.cardSystem.getCardInHand(e),n=a?a.name:e;await this.cardSystem.playCard(e)?(s.logPlayerAction('卡牌',`使用了卡牌 ${n}`),await this.refreshUI()):await this.refreshUI()}catch(e){console.error('使用卡牌失败:',e)}}async endTurn(){try{await this.battleManager.endPlayerTurn(),await this.refreshUI()}catch(e){console.error('结束回合失败:',e)}}async exitBattle(){try{console.log('退出战斗'),location.reload()}catch(e){console.error('退出战斗失败:',e)}}showItemModal(){try{const e=this.gameStateManager.getGameState(),t=(e.battle?.items||[]).filter((e=>e.count>0));if(0===t.length)return void console.log('没有可用道具');const a=t.map((e=>`\\n          <div class=\"item-entry\">\\n            <div class=\"item-info\">\\n              <div class=\"item-header\">\\n                <span class=\"item-emoji\">${e.emoji||'🧪'}</span>\\n                <span class=\"item-name\">${e.name}</span>\\n                <span class=\"item-count\">x${e.count}</span>\\n              </div>\\n              <div class=\"item-description\">${e.description||'无描述'}</div>\\n            </div>\\n            <button class=\"item-use-btn\" data-item-id=\"${e.id}\">使用</button>\\n          </div>\\n        `)).join('');$('#item-use-modal .item-list').html(a),$('#item-use-modal').show(),console.log('显示道具模态框')}catch(e){console.error('显示道具模态框失败:',e)}}async useItem(e){try{const t=this.gameStateManager.getGameState(),a=t.battle?.items?.find((t=>t.id===e));if(!a)return void console.error('道具未找到:',e);if(a.count<=0)return void console.log('道具数量不足');await this.effectEngine.executeEffect(a.effect,!0),a.count-=1,s.logPlayerAction('道具',`使用了道具 ${a.name}`),$('#item-use-modal').hide(),await this.refreshUI(),console.log(`使用道具: ${a.name}`)}catch(e){console.error('使用道具失败:',e)}}async drawCards(e){try{const t=this.cardSystem.drawCards(e);t.length>0&&(console.log(`抽取了 ${t.length} 张卡牌`),await this.refreshUI())}catch(e){console.error('抽卡失败:',e)}}}let S;window.playCardWithMVU=async e=>{S&&await S.playCard(e)},window.endTurnWithMVU=async()=>{S&&await S.endTurn()},window.exitBattleWithMVU=async()=>{S&&await S.exitBattle()},window.drawCardsWithMVU=async e=>{S&&await S.drawCards(e)},window.refreshBattleUI=async()=>{S&&await S.refreshUI()},$((()=>{S=new E,S.initialize()})),console.log('✅ Fish RPG战斗系统模块加载完成');</script></body></html>\n```",
    "trimStrings": [],
    "placement": [
        2
    ],
    "disabled": false,
    "markdownOnly": true,
    "promptOnly": false,
    "runOnEdit": true,
    "substituteRegex": 0,
    "minDepth": null,
    "maxDepth": 1
}