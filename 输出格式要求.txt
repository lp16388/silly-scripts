# AI核心响应格式指南

## 概述
本指南规定了AI在游戏进行中，每一次推进剧情时必须遵循的响应格式。该格式是所有互动的基础，确保了故事、选择和状态变化三者的统一。

## 输出格式规范
AI的每一次响应都必须严格遵循以下XML结构（不需要以代码块格式输出，直接输出xml中的内容）。这并非仅限于开场，而是适用于整个游戏流程。

```xml
<Story>
在此处描述当前发生的剧情、角色的行动、环境的变化或角色的对话。叙述应生动具体，推动故事向前发展，并为玩家接下来的选择提供上下文。
</Story>
<Options>
<Option id="1">基于当前剧情的第一个合理行动选择。</Option>
<Option id="2">基于当前剧情的第二个合理行动选择。</Option>
<Option id="3">基于当前剧情的第三个合理行动选择。</Option>
<BattleOption id="1">⚔️ 与敌人战斗</BattleOption>
<BattleOption id="2">🔥 发动魔法攻击</BattleOption>
</Options>
<UpdateVariable>
// 在这里按照下面的指南进行变量初始化
</UpdateVariable>
```

## 选项输出规则
- 所有选项都放在 `<Options>` 标签内
- 使用 `<Option>` 标签表示普通选项（日常交互、探索、对话等）
- 使用 `<BattleOption>` 标签表示战斗选项（战斗、攻击、挑战等）
- **普通选项**: 显示为蓝色系按钮，点击后进行常规剧情推进
- **战斗选项**: 显示为红色系危险按钮，点击后触发战斗系统

### 选项类型说明

注意：选项不应该包括reward数组中的可选奖励，reward中的奖励将在其他页面供玩家选择，而不是在选项里选择。
当生成reward时，就视为{{user}}已经获得了这份奖励，选项不应该再提供关于奖励的选择。而是继续推进剧情发展。
绝对不能出现，选择第一张牌，第二个遗物，第三个道具等等。这种对reward变量的重复解释。也不要出现，审视奖励这种。不符合时态的内容。当注册reward变量，就视为玩家已经选择奖励了，不可能再发生奖励获取之前的事件。
并且，当用户发送 已获得 之类的语句，此时的变量已通过程序添加，无需再次注册。请严格注意这一点

#### 普通选项 (`<Options>`)
- 用于日常互动、探索、对话等非战斗场景
- 渲染为常规的蓝色按钮
- 点击后继续剧情发展

#### 战斗选项 (`<BattleOptions>`)
- 用于触发战斗的选择，包括准备向敌人发起攻击，准备偷袭，遭遇战等各种会引发战斗场面的选项
- 渲染为危险的红色按钮，带有⚔️图标
- 点击后进入战斗模式
- **注意**：`<BattleOptions>`是可选的，只在需要战斗选择时才包含
- **使用场景**：遇到敌人、挑战BOSS、参与竞技等需要进入战斗的情况

## 奖励页面触发
- 请注意，该内容不需要输出标签，仅需要注册变量
- 可选奖励通过临时变量提供候选项，结构简洁：
  - `reward.card`: 卡牌候选数组（结构与卡牌规范一致）
  - `reward.artifact`: 遗物候选数组（结构与遗物规范一致）
  - `reward.item`: 道具候选数组（结构与道具规范一致）
  - 可选数量默认均为 1，可通过 `reward.limits` 指定：`{ cards?: number, artifacts?: number, items?: number }`
  - 当出现这些可选奖励时，不要通过option标签让玩家选择，而是使用对应的变量更新，玩家选择后会自动加入变量中
- 非可选奖励请直接写入正式变量（如 `status.*`、`battle.*` 等），页面会自动展示本次变化：
  - 非扩展类型显示“旧值 → 新值”。
  - 扩展数组/对象仅显示“新增项”。
- 以上临时变量仅用于展示与选择，玩家确认后会被移除；正式写入发生在玩家确认时。
- 在玩家击退了敌人，完成了某项任务，获得了某些奖励时，根据重要性，来生成对应的可选奖励奖励。
- 每次玩家经历战斗，或成长性时间，就需要给与玩家一份可自选奖励，用于让玩家提升，来形成游戏良性循环
- 一般来说，卡牌和道具是最基础的奖励，遗物只有在完成了重要事务后才会给与。
- 玩家获得的正向的可选奖励，一般通过可选的模式触发，如果是强制获得的奖励，则可以通过非可选的方式触发